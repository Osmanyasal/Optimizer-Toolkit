#!/bin/python3
import json
import os
import sys
import matplotlib.pyplot as plt
 
def generate_json_string(duration, 
                         socket0_value_energy_pkg, 
                         socket0_value_energy_ram, 
                         socket0_value_energy_cores,
                         socket0_value_energy_gpu,
                         socket0_value_energy_psys,
                         socket0_value_energy_total,
                         socket0_value_energy_power,
                         
                         socket1_value_energy_pkg, 
                         socket1_value_energy_ram,
                         socket1_value_energy_cores,
                         socket1_value_energy_gpu,
                         socket1_value_energy_psys,
                         socket1_value_energy_total,
                         socket1_value_energy_power,
                         ):
    json_string = f'''[
    {{
        "readings": [
            {{
                "duration": {duration},
                "event_name": "rapl",
                "metrics_set": [
                    {{
                        "description": "Consumed",
                        "metric_name": "energy-total",
                        "units": "Joules",
                        "value": {socket0_value_energy_total}
                    }},
                    {{
                        "description": "Consumed",
                        "metric_name": "power",
                        "units": "Miliwatt",
                        "value": {socket0_value_energy_power}
                    }},
                    {{
                        "description": "Consumed",
                        "metric_name": "energy-pkg",
                        "units": "Joules",
                        "value": {socket0_value_energy_pkg}
                    }},
                    {{
                        "description": "Consumed",
                        "metric_name": "energy-ram",
                        "units": "Joules",
                        "value": {socket0_value_energy_ram}
                    }},
                    {{
                        "description": "Consumed",
                        "metric_name": "energy-cores",
                        "units": "Joules",
                        "value": {socket0_value_energy_cores}
                    }},
                    {{
                        "description": "Consumed",
                        "metric_name": "energy-gpu",
                        "units": "Joules",
                        "value": {socket0_value_energy_gpu}
                    }},
                    {{
                        "description": "Consumed",
                        "metric_name": "energy-psys",
                        "units": "Joules",
                        "value": {socket0_value_energy_psys}
                    }}
                ],
                "package_number": 0
            }},
            {{
                "duration": {duration},
                "event_name": "rapl",
                "metrics_set": [
                    {{
                        "description": "Consumed",
                        "metric_name": "energy-total",
                        "units": "Joules",
                        "value": {socket1_value_energy_total}
                    }},
                    {{
                        "description": "Consumed",
                        "metric_name": "power",
                        "units": "Miliwatt",
                        "value": {socket1_value_energy_power}
                    }},
                    {{
                        "description": "Consumed",
                        "metric_name": "energy-pkg",
                        "units": "Joules",
                        "value": {socket1_value_energy_pkg}
                    }},
                    {{
                        "description": "Consumed",
                        "metric_name": "energy-ram",
                        "units": "Joules",
                        "value": {socket1_value_energy_ram}
                    }},
                    {{
                        "description": "Consumed",
                        "metric_name": "energy-cores",
                        "units": "Joules",
                        "value": {socket1_value_energy_cores}
                    }},
                    {{
                        "description": "Consumed",
                        "metric_name": "energy-gpu",
                        "units": "Joules",
                        "value": {socket1_value_energy_gpu}
                    }},
                    {{
                        "description": "Consumed",
                        "metric_name": "energy-psys",
                        "units": "Joules",
                        "value": {socket1_value_energy_psys}
                    }}
                ],
                "package_number": 1
            }}
        ]
    }}
]'''
    return json_string
 

def write_json_to_file(json_string, filename):
    with open(filename, 'w') as file:
        file.write(json_string)

def read_json_files(directory):
    json_files = []
    for root, _, files in os.walk(directory):
        for file in files:
            if file.endswith(".json"):
                json_files.append(os.path.join(root, file))
    for file in sorted(json_files):
        print(file)
    return sorted(json_files)  # Sort the list of JSON files

 
durations = [] 
socket0_energy_pkg_values = []
socket0_energy_ram_values = [] 
socket0_energy_cores_values = []
socket0_energy_gpu_values = [] 
socket0_energy_psys_values = [] 
socket0_energy_total = [] 
socket0_power = [] 

socket1_energy_pkg_values = []
socket1_energy_ram_values = [] 
socket1_energy_cores_values = []
socket1_energy_gpu_values = [] 
socket1_energy_psys_values = [] 
socket1_energy_total = [] 
socket1_power = [] 

def fill_values_to_arrays(json_file):
    
    ## read file
    with open(json_file, "r") as file:
        data = json.load(file)
 
    duration = data[0]["readings"][0]["duration"] / 1000
    durations.append(duration)
    
    for reading in data[0]["readings"]:
        socket = reading["package_number"]   
        total_energy = 0
        for metric in reading["metrics_set"]:
            if metric["metric_name"] == "energy-pkg":
                energy_pkg = metric["value"]
                total_energy += energy_pkg
                if socket == 0:
                    socket0_energy_pkg_values.append(energy_pkg)
                else:
                    socket1_energy_pkg_values.append(energy_pkg)

            elif metric["metric_name"] == "energy-ram":
                energy_ram = metric["value"] 
                total_energy += energy_ram
                if socket == 0:
                    socket0_energy_ram_values.append(energy_ram)
                else:
                    socket1_energy_ram_values.append(energy_ram)
                    
            elif metric["metric_name"] == "energy-cores":
                energy_cores = metric["value"]
                #total_energy += energy_cores
                if socket == 0:
                    socket0_energy_cores_values.append(energy_cores)
                else:
                    socket1_energy_cores_values.append(energy_cores)
                    
            elif metric["metric_name"] == "energy-gpu":
                energy_gpu = metric["value"]
                #total_energy += energy_gpu
                if socket == 0:
                    socket0_energy_gpu_values.append(energy_gpu)
                else:
                    socket1_energy_gpu_values.append(energy_gpu)
                    
            elif metric["metric_name"] == "energy-psys":
                energy_psys = metric["value"]
                total_energy += energy_psys
                if socket == 0:
                    socket0_energy_psys_values.append(energy_psys)
                else:
                    socket1_energy_psys_values.append(energy_psys)
                      
        if socket == 0:
            socket0_energy_total.append(total_energy)
            socket0_power.append(total_energy / duration)
        else:
            socket1_energy_total.append(total_energy)
            socket1_power.append(total_energy / duration)

     

def avg_files(json_files,group):
    for file in json_files: 
        fill_values_to_arrays(file)
    print("All files filled in !!!")
    _start = 0
    _end = group
    
    counter = 0
    for ctr in range((len(json_files) // group)):
        
        _duration = (sum(durations[_start : _end]) / group) ## seconds
        
        _socket0_energy_pkg = sum(socket0_energy_pkg_values[_start : _end]) / group
        _socket0_energy_ram = sum(socket0_energy_ram_values[_start : _end])/ group
        _socket0_energy_cores =sum(socket0_energy_cores_values[_start : _end])/ group
        _socket0_energy_gpu = sum(socket0_energy_gpu_values[_start : _end])/ group
        _socket0_energy_psys = sum(socket0_energy_psys_values[_start : _end])/ group
        _socket0_energy_total = sum(socket0_energy_total[_start : _end])/ group
        _socket0_power = _socket0_energy_total * 1000 / _duration
        
        _socket1_energy_pkg = sum(socket1_energy_pkg_values[_start : _end])/ group
        _socket1_energy_ram = sum(socket1_energy_ram_values[_start : _end])/ group
        _socket1_energy_cores =sum(socket1_energy_cores_values[_start : _end])/ group
        _socket1_energy_gpu = sum(socket1_energy_gpu_values[_start : _end])/ group
        _socket1_energy_psys = sum(socket1_energy_psys_values[_start : _end])/ group
        _socket1_energy_total = sum(socket1_energy_total[_start : _end])/ group
        _socket1_power = _socket1_energy_total * 1000 / _duration
        
        avg_json = generate_json_string(_duration * 1000, ## give as miliseconds
                                        _socket0_energy_pkg,
                                        _socket0_energy_ram,
                                        _socket0_energy_cores,
                                        _socket0_energy_gpu,
                                        _socket0_energy_psys,
                                        _socket0_energy_total, 
                                        _socket0_power,
                                        _socket1_energy_pkg,
                                        _socket1_energy_ram,
                                        _socket1_energy_cores,
                                        _socket1_energy_gpu,
                                        _socket1_energy_psys,
                                        _socket1_energy_total,
                                        _socket1_power
                                        )
        
        file_name_builder = sys.argv[1]+"/group_"+str(group)+"__file__"+str(counter) if group != 1 else ""
        file_name_builder = file_name_builder + "__" + os.path.basename(json_files[counter]).replace(".json","") + "__" if group == 1 else file_name_builder
        file_name_builder = file_name_builder + "_formatted.yaml"
        write_json_to_file(avg_json,file_name_builder)
        
        _start = _start + group
        _end = _end + group
        counter = counter + 1
        
if __name__ == "__main__":
    if len(sys.argv) != 2 and len(sys.argv) != 3:
        print("Usage: python script.py <file_or_directory> <group=1>")
        sys.exit(1)
        
    path = sys.argv[1]
    group = 1 if len(sys.argv) == 2 else sys.argv[2] 
    if os.path.isfile(path):
        if path.endswith(".json"):
            fill_values_to_arrays(path)
        else:
            print("The specified file is not a JSON file.")
    elif os.path.isdir(path):
        json_files = read_json_files(path)
        avg_files(json_files,int(group))
    else:
        print("The specified path is not a valid file or directory.")
