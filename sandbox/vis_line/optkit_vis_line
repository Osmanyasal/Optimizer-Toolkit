#!/bin/python3
import json
import os
import sys
import matplotlib.pyplot as plt

def read_json_files(directory):
    json_files = []
    for root, _, files in os.walk(directory):
        for file in files:
            if file.endswith(".json"):
                json_files.append(os.path.join(root, file))
    for file in sorted(json_files):
        print(file)
    return sorted(json_files)  # Sort the list of JSON files


cores = []
durations = []
file_name = ""
socket0_energy_pkg_values = []
socket0_energy_ram_values = [] 
socket0_energy_cores_values = []
socket0_energy_gpu_values = [] 
socket0_energy_psys_values = [] 
socket0_energy_total = [] 
socket0_power = [] 

socket1_energy_pkg_values = []
socket1_energy_ram_values = [] 
socket1_energy_cores_values = []
socket1_energy_gpu_values = [] 
socket1_energy_psys_values = [] 
socket1_energy_total = [] 
socket1_power = [] 

def draw_line_chart(): 
    # Subplot for Socket 0 and 1
    fig, axes = plt.subplots(2, 1, figsize=(10, 8))
    
    # Socket 0
    # if(len(socket0_energy_pkg_values) > 0):
    #     axes[0].plot(cores, socket0_energy_pkg_values, marker='o', label='Energy Package (Joules)', linestyle='--', color='gold')
        
    # if(len(socket0_energy_ram_values) > 0):
    #     axes[0].plot(cores, socket0_energy_ram_values, marker='o', label='Energy RAM (Joules)', linestyle='--', color='lightgreen')
        
    # if(len(socket0_energy_cores_values) > 0):
    #     axes[0].plot(cores, socket0_energy_cores_values, marker='o', label='Energy CORES (Joules)', linestyle='--', color='orange')
        
    # if(len(socket0_energy_gpu_values) > 0):
    #     axes[0].plot(cores, socket0_energy_gpu_values, marker='o', label='Energy GPU (Joules)', linestyle='--', color='cyan')
        
    # if(len(socket0_energy_psys_values) > 0):
    #     axes[0].plot(cores, socket0_energy_psys_values, marker='o', label='Energy PSYS (Joules)', linestyle='--', color='cadetblue')

    if(len(socket0_energy_total) > 0):
        axes[0].plot(cores, socket0_energy_total, marker='D', label='Total Energy (Joules)', linestyle='-', color='green')

    if(len(socket0_power) > 0):
        axes[0].plot(cores, [power * 100 for power in socket0_power], marker='P', label='Power (100 x Watts)', linestyle='-', color="steelblue")
        # axes[0].plot(cores, [(p * 1000) / core for core, p in zip(cores, socket0_power)], marker='P', label='Power Efficiency (Power (Miliwatt) / # of cores)', linestyle='-', color="orange")
    
    axes[0].set_ylabel('Socket 0\nEnergy (Joules)') 
    axes[0].grid(True)
     
    axes0_2 = axes[0].twinx()
    axes0_2.plot(cores, durations, marker='.', label='Duration', linestyle=':', color='firebrick')
    axes0_2.set_ylabel('Duration')   
     
    # Combine legends
    lines_1, labels_1 = axes[0].get_legend_handles_labels()
    lines_2, labels_2 = axes0_2.get_legend_handles_labels()
    axes[0].legend(lines_1 + lines_2, labels_1 + labels_2)
     
    plt.xlabel('Cores')
    plt.xticks(cores)

    # Socket 1
    # if(len(socket1_energy_pkg_values) > 0):
    #     axes[1].plot(cores, socket1_energy_pkg_values, marker='o', label='Energy Package (Joules)', linestyle='--', color='gold')
        
    # if(len(socket1_energy_ram_values) > 0):
    #     axes[1].plot(cores, socket1_energy_ram_values, marker='o', label='Energy RAM (Joules)', linestyle='--', color='lightgreen')
        
    # if(len(socket1_energy_cores_values) > 0):
    #     axes[1].plot(cores, socket1_energy_cores_values, marker='o', label='Energy CORES (Joules)', linestyle='--', color='orange')
        
    # if(len(socket1_energy_gpu_values) > 0):
    #     axes[1].plot(cores, socket1_energy_gpu_values, marker='o', label='Energy GPU (Joules)', linestyle='--', color='cyan')
        
    # if(len(socket1_energy_psys_values) > 0):
    #     axes[1].plot(cores, socket1_energy_psys_values, marker='o', label='Energy PSYS (Joules)', linestyle='--', color='cadetblue')
    
    if(len(socket1_energy_total) > 0):
        axes[1].plot(cores, socket1_energy_total, marker='D', label='Total Energy (Joules)', linestyle='-', color='green')

    if(len(socket1_power) > 0):
        axes[1].plot(cores, [power * 100 for power in socket1_power], marker='P', label='Power (100 x Watts)', linestyle='-', color="steelblue")
        # axes[1].plot(cores, [(p * 1000) / core for core, p in zip(cores, socket1_power)], marker='P', label='Power Efficiency (Power (Miliwatt) / # of cores)', linestyle='-', color="orange")
    
        
    axes[1].set_ylabel('Socket 1\nEnergy (Joules)') 
    axes[1].grid(True)
    
    axes0_2 = axes[1].twinx()
    axes0_2.plot(cores, durations, marker='.', label='Duration', linestyle=':', color='firebrick')
    axes0_2.set_ylabel('Duration')  
 
    # Combine legends
    lines_1, labels_1 = axes[1].get_legend_handles_labels()
    lines_2, labels_2 = axes0_2.get_legend_handles_labels()
    axes[1].legend(lines_1 + lines_2, labels_1 + labels_2)
    
    plt.xlabel('Cores')
    plt.xticks(cores)
    plt.get_current_fig_manager().set_window_title(file_name)
  
    fig.suptitle('Energy Consumption of Socket 0 and Socket 1')
    plt.tight_layout()
    plt.show()

def fill_line_chart(json_file):
    
    ## read file
    with open(json_file, "r") as file:
        data = json.load(file)
 
    duration = data[0]["readings"][0]["duration"] / 1000
    durations.append(duration)
    
    for reading in data[0]["readings"]:
        socket = reading["package_number"]   
        total_energy = 0
        for metric in reading["metrics_set"]:
            if metric["metric_name"] == "energy-pkg":
                energy_pkg = metric["value"]
                total_energy += energy_pkg
                if socket == 0:
                    socket0_energy_pkg_values.append(energy_pkg)
                else:
                    socket1_energy_pkg_values.append(energy_pkg)

            elif metric["metric_name"] == "energy-ram":
                energy_ram = metric["value"] 
                total_energy += energy_ram
                if socket == 0:
                    socket0_energy_ram_values.append(energy_ram)
                else:
                    socket1_energy_ram_values.append(energy_ram)
                    
            elif metric["metric_name"] == "energy-cores":
                energy_cores = metric["value"]
                #total_energy += energy_cores
                if socket == 0:
                    socket0_energy_cores_values.append(energy_cores)
                else:
                    socket1_energy_cores_values.append(energy_cores)
                    
            elif metric["metric_name"] == "energy-gpu":
                energy_gpu = metric["value"]
                #total_energy += energy_gpu
                if socket == 0:
                    socket0_energy_gpu_values.append(energy_gpu)
                else:
                    socket1_energy_gpu_values.append(energy_gpu)
                    
            elif metric["metric_name"] == "energy-psys":
                energy_psys = metric["value"]
                total_energy += energy_psys
                if socket == 0:
                    socket0_energy_psys_values.append(energy_psys)
                else:
                    socket1_energy_psys_values.append(energy_psys)
                      
        if socket == 0:
            socket0_energy_total.append(total_energy)
            socket0_power.append(total_energy / duration)
        else:
            socket1_energy_total.append(total_energy)
            socket1_power.append(total_energy / duration)
 

def plot_json_files(json_files):
    for file in json_files:
        if(len(cores) == 0):
            cores.append(1)
        elif (cores[-1] == 1):
            cores.append(2)
        else:
            cores.append(cores[-1] + 2)
        fill_line_chart(file)
        
    draw_line_chart()

if __name__ == "__main__":
    if len(sys.argv) != 2:
        print("Usage: python script.py <file_or_directory>")
        sys.exit(1)
        
    path = sys.argv[1] 
    file_name = path
    if os.path.isfile(path):
        if path.endswith(".json"):
            fill_line_chart(path)
        else:
            print("The specified file is not a JSON file.")
    elif os.path.isdir(path):
        json_files = read_json_files(path)
        plot_json_files(json_files)
    else:
        print("The specified path is not a valid file or directory.")
