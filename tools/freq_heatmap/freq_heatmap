#!/bin/python3
import sys
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns 
from print_dict import pd

def read_freq_mapping(file_path):
    core_freqs = []
    uncore_freqs = []
    entry_and_values = {}
    with open(file_path, 'r') as file:
        for line in file:
            parts = line.strip().split()
            core_freq = int(parts[2]) / 10**9
            uncore_freq = int(parts[4]) / 10**9

            if core_freq not in core_freqs:
                core_freqs.append(core_freq)
            if uncore_freq not in uncore_freqs:
                uncore_freqs.append(uncore_freq)

            entry = str(core_freq) +"-"+str(uncore_freq)
            entry_and_values[entry] = 0
    return core_freqs, uncore_freqs, entry_and_values

def fill_entry_values(entry_and_values,key="duration"):
    pass
    ## read all enriched json files
    ## fill entry_and_values based on the read order and key
    ## return the list

def generate_heatmap(core_freqs, uncore_freqs,entry_and_values,search_key):
    core_freqs = np.array(core_freqs)
    uncore_freqs = np.array(uncore_freqs)
    
    # heatmap_values = np.random.rand(len(core_freqs), len(uncore_freqs))  # replace with your actual values

    # Initialize an empty 2D array for heatmap values
    heatmap_values = np.zeros((len(core_freqs), len(uncore_freqs)))
    
    # Populate heatmap values from the dictionary
    for key, value in entry_and_values.items():
        core, uncore = map(float, key.split('-'))
        core_index = np.where(core_freqs == core)[0][0]
        uncore_index = np.where(uncore_freqs == uncore)[0][0]
        heatmap_values[core_index, uncore_index] = value 
    
    plt.figure(figsize=(10, 8))
    sns.heatmap(heatmap_values, xticklabels=uncore_freqs, yticklabels=core_freqs, cmap="RdYlGn")
    plt.xlabel('Uncore Frequency(GHz)')
    plt.ylabel('Core Frequency(GHz)')
    plt.title('Heatmap of Core vs Uncore Frequencies with "'+ search_key+"\"")
    plt.show()

if __name__ == "__main__":

    search_key = "kdp"
    if len(sys.argv) > 1:
        search_key = sys.argv[1]
    
    print("search_key:",search_key)
    file_path = 'freq_mapping.txt'
    core_freqs, uncore_freqs, entry_and_values = read_freq_mapping(file_path)
    fill_entry_values(entry_and_values)
    print("core frequencies :", core_freqs)
    print("uncore frequencies :", uncore_freqs)
    pd(entry_and_values,search_key)
    generate_heatmap(core_freqs, uncore_freqs,entry_and_values,search_key)
