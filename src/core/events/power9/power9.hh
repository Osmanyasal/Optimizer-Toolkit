#include <cstdint>

namespace optkit::ibm{
	enum class power9 : uint64_t {
		PM_1FLOP_CMPL = 0x0000045050, // one flop (fadd
		PM_1PLUS_PPC_CMPL = 0x00000100F2, // 1 or more ppc insts finished
		PM_1PLUS_PPC_DISP = 0x00000400F2, // Cycles at least one Instr Dispatched
		PM_2FLOP_CMPL = 0x000004D052, // DP vector version of fmul
		PM_4FLOP_CMPL = 0x0000045052, // 4 FLOP instruction completed
		PM_8FLOP_CMPL = 0x000004D054, // 8 FLOP instruction completed
		PM_ANY_THRD_RUN_CYC = 0x00000100FA, // Cycles in which at least one thread has the run latch set
		PM_BACK_BR_CMPL = 0x000002505E, // Branch instruction completed with a target address less than current instruction address
		PM_BANK_CONFLICT = 0x0000004880, // Read blocked due to interleave conflict.
		PM_BFU_BUSY = 0x000003005C, // Cycles in which all 4 Binary Floating Point units are busy.
		PM_BR_2PATH = 0x0000020036, // Branches that are not strongly biased
		PM_BR_CMPL = 0x000004D05E, // Any Branch instruction completed
		PM_BR_CORECT_PRED_TAKEN_CMPL = 0x000000489C, // Conditional Branch Completed in which the HW correctly predicted the direction as taken.
		PM_BR_MPRED_CCACHE = 0x00000040AC, // Conditional Branch Completed that was Mispredicted due to the Count Cache Target Prediction
		PM_BR_MPRED_CMPL = 0x00000400F6, // Number of Branch Mispredicts
		PM_BR_MPRED_LSTACK = 0x00000048AC, // Conditional Branch Completed that was Mispredicted due to the Link Stack Target Prediction
		PM_BR_MPRED_PCACHE = 0x00000048B0, // Conditional Branch Completed that was Mispredicted due to pattern cache prediction
		PM_BR_MPRED_TAKEN_CR = 0x00000040B8, // A Conditional Branch that resolved to taken was mispredicted as not taken (due to the BHT Direction Prediction).
		PM_BR_MPRED_TAKEN_TA = 0x00000048B8, // Conditional Branch Completed that was Mispredicted due to the Target Address Prediction from the Count Cache or Link Stack.
		PM_BR_PRED_CCACHE = 0x00000040A4, // Conditional Branch Completed that used the Count Cache for Target Prediction
		PM_BR_PRED_LSTACK = 0x00000040A8, // Conditional Branch Completed that used the Link Stack for Target Prediction
		PM_BR_PRED_PCACHE = 0x00000048A0, // Conditional branch completed that used pattern cache prediction
		PM_BR_PRED_TAKEN_CR = 0x00000040B0, // Conditional Branch that had its direction predicted.
		PM_BR_PRED_TA = 0x00000040B4, // Conditional Branch Completed that had its target address predicted.
		PM_BR_PRED = 0x000000409C, // Conditional Branch Executed in which the HW predicted the Direction or Target.
		PM_BR_TAKEN_CMPL = 0x00000200FA, // New event for Branch Taken
		PM_BRU_FIN = 0x0000010068, // Branch Instruction Finished
		PM_BR_UNCOND = 0x00000040A0, // Unconditional Branch Completed.
		PM_BTAC_BAD_RESULT = 0x00000050B0, // BTAC thinks branch will be taken but it is either predicted not-taken by the BHT
		PM_BTAC_GOOD_RESULT = 0x00000058B0, // BTAC predicts a taken branch and the BHT agrees
		PM_CHIP_PUMP_CPRED = 0x0000010050, // correct) for all data types excluding data prefetch (demand load
		PM_CLB_HELD = 0x000000208C, // CLB (control logic block - indicates quadword fetch block) Hold: Any Reason
		PM_CMPLU_STALL_ANY_SYNC = 0x000001E05A, // Cycles in which the NTC sync instruction (isync
		PM_CMPLU_STALL_BRU = 0x000004D018, // Completion stall due to a Branch Unit
		PM_CMPLU_STALL_CRYPTO = 0x000004C01E, // Finish stall because the NTF instruction was routed to the crypto execution pipe and was waiting to finish
		PM_CMPLU_STALL_DCACHE_MISS = 0x000002C012, // Finish stall because the NTF instruction was a load that missed the L1 and was waiting for the data to return from the nest
		PM_CMPLU_STALL_DFLONG = 0x000001005A, // Finish stall because the NTF instruction was a multi-cycle instruction issued to the Decimal Floating Point execution pipe and waiting to finish.
		PM_CMPLU_STALL_DFU = 0x000002D012, // Finish stall because the NTF instruction was issued to the Decimal Floating Point execution pipe and waiting to finish.
		PM_CMPLU_STALL_DMISS_L21_L31 = 0x000002C018, // Completion stall by Dcache miss which resolved on chip (excluding local L2/L3)
		PM_CMPLU_STALL_DMISS_L2L3_CONFLICT = 0x000004C016, // Completion stall due to cache miss that resolves in the L2 or L3 with a conflict
		PM_CMPLU_STALL_DMISS_L2L3 = 0x000001003C, // Completion stall by Dcache miss which resolved in L2/L3
		PM_CMPLU_STALL_DMISS_L3MISS = 0x000004C01A, // Completion stall due to cache miss resolving missed the L3
		PM_CMPLU_STALL_DMISS_LMEM = 0x0000030038, // Completion stall due to cache miss that resolves in local memory
		PM_CMPLU_STALL_DMISS_REMOTE = 0x000002C01C, // Completion stall by Dcache miss which resolved from remote chip (cache or memory)
		PM_CMPLU_STALL_DPLONG = 0x000003405C, // Finish stall because the NTF instruction was a scalar multi-cycle instruction issued to the Double Precision execution pipe and waiting to finish.
		PM_CMPLU_STALL_DP = 0x000001005C, // Finish stall because the NTF instruction was a scalar instruction issued to the Double Precision execution pipe and waiting to finish.
		PM_CMPLU_STALL_EIEIO = 0x000004D01A, // Finish stall because the NTF instruction is an EIEIO waiting for response from L2
		PM_CMPLU_STALL_EMQ_FULL = 0x0000030004, // Finish stall because the next to finish instruction suffered an ERAT miss and the EMQ was full
		PM_CMPLU_STALL_ERAT_MISS = 0x000004C012, // Finish stall because the NTF instruction was a load or store that suffered a translation miss
		PM_CMPLU_STALL_EXCEPTION = 0x000003003A, // Cycles in which the NTC instruction is not allowed to complete because it was interrupted by ANY exception
		PM_CMPLU_STALL_EXEC_UNIT = 0x000002D018, // Completion stall due to execution units (FXU/VSU/CRU)
		PM_CMPLU_STALL_FLUSH_ANY_THREAD = 0x000001E056, // Cycles in which the NTC instruction is not allowed to complete because any of the 4 threads in the same core suffered a flush
		PM_CMPLU_STALL_FXLONG = 0x000004D016, // Completion stall due to a long latency scalar fixed point instruction (division
		PM_CMPLU_STALL_FXU = 0x000002D016, // Finish stall due to a scalar fixed point or CR instruction in the execution pipeline.
		PM_CMPLU_STALL_HWSYNC = 0x0000030036, // completion stall due to hwsync
		PM_CMPLU_STALL_LARX = 0x000001002A, // Finish stall because the NTF instruction was a larx waiting to be satisfied
		PM_CMPLU_STALL_LHS = 0x000002C01A, // Finish stall because the NTF instruction was a load that hit on an older store and it was waiting for store data
		PM_CMPLU_STALL_LMQ_FULL = 0x000004C014, // Finish stall because the NTF instruction was a load that missed in the L1 and the LMQ was unable to accept this load miss request because it was full
		PM_CMPLU_STALL_LOAD_FINISH = 0x000004D014, // Finish stall because the NTF instruction was a load instruction with all its dependencies satisfied just going through the LSU pipe to finish
		PM_CMPLU_STALL_LRQ_FULL = 0x000002D014, // Finish stall because the NTF instruction was a load that was held in LSAQ (load-store address queue) because the LRQ (load-reorder queue) was full
		PM_CMPLU_STALL_LRQ_OTHER = 0x0000010004, // Finish stall due to LRQ miscellaneous reasons
		PM_CMPLU_STALL_LSAQ_ARB = 0x000004E016, // Finish stall because the NTF instruction was a load or store that was held in LSAQ because an older instruction from SRQ or LRQ won arbitration to the LSU pipe when this instruction tried to launch
		PM_CMPLU_STALL_LSU_FIN = 0x000001003A, // Finish stall because the NTF instruction was an LSU op (other than a load or a store) with all its dependencies met and just going through the LSU pipe to finish
		PM_CMPLU_STALL_LSU_FLUSH_NEXT = 0x000002E01A, // Completion stall of one cycle because the LSU requested to flush the next iop in the sequence.
		PM_CMPLU_STALL_LSU_MFSPR = 0x0000034056, // Finish stall because the NTF instruction was a mfspr instruction targeting an LSU SPR and it was waiting for the register data to be returned
		PM_CMPLU_STALL_LSU = 0x000002C010, // Completion stall by LSU instruction
		PM_CMPLU_STALL_LWSYNC = 0x0000010036, // completion stall due to lwsync
		PM_CMPLU_STALL_MTFPSCR = 0x000004E012, // Completion stall because the ISU is updating the register and notifying the Effective Address Table (EAT)
		PM_CMPLU_STALL_NESTED_TBEGIN = 0x000001E05C, // Completion stall because the ISU is updating the TEXASR to keep track of the nested tbegin.
		PM_CMPLU_STALL_NESTED_TEND = 0x000003003C, // Completion stall because the ISU is updating the TEXASR to keep track of the nested tend and decrement the TEXASR nested level.
		PM_CMPLU_STALL_NTC_DISP_FIN = 0x000004E018, // Finish stall because the NTF instruction was one that must finish at dispatch.
		PM_CMPLU_STALL_NTC_FLUSH = 0x000002E01E, // Completion stall due to ntc flush
		PM_CMPLU_STALL_OTHER_CMPL = 0x0000030006, // Instructions the core completed while this tread was stalled
		PM_CMPLU_STALL_PASTE = 0x000002C016, // Finish stall because the NTF instruction was a paste waiting for response from L2
		PM_CMPLU_STALL_PM = 0x000003000A, // Finish stall because the NTF instruction was issued to the Permute execution pipe and waiting to finish.
		PM_CMPLU_STALL_SLB = 0x000001E052, // Finish stall because the NTF instruction was awaiting L2 response for an SLB
		PM_CMPLU_STALL_SPEC_FINISH = 0x0000030028, // Finish stall while waiting for the non-speculative finish of either a stcx waiting for its result or a load waiting for non-critical sectors of data and ECC
		PM_CMPLU_STALL_SRQ_FULL = 0x0000030016, // Finish stall because the NTF instruction was a store that was held in LSAQ because the SRQ was full
		PM_CMPLU_STALL_STCX = 0x000002D01C, // Finish stall because the NTF instruction was a stcx waiting for response from L2
		PM_CMPLU_STALL_ST_FWD = 0x000004C01C, // Completion stall due to store forward
		PM_CMPLU_STALL_STORE_DATA = 0x0000030026, // Finish stall because the next to finish instruction was a store waiting on data
		PM_CMPLU_STALL_STORE_FIN_ARB = 0x0000030014, // Finish stall because the NTF instruction was a store waiting for a slot in the store finish pipe.
		PM_CMPLU_STALL_STORE_FINISH = 0x000002C014, // Finish stall because the NTF instruction was a store with all its dependencies met
		PM_CMPLU_STALL_STORE_PIPE_ARB = 0x000004C010, // Finish stall because the NTF instruction was a store waiting for the next relaunch opportunity after an internal reject.
		PM_CMPLU_STALL_SYNC_PMU_INT = 0x000002C01E, // Cycles in which the NTC instruction is waiting for a synchronous PMU interrupt
		PM_CMPLU_STALL_TEND = 0x000001E050, // Finish stall because the NTF instruction was a tend instruction awaiting response from L2
		PM_CMPLU_STALL_THRD = 0x000001001C, // Completion Stalled because the thread was blocked
		PM_CMPLU_STALL_TLBIE = 0x000002E01C, // Finish stall because the NTF instruction was a tlbie waiting for response from L2
		PM_CMPLU_STALL = 0x000001E054, // Nothing completed and ICT not empty
		PM_CMPLU_STALL_VDPLONG = 0x000003C05A, // Finish stall because the NTF instruction was a scalar multi-cycle instruction issued to the Double Precision execution pipe and waiting to finish.
		PM_CMPLU_STALL_VDP = 0x000004405C, // Finish stall because the NTF instruction was a vector instruction issued to the Double Precision execution pipe and waiting to finish.
		PM_CMPLU_STALL_VFXLONG = 0x000002E018, // Completion stall due to a long latency vector fixed point instruction (division
		PM_CMPLU_STALL_VFXU = 0x000003C05C, // Finish stall due to a vector fixed point instruction in the execution pipeline.
		PM_CO0_BUSY = 0x000003608C, // CO mach 0 Busy.
		PM_CO0_BUSY_ALT = 0x000004608C, // CO mach 0 Busy.
		PM_CO_DISP_FAIL = 0x0000016886, // CO dispatch failed due to all CO machines being busy
		PM_CO_TM_SC_FOOTPRINT = 0x0000026086, // L2 did a cleanifdirty CO to the L3 (ie created an SC line in the L3) OR L2 TM_store hit dirty HPC line and L3 indicated SC line formed in L3 on RDR bus
		PM_CO_USAGE = 0x000002688C, // Continuous 16 cycle (2to1) window where this signals rotates thru sampling each CO machine busy.
		PM_CYC = 0x000001001E, // Processor cycles
		PM_DARQ0_0_3_ENTRIES = 0x000004D04A, // Cycles in which 3 or less DARQ entries (out of 12) are in use
		PM_DARQ0_10_12_ENTRIES = 0x000001D058, // Cycles in which 10 or more DARQ entries (out of 12) are in use
		PM_DARQ0_4_6_ENTRIES = 0x000003504E, // Cycles in which 4
		PM_DARQ0_7_9_ENTRIES = 0x000002E050, // Cycles in which 7
		PM_DARQ1_0_3_ENTRIES = 0x000004C122, // Cycles in which 3 or fewer DARQ1 entries (out of 12) are in use
		PM_DARQ1_10_12_ENTRIES = 0x0000020058, // Cycles in which 10 or more DARQ1 entries (out of 12) are in use
		PM_DARQ1_4_6_ENTRIES = 0x000003E050, // Cycles in which 4
		PM_DARQ1_7_9_ENTRIES = 0x000002005A, // Cycles in which 7 to 9 DARQ1 entries (out of 12) are in use
		PM_DARQ_STORE_REJECT = 0x000004405E, // The DARQ attempted to transmit a store into an LSAQ or SRQ entry but It was rejected.
		PM_DARQ_STORE_XMIT = 0x0000030064, // The DARQ attempted to transmit a store into an LSAQ or SRQ entry.
		PM_DATA_CHIP_PUMP_CPRED = 0x000001C050, // correct) for a demand load
		PM_DATA_FROM_DL2L3_MOD = 0x000004C048, // The processor's data cache was reloaded with Modified (M) data from another chip's L2 or L3 on a different Node or Group (Distant)
		PM_DATA_FROM_DL2L3_SHR = 0x000003C048, // The processor's data cache was reloaded with Shared (S) data from another chip's L2 or L3 on a different Node or Group (Distant)
		PM_DATA_FROM_DL4 = 0x000003C04C, // The processor's data cache was reloaded from another chip's L4 on a different Node or Group (Distant) due to a demand load
		PM_DATA_FROM_DMEM = 0x000004C04C, // The processor's data cache was reloaded from another chip's memory on the same Node or Group (Distant) due to a demand load
		PM_DATA_FROM_L21_MOD = 0x000004C046, // The processor's data cache was reloaded with Modified (M) data from another core's L2 on the same chip due to a demand load
		PM_DATA_FROM_L21_SHR = 0x000003C046, // The processor's data cache was reloaded with Shared (S) data from another core's L2 on the same chip due to a demand load
		PM_DATA_FROM_L2_DISP_CONFLICT_LDHITST = 0x000003C040, // The processor's data cache was reloaded from local core's L2 with load hit store conflict due to a demand load
		PM_DATA_FROM_L2_DISP_CONFLICT_OTHER = 0x000004C040, // The processor's data cache was reloaded from local core's L2 with dispatch conflict due to a demand load
		PM_DATA_FROM_L2_MEPF = 0x000002C040, // The processor's data cache was reloaded from local core's L2 hit without dispatch conflicts on Mepf state due to a demand load
		PM_DATA_FROM_L2MISS_MOD = 0x000001C04E, // The processor's data cache was reloaded from a location other than the local core's L2 due to a demand load
		PM_DATA_FROM_L2MISS = 0x00000200FE, // Demand LD - L2 Miss (not L2 hit)
		PM_DATA_FROM_L2_NO_CONFLICT = 0x000001C040, // The processor's data cache was reloaded from local core's L2 without conflict due to a demand load
		PM_DATA_FROM_L2 = 0x000001C042, // The processor's data cache was reloaded from local core's L2 due to a demand load
		PM_DATA_FROM_L31_ECO_MOD = 0x000004C044, // The processor's data cache was reloaded with Modified (M) data from another core's ECO L3 on the same chip due to a demand load
		PM_DATA_FROM_L31_ECO_SHR = 0x000003C044, // The processor's data cache was reloaded with Shared (S) data from another core's ECO L3 on the same chip due to a demand load
		PM_DATA_FROM_L31_MOD = 0x000002C044, // The processor's data cache was reloaded with Modified (M) data from another core's L3 on the same chip due to a demand load
		PM_DATA_FROM_L31_SHR = 0x000001C046, // The processor's data cache was reloaded with Shared (S) data from another core's L3 on the same chip due to a demand load
		PM_DATA_FROM_L3_DISP_CONFLICT = 0x000003C042, // The processor's data cache was reloaded from local core's L3 with dispatch conflict due to a demand load
		PM_DATA_FROM_L3_MEPF = 0x000002C042, // The processor's data cache was reloaded from local core's L3 without dispatch conflicts hit on Mepf state due to a demand load
		PM_DATA_FROM_L3MISS_MOD = 0x000004C04E, // The processor's data cache was reloaded from a location other than the local core's L3 due to a demand load
		PM_DATA_FROM_L3MISS = 0x00000300FE, // Demand LD - L3 Miss (not L2 hit and not L3 hit)
		PM_DATA_FROM_L3_NO_CONFLICT = 0x000001C044, // The processor's data cache was reloaded from local core's L3 without conflict due to a demand load
		PM_DATA_FROM_L3 = 0x000004C042, // The processor's data cache was reloaded from local core's L3 due to a demand load
		PM_DATA_FROM_LL4 = 0x000001C04C, // The processor's data cache was reloaded from the local chip's L4 cache due to a demand load
		PM_DATA_FROM_LMEM = 0x000002C048, // The processor's data cache was reloaded from the local chip's Memory due to a demand load
		PM_DATA_FROM_MEMORY = 0x00000400FE, // The processor's data cache was reloaded from a memory location including L4 from local remote or distant due to a demand load
		PM_DATA_FROM_OFF_CHIP_CACHE = 0x000004C04A, // The processor's data cache was reloaded either shared or modified data from another core's L2/L3 on a different chip (remote or distant) due to a demand load
		PM_DATA_FROM_ON_CHIP_CACHE = 0x000001C048, // The processor's data cache was reloaded either shared or modified data from another core's L2/L3 on the same chip due to a demand load
		PM_DATA_FROM_RL2L3_MOD = 0x000002C046, // The processor's data cache was reloaded with Modified (M) data from another chip's L2 or L3 on the same Node or Group (Remote)
		PM_DATA_FROM_RL2L3_SHR = 0x000001C04A, // The processor's data cache was reloaded with Shared (S) data from another chip's L2 or L3 on the same Node or Group (Remote)
		PM_DATA_FROM_RL4 = 0x000002C04A, // The processor's data cache was reloaded from another chip's L4 on the same Node or Group (Remote) due to a demand load
		PM_DATA_FROM_RMEM = 0x000003C04A, // The processor's data cache was reloaded from another chip's memory on the same Node or Group (Remote) due to a demand load
		PM_DATA_GRP_PUMP_CPRED = 0x000002C050, // correct) for a demand load
		PM_DATA_GRP_PUMP_MPRED_RTY = 0x000001C052, // Final Pump Scope (Group) ended up larger than Initial Pump Scope (Chip) for a demand load
		PM_DATA_GRP_PUMP_MPRED = 0x000002C052, // Final Pump Scope (Group) ended up either larger or smaller than Initial Pump Scope for a demand load
		PM_DATA_PUMP_CPRED = 0x000001C054, // Pump prediction correct.
		PM_DATA_PUMP_MPRED = 0x000004C052, // Pump misprediction.
		PM_DATA_STORE = 0x000000F0A0, // All ops that drain from s2q to L2 containing data
		PM_DATA_SYS_PUMP_CPRED = 0x000003C050, // correct) for a demand load
		PM_DATA_SYS_PUMP_MPRED_RTY = 0x000004C050, // Final Pump Scope (system) ended up larger than Initial Pump Scope (Chip/Group) for a demand load
		PM_DATA_SYS_PUMP_MPRED = 0x000003C052, // Final Pump Scope (system) mispredicted.
		PM_DATA_TABLEWALK_CYC = 0x000003001A, // Data Tablewalk Cycles.
		PM_DC_DEALLOC_NO_CONF = 0x000000F8AC, // A demand load referenced a line in an active fuzzy prefetch stream.
		PM_DC_PREF_CONF = 0x000000F0A8, // A demand load referenced a line in an active prefetch stream.
		PM_DC_PREF_CONS_ALLOC = 0x000000F0B4, // Prefetch stream allocated in the conservative phase by either the hardware prefetch mechanism or software prefetch
		PM_DC_PREF_FUZZY_CONF = 0x000000F8A8, // A demand load referenced a line in an active fuzzy prefetch stream.
		PM_DC_PREF_HW_ALLOC = 0x000000F0A4, // Prefetch stream allocated by the hardware prefetch mechanism
		PM_DC_PREF_STRIDED_CONF = 0x000000F0AC, // A demand load referenced a line in an active strided prefetch stream.
		PM_DC_PREF_SW_ALLOC = 0x000000F8A4, // Prefetch stream allocated by software prefetching
		PM_DC_PREF_XCONS_ALLOC = 0x000000F8B4, // Prefetch stream allocated in the Ultra conservative phase by either the hardware prefetch mechanism or software prefetch
		PM_DECODE_FUSION_CONST_GEN = 0x00000048B4, // 32-bit constant generation
		PM_DECODE_FUSION_EXT_ADD = 0x0000005084, // 32-bit extended addition
		PM_DECODE_FUSION_LD_ST_DISP = 0x00000048A8, // 32-bit displacement D-form and 16-bit displacement X-form
		PM_DECODE_FUSION_OP_PRESERV = 0x0000005088, // Destructive op operand preservation
		PM_DECODE_HOLD_ICT_FULL = 0x00000058A8, // Counts the number of cycles in which the IFU was not able to decode and transmit one or more instructions because all itags were in use.
		PM_DECODE_LANES_NOT_AVAIL = 0x0000005884, // Decode has something to transmit but dispatch lanes are not available
		PM_DERAT_MISS_16G = 0x000004C054, // Data ERAT Miss (Data TLB Access) page size 16G
		PM_DERAT_MISS_16M = 0x000003C054, // Data ERAT Miss (Data TLB Access) page size 16M
		PM_DERAT_MISS_1G = 0x000002C05A, // Data ERAT Miss (Data TLB Access) page size 1G.
		PM_DERAT_MISS_2M = 0x000001C05A, // Data ERAT Miss (Data TLB Access) page size 2M.
		PM_DERAT_MISS_4K = 0x000001C056, // Data ERAT Miss (Data TLB Access) page size 4K
		PM_DERAT_MISS_64K = 0x000002C054, // Data ERAT Miss (Data TLB Access) page size 64K
		PM_DFU_BUSY = 0x000004D04C, // Cycles in which all 4 Decimal Floating Point units are busy.
		PM_DISP_CLB_HELD_BAL = 0x000000288C, // Dispatch/CLB Hold: Balance Flush
		PM_DISP_CLB_HELD_SB = 0x0000002090, // Dispatch/CLB Hold: Scoreboard
		PM_DISP_CLB_HELD_TLBIE = 0x0000002890, // Dispatch Hold: Due to TLBIE
		PM_DISP_HELD_HB_FULL = 0x000003D05C, // Dispatch held due to History Buffer full.
		PM_DISP_HELD_ISSQ_FULL = 0x0000020006, // Dispatch held due to Issue q full.
		PM_DISP_HELD_SYNC_HOLD = 0x000004003C, // Cycles in which dispatch is held because of a synchronizing instruction in the pipeline
		PM_DISP_HELD_TBEGIN = 0x00000028B0, // This outer tbegin transaction cannot be dispatched until the previous tend instruction completes
		PM_DISP_HELD = 0x0000010006, // Dispatch Held
		PM_DISP_STARVED = 0x0000030008, // Dispatched Starved
		PM_DP_QP_FLOP_CMPL = 0x000004D05C, // Double-Precion or Quad-Precision instruction completed
		PM_DPTEG_FROM_DL2L3_MOD = 0x000004E048, // A Page Table Entry was loaded into the TLB with Modified (M) data from another chip's L2 or L3 on a different Node or Group (Distant)
		PM_DPTEG_FROM_DL2L3_SHR = 0x000003E048, // A Page Table Entry was loaded into the TLB with Shared (S) data from another chip's L2 or L3 on a different Node or Group (Distant)
		PM_DPTEG_FROM_DL4 = 0x000003E04C, // A Page Table Entry was loaded into the TLB from another chip's L4 on a different Node or Group (Distant) due to a data side request.
		PM_DPTEG_FROM_DMEM = 0x000004E04C, // A Page Table Entry was loaded into the TLB from another chip's memory on the same Node or Group (Distant) due to a data side request.
		PM_DPTEG_FROM_L21_MOD = 0x000004E046, // A Page Table Entry was loaded into the TLB with Modified (M) data from another core's L2 on the same chip due to a data side request.
		PM_DPTEG_FROM_L21_SHR = 0x000003E046, // A Page Table Entry was loaded into the TLB with Shared (S) data from another core's L2 on the same chip due to a data side request.
		PM_DPTEG_FROM_L2_MEPF = 0x000002E040, // A Page Table Entry was loaded into the TLB from local core's L2 hit without dispatch conflicts on Mepf state.
		PM_DPTEG_FROM_L2MISS = 0x000001E04E, // A Page Table Entry was loaded into the TLB from a location other than the local core's L2 due to a data side request.
		PM_DPTEG_FROM_L2_NO_CONFLICT = 0x000001E040, // A Page Table Entry was loaded into the TLB from local core's L2 without conflict due to a data side request.
		PM_DPTEG_FROM_L2 = 0x000001E042, // A Page Table Entry was loaded into the TLB from local core's L2 due to a data side request.
		PM_DPTEG_FROM_L31_ECO_MOD = 0x000004E044, // A Page Table Entry was loaded into the TLB with Modified (M) data from another core's ECO L3 on the same chip due to a data side request.
		PM_DPTEG_FROM_L31_ECO_SHR = 0x000003E044, // A Page Table Entry was loaded into the TLB with Shared (S) data from another core's ECO L3 on the same chip due to a data side request.
		PM_DPTEG_FROM_L31_MOD = 0x000002E044, // A Page Table Entry was loaded into the TLB with Modified (M) data from another core's L3 on the same chip due to a data side request.
		PM_DPTEG_FROM_L31_SHR = 0x000001E046, // A Page Table Entry was loaded into the TLB with Shared (S) data from another core's L3 on the same chip due to a data side request.
		PM_DPTEG_FROM_L3_DISP_CONFLICT = 0x000003E042, // A Page Table Entry was loaded into the TLB from local core's L3 with dispatch conflict due to a data side request.
		PM_DPTEG_FROM_L3_MEPF = 0x000002E042, // A Page Table Entry was loaded into the TLB from local core's L3 without dispatch conflicts hit on Mepf state.
		PM_DPTEG_FROM_L3MISS = 0x000004E04E, // A Page Table Entry was loaded into the TLB from a location other than the local core's L3 due to a data side request.
		PM_DPTEG_FROM_L3_NO_CONFLICT = 0x000001E044, // A Page Table Entry was loaded into the TLB from local core's L3 without conflict due to a data side request.
		PM_DPTEG_FROM_L3 = 0x000004E042, // A Page Table Entry was loaded into the TLB from local core's L3 due to a data side request.
		PM_DPTEG_FROM_LL4 = 0x000001E04C, // A Page Table Entry was loaded into the TLB from the local chip's L4 cache due to a data side request.
		PM_DPTEG_FROM_LMEM = 0x000002E048, // A Page Table Entry was loaded into the TLB from the local chip's Memory due to a data side request.
		PM_DPTEG_FROM_MEMORY = 0x000002E04C, // A Page Table Entry was loaded into the TLB from a memory location including L4 from local remote or distant due to a data side request.
		PM_DPTEG_FROM_OFF_CHIP_CACHE = 0x000004E04A, // A Page Table Entry was loaded into the TLB either shared or modified data from another core's L2/L3 on a different chip (remote or distant) due to a data side request.
		PM_DPTEG_FROM_ON_CHIP_CACHE = 0x000001E048, // A Page Table Entry was loaded into the TLB either shared or modified data from another core's L2/L3 on the same chip due to a data side request.
		PM_DPTEG_FROM_RL2L3_MOD = 0x000002E046, // A Page Table Entry was loaded into the TLB with Modified (M) data from another chip's L2 or L3 on the same Node or Group (Remote)
		PM_DPTEG_FROM_RL2L3_SHR = 0x000001E04A, // A Page Table Entry was loaded into the TLB with Shared (S) data from another chip's L2 or L3 on the same Node or Group (Remote)
		PM_DPTEG_FROM_RL4 = 0x000002E04A, // A Page Table Entry was loaded into the TLB from another chip's L4 on the same Node or Group (Remote) due to a data side request.
		PM_DPTEG_FROM_RMEM = 0x000003E04A, // A Page Table Entry was loaded into the TLB from another chip's memory on the same Node or Group (Remote) due to a data side request.
		PM_DSIDE_L2MEMACC = 0x0000036092, // Valid when first beat of data comes in for an D-side fetch where data came EXCLUSIVELY from memory (excluding hpcread64 accesses)
		PM_DSIDE_MRU_TOUCH = 0x0000026884, // D-side L2 MRU touch sent to L2
		PM_DSIDE_OTHER_64B_L2MEMACC = 0x0000036892, // Valid when first beat of data comes in for an D-side fetch where data came EXCLUSIVELY from memory that was for hpc_read64
		PM_DSLB_MISS = 0x000000D0A8, // Data SLB Miss - Total of all segment sizes
		PM_DSLB_MISS_ALT = 0x0000010016, // tid
		PM_DTLB_MISS_16G = 0x000001C058, // Data TLB Miss page size 16G
		PM_DTLB_MISS_16M = 0x000004C056, // Data TLB Miss page size 16M
		PM_DTLB_MISS_1G = 0x000004C05A, // Data TLB reload (after a miss) page size 1G.
		PM_DTLB_MISS_2M = 0x000001C05C, // Data TLB reload (after a miss) page size 2M.
		PM_DTLB_MISS_4K = 0x000002C056, // Data TLB Miss page size 4k
		PM_DTLB_MISS_64K = 0x000003C056, // Data TLB Miss page size 64K
		PM_DTLB_MISS = 0x00000300FC, // Data PTEG reload
		PM_SPACEHOLDER_0000040062 = 0x0000040062, // SPACE_HOLDER for event 0000040062
		PM_SPACEHOLDER_0000040064 = 0x0000040064, // SPACE_HOLDER for event 0000040064
		PM_EAT_FORCE_MISPRED = 0x00000050A8, // XL-form branch was mispredicted due to the predicted target address missing from EAT.
		PM_EAT_FULL_CYC = 0x0000004084, // Cycles No room in EAT
		PM_EE_OFF_EXT_INT = 0x0000002080, // CyclesMSR[EE] is off and external interrupts are active
		PM_EXT_INT = 0x00000200F8, // external interrupt
		PM_FLOP_CMPL = 0x000004505E, // Floating Point Operation Finished
		PM_FLUSH_COMPLETION = 0x0000030012, // The instruction that was next to complete did not complete because it suffered a flush
		PM_FLUSH_DISP_SB = 0x0000002088, // Dispatch Flush: Scoreboard
		PM_FLUSH_DISP_TLBIE = 0x0000002888, // Dispatch Flush: TLBIE
		PM_FLUSH_DISP = 0x0000002880, // Dispatch flush
		PM_FLUSH_HB_RESTORE_CYC = 0x0000002084, // Cycles in which no new instructions can be dispatched to the ICT after a flush.
		PM_FLUSH_LSU = 0x00000058A4, // LSU flushes.
		PM_FLUSH_MPRED = 0x00000050A4, // Branch mispredict flushes.
		PM_FLUSH = 0x00000400F8, // Flush (any type)
		PM_FMA_CMPL = 0x0000045054, // two flops operation completed (fmadd
		PM_FORCED_NOP = 0x000000509C, // Instruction was forced to execute as a nop because it was found to behave like a nop (have no effect) at decode time
		PM_FREQ_DOWN = 0x000003000C, // Power Management: Below Threshold B
		PM_FREQ_UP = 0x000004000C, // Power Management: Above Threshold A
		PM_FXU_1PLUS_BUSY = 0x000003000E, // At least one of the 4 FXU units is busy
		PM_FXU_BUSY = 0x000002000E, // Cycles in which all 4 FXUs are busy.
		PM_FXU_FIN = 0x0000040004, // The fixed point unit Unit finished an instruction.
		PM_FXU_IDLE = 0x0000024052, // Cycles in which FXU0
		PM_GRP_PUMP_CPRED = 0x0000020050, // Initial and Final Pump Scope and data sourced across this scope was group pump for all data types excluding data prefetch (demand load
		PM_GRP_PUMP_MPRED_RTY = 0x0000010052, // Final Pump Scope (Group) ended up larger than Initial Pump Scope (Chip) for all data types excluding data prefetch (demand load
		PM_GRP_PUMP_MPRED = 0x0000020052, // Final Pump Scope (Group) ended up either larger or smaller than Initial Pump Scope for all data types excluding data prefetch (demand load
		PM_HV_CYC = 0x000002000A, // Cycles in which msr_hv is high.
		PM_HWSYNC = 0x00000050A0, // Hwsync instruction decoded and transferred
		PM_IBUF_FULL_CYC = 0x0000004884, // Cycles No room in ibuff
		PM_IC_DEMAND_CYC = 0x0000010018, // Final Pump Scope (Group) ended up larger than Initial Pump Scope (Chip) for a demand load
		PM_IC_DEMAND_L2_BHT_REDIRECT = 0x0000004098, // L2 I cache demand request due to BHT redirect
		PM_IC_DEMAND_L2_BR_REDIRECT = 0x0000004898, // L2 I cache demand request due to branch Mispredict (15 cycle path)
		PM_IC_DEMAND_REQ = 0x0000004088, // Demand Instruction fetch request
		PM_IC_INVALIDATE = 0x0000005888, // Ic line invalidated
		PM_IC_MISS_CMPL = 0x0000045058, // Non-speculative icache miss
		PM_IC_MISS_ICBI = 0x0000005094, // threaded version
		PM_IC_PREF_CANCEL_HIT = 0x0000004890, // Prefetch Canceled due to icache hit
		PM_IC_PREF_CANCEL_L2 = 0x0000004094, // L2 Squashed a demand or prefetch request
		PM_IC_PREF_CANCEL_PAGE = 0x0000004090, // Prefetch Canceled due to page boundary
		PM_IC_PREF_REQ = 0x0000004888, // Instruction prefetch requests
		PM_IC_PREF_WRITE = 0x000000488C, // Instruction prefetch written into IL1
		PM_IC_RELOAD_PRIVATE = 0x0000004894, // Reloading line was brought in private for a specific thread.
		PM_ICT_EMPTY_CYC = 0x0000020008, // Cycles in which the ICT is completely empty.
		PM_ICT_NOSLOT_BR_MPRED_ICMISS = 0x0000034058, // Ict empty for this thread due to Icache Miss and branch mispred
		PM_ICT_NOSLOT_BR_MPRED = 0x000004D01E, // Ict empty for this thread due to branch mispred
		PM_ICT_NOSLOT_CYC = 0x00000100F8, // Number of cycles the ICT has no itags assigned to this thread
		PM_ICT_NOSLOT_DISP_HELD_HB_FULL = 0x0000030018, // Ict empty for this thread due to dispatch holds because the History Buffer was full.
		PM_ICT_NOSLOT_DISP_HELD_ISSQ = 0x000002D01E, // Ict empty for this thread due to dispatch hold on this thread due to Issue q full
		PM_ICT_NOSLOT_DISP_HELD_SYNC = 0x000004D01C, // Dispatch held due to a synchronizing instruction at dispatch
		PM_ICT_NOSLOT_DISP_HELD_TBEGIN = 0x0000010064, // the NTC instruction is being held at dispatch because it is a tbegin instruction and there is an older tbegin in the pipeline that must complete before the younger tbegin can dispatch
		PM_ICT_NOSLOT_DISP_HELD = 0x000004E01A, // Cycles in which the NTC instruction is held at dispatch for any reason
		PM_ICT_NOSLOT_IC_L3MISS = 0x000004E010, // Ict empty for this thread due to icache misses that were sourced from beyond the local L3.
		PM_ICT_NOSLOT_IC_L3 = 0x000003E052, // Ict empty for this thread due to icache misses that were sourced from the local L3
		PM_ICT_NOSLOT_IC_MISS = 0x000002D01A, // Ict empty for this thread due to Icache Miss
		PM_IERAT_RELOAD_16M = 0x000004006A, // IERAT Reloaded (Miss) for a 16M page
		PM_IERAT_RELOAD_4K = 0x0000020064, // IERAT reloaded (after a miss) for 4K pages
		PM_IERAT_RELOAD_64K = 0x000003006A, // IERAT Reloaded (Miss) for a 64k page
		PM_IERAT_RELOAD = 0x00000100F6, // Number of I-ERAT reloads
		PM_IFETCH_THROTTLE = 0x000003405E, // Cycles in which Instruction fetch throttle was active.
		PM_INST_CHIP_PUMP_CPRED = 0x0000014050, // correct) for an instruction fetch
		PM_INST_CMPL = 0x0000010002, // Number of PowerPC Instructions that completed.
		PM_INST_DISP = 0x00000200F2, // # PPC Dispatched
		PM_INST_FROM_DL2L3_MOD = 0x0000044048, // The processor's Instruction cache was reloaded with Modified (M) data from another chip's L2 or L3 on a different Node or Group (Distant)
		PM_INST_FROM_DL2L3_SHR = 0x0000034048, // The processor's Instruction cache was reloaded with Shared (S) data from another chip's L2 or L3 on a different Node or Group (Distant)
		PM_INST_FROM_DL4 = 0x000003404C, // The processor's Instruction cache was reloaded from another chip's L4 on a different Node or Group (Distant) due to an instruction fetch (not prefetch)
		PM_INST_FROM_DMEM = 0x000004404C, // The processor's Instruction cache was reloaded from another chip's memory on the same Node or Group (Distant) due to an instruction fetch (not prefetch)
		PM_INST_FROM_L1 = 0x0000004080, // Instruction fetches from L1.
		PM_INST_FROM_L21_MOD = 0x0000044046, // The processor's Instruction cache was reloaded with Modified (M) data from another core's L2 on the same chip due to an instruction fetch (not prefetch)
		PM_INST_FROM_L21_SHR = 0x0000034046, // The processor's Instruction cache was reloaded with Shared (S) data from another core's L2 on the same chip due to an instruction fetch (not prefetch)
		PM_INST_FROM_L2_DISP_CONFLICT_LDHITST = 0x0000034040, // The processor's Instruction cache was reloaded from local core's L2 with load hit store conflict due to an instruction fetch (not prefetch)
		PM_INST_FROM_L2_DISP_CONFLICT_OTHER = 0x0000044040, // The processor's Instruction cache was reloaded from local core's L2 with dispatch conflict due to an instruction fetch (not prefetch)
		PM_INST_FROM_L2_MEPF = 0x0000024040, // The processor's Instruction cache was reloaded from local core's L2 hit without dispatch conflicts on Mepf state.
		PM_INST_FROM_L2MISS = 0x000001404E, // The processor's Instruction cache was reloaded from a location other than the local core's L2 due to an instruction fetch (not prefetch)
		PM_INST_FROM_L2_NO_CONFLICT = 0x0000014040, // The processor's Instruction cache was reloaded from local core's L2 without conflict due to an instruction fetch (not prefetch)
		PM_INST_FROM_L2 = 0x0000014042, // The processor's Instruction cache was reloaded from local core's L2 due to an instruction fetch (not prefetch)
		PM_INST_FROM_L31_ECO_MOD = 0x0000044044, // The processor's Instruction cache was reloaded with Modified (M) data from another core's ECO L3 on the same chip due to an instruction fetch (not prefetch)
		PM_INST_FROM_L31_ECO_SHR = 0x0000034044, // The processor's Instruction cache was reloaded with Shared (S) data from another core's ECO L3 on the same chip due to an instruction fetch (not prefetch)
		PM_INST_FROM_L31_MOD = 0x0000024044, // The processor's Instruction cache was reloaded with Modified (M) data from another core's L3 on the same chip due to an instruction fetch (not prefetch)
		PM_INST_FROM_L31_SHR = 0x0000014046, // The processor's Instruction cache was reloaded with Shared (S) data from another core's L3 on the same chip due to an instruction fetch (not prefetch)
		PM_INST_FROM_L3_DISP_CONFLICT = 0x0000034042, // The processor's Instruction cache was reloaded from local core's L3 with dispatch conflict due to an instruction fetch (not prefetch)
		PM_INST_FROM_L3_MEPF = 0x0000024042, // The processor's Instruction cache was reloaded from local core's L3 without dispatch conflicts hit on Mepf state.
		PM_INST_FROM_L3MISS_MOD = 0x000004404E, // The processor's Instruction cache was reloaded from a location other than the local core's L3 due to a instruction fetch
		PM_INST_FROM_L3MISS = 0x00000300FA, // Marked instruction was reloaded from a location beyond the local chiplet
		PM_INST_FROM_L3_NO_CONFLICT = 0x0000014044, // The processor's Instruction cache was reloaded from local core's L3 without conflict due to an instruction fetch (not prefetch)
		PM_INST_FROM_L3 = 0x0000044042, // The processor's Instruction cache was reloaded from local core's L3 due to an instruction fetch (not prefetch)
		PM_INST_FROM_LL4 = 0x000001404C, // The processor's Instruction cache was reloaded from the local chip's L4 cache due to an instruction fetch (not prefetch)
		PM_INST_FROM_LMEM = 0x0000024048, // The processor's Instruction cache was reloaded from the local chip's Memory due to an instruction fetch (not prefetch)
		PM_INST_FROM_MEMORY = 0x000002404C, // The processor's Instruction cache was reloaded from a memory location including L4 from local remote or distant due to an instruction fetch (not prefetch)
		PM_INST_FROM_OFF_CHIP_CACHE = 0x000004404A, // The processor's Instruction cache was reloaded either shared or modified data from another core's L2/L3 on a different chip (remote or distant) due to an instruction fetch (not prefetch)
		PM_INST_FROM_ON_CHIP_CACHE = 0x0000014048, // The processor's Instruction cache was reloaded either shared or modified data from another core's L2/L3 on the same chip due to an instruction fetch (not prefetch)
		PM_INST_FROM_RL2L3_MOD = 0x0000024046, // The processor's Instruction cache was reloaded with Modified (M) data from another chip's L2 or L3 on the same Node or Group (Remote)
		PM_INST_FROM_RL2L3_SHR = 0x000001404A, // The processor's Instruction cache was reloaded with Shared (S) data from another chip's L2 or L3 on the same Node or Group (Remote)
		PM_INST_FROM_RL4 = 0x000002404A, // The processor's Instruction cache was reloaded from another chip's L4 on the same Node or Group (Remote) due to an instruction fetch (not prefetch)
		PM_INST_FROM_RMEM = 0x000003404A, // The processor's Instruction cache was reloaded from another chip's memory on the same Node or Group (Remote) due to an instruction fetch (not prefetch)
		PM_INST_GRP_PUMP_CPRED = 0x000002C05C, // correct) for an instruction fetch (demand only)
		PM_INST_GRP_PUMP_MPRED_RTY = 0x0000014052, // Final Pump Scope (Group) ended up larger than Initial Pump Scope (Chip) for an instruction fetch
		PM_INST_GRP_PUMP_MPRED = 0x000002C05E, // Final Pump Scope (Group) ended up either larger or smaller than Initial Pump Scope for an instruction fetch (demand only)
		PM_INST_IMC_MATCH_CMPL = 0x000004001C, // IMC Match Count
		PM_INST_PUMP_CPRED = 0x0000014054, // Pump prediction correct.
		PM_INST_PUMP_MPRED = 0x0000044052, // Pump misprediction.
		PM_INST_SYS_PUMP_CPRED = 0x0000034050, // correct) for an instruction fetch
		PM_INST_SYS_PUMP_MPRED_RTY = 0x0000044050, // Final Pump Scope (system) ended up larger than Initial Pump Scope (Chip/Group) for an instruction fetch
		PM_INST_SYS_PUMP_MPRED = 0x0000034052, // Final Pump Scope (system) mispredicted.
		PM_IOPS_CMPL = 0x0000024050, // Internal Operations completed
		PM_IPTEG_FROM_DL2L3_MOD = 0x0000045048, // A Page Table Entry was loaded into the TLB with Modified (M) data from another chip's L2 or L3 on a different Node or Group (Distant)
		PM_IPTEG_FROM_DL2L3_SHR = 0x0000035048, // A Page Table Entry was loaded into the TLB with Shared (S) data from another chip's L2 or L3 on a different Node or Group (Distant)
		PM_IPTEG_FROM_DL4 = 0x000003504C, // A Page Table Entry was loaded into the TLB from another chip's L4 on a different Node or Group (Distant) due to a instruction side request
		PM_IPTEG_FROM_DMEM = 0x000004504C, // A Page Table Entry was loaded into the TLB from another chip's memory on the same Node or Group (Distant) due to a instruction side request
		PM_IPTEG_FROM_L21_MOD = 0x0000045046, // A Page Table Entry was loaded into the TLB with Modified (M) data from another core's L2 on the same chip due to a instruction side request
		PM_IPTEG_FROM_L21_SHR = 0x0000035046, // A Page Table Entry was loaded into the TLB with Shared (S) data from another core's L2 on the same chip due to a instruction side request
		PM_IPTEG_FROM_L2_MEPF = 0x0000025040, // A Page Table Entry was loaded into the TLB from local core's L2 hit without dispatch conflicts on Mepf state.
		PM_IPTEG_FROM_L2MISS = 0x000001504E, // A Page Table Entry was loaded into the TLB from a location other than the local core's L2 due to a instruction side request
		PM_IPTEG_FROM_L2_NO_CONFLICT = 0x0000015040, // A Page Table Entry was loaded into the TLB from local core's L2 without conflict due to a instruction side request
		PM_IPTEG_FROM_L2 = 0x0000015042, // A Page Table Entry was loaded into the TLB from local core's L2 due to a instruction side request
		PM_IPTEG_FROM_L31_ECO_MOD = 0x0000045044, // A Page Table Entry was loaded into the TLB with Modified (M) data from another core's ECO L3 on the same chip due to a instruction side request
		PM_IPTEG_FROM_L31_ECO_SHR = 0x0000035044, // A Page Table Entry was loaded into the TLB with Shared (S) data from another core's ECO L3 on the same chip due to a instruction side request
		PM_IPTEG_FROM_L31_MOD = 0x0000025044, // A Page Table Entry was loaded into the TLB with Modified (M) data from another core's L3 on the same chip due to a instruction side request
		PM_IPTEG_FROM_L31_SHR = 0x0000015046, // A Page Table Entry was loaded into the TLB with Shared (S) data from another core's L3 on the same chip due to a instruction side request
		PM_IPTEG_FROM_L3_DISP_CONFLICT = 0x0000035042, // A Page Table Entry was loaded into the TLB from local core's L3 with dispatch conflict due to a instruction side request
		PM_IPTEG_FROM_L3_MEPF = 0x0000025042, // A Page Table Entry was loaded into the TLB from local core's L3 without dispatch conflicts hit on Mepf state.
		PM_IPTEG_FROM_L3MISS = 0x000004504E, // A Page Table Entry was loaded into the TLB from a location other than the local core's L3 due to a instruction side request
		PM_IPTEG_FROM_L3_NO_CONFLICT = 0x0000015044, // A Page Table Entry was loaded into the TLB from local core's L3 without conflict due to a instruction side request
		PM_IPTEG_FROM_L3 = 0x0000045042, // A Page Table Entry was loaded into the TLB from local core's L3 due to a instruction side request
		PM_IPTEG_FROM_LL4 = 0x000001504C, // A Page Table Entry was loaded into the TLB from the local chip's L4 cache due to a instruction side request
		PM_IPTEG_FROM_LMEM = 0x0000025048, // A Page Table Entry was loaded into the TLB from the local chip's Memory due to a instruction side request
		PM_IPTEG_FROM_MEMORY = 0x000002504C, // A Page Table Entry was loaded into the TLB from a memory location including L4 from local remote or distant due to a instruction side request
		PM_IPTEG_FROM_OFF_CHIP_CACHE = 0x000004504A, // A Page Table Entry was loaded into the TLB either shared or modified data from another core's L2/L3 on a different chip (remote or distant) due to a instruction side request
		PM_IPTEG_FROM_ON_CHIP_CACHE = 0x0000015048, // A Page Table Entry was loaded into the TLB either shared or modified data from another core's L2/L3 on the same chip due to a instruction side request
		PM_IPTEG_FROM_RL2L3_MOD = 0x0000025046, // A Page Table Entry was loaded into the TLB with Modified (M) data from another chip's L2 or L3 on the same Node or Group (Remote)
		PM_IPTEG_FROM_RL2L3_SHR = 0x000001504A, // A Page Table Entry was loaded into the TLB with Shared (S) data from another chip's L2 or L3 on the same Node or Group (Remote)
		PM_IPTEG_FROM_RL4 = 0x000002504A, // A Page Table Entry was loaded into the TLB from another chip's L4 on the same Node or Group (Remote) due to a instruction side request
		PM_IPTEG_FROM_RMEM = 0x000003504A, // A Page Table Entry was loaded into the TLB from another chip's memory on the same Node or Group (Remote) due to a instruction side request
		PM_ISIDE_DISP_FAIL_ADDR = 0x000002608A, // All I-side dispatch attempts for this thread that failed due to a addr collision with another machine (excludes i_l2mru_tch_reqs)
		PM_ISIDE_DISP_FAIL_OTHER = 0x000002688A, // All I-side dispatch attempts for this thread that failed due to a reason other than addrs collision (excludes i_l2mru_tch_reqs)
		PM_ISIDE_DISP = 0x000001688A, // All I-side dispatch attempts for this thread (excludes i_l2mru_tch_reqs)
		PM_ISIDE_L2MEMACC = 0x0000026890, // Valid when first beat of data comes in for an I-side fetch where data came from memory
		PM_ISIDE_MRU_TOUCH = 0x0000046880, // I-side L2 MRU touch sent to L2 for this thread
		PM_ISLB_MISS = 0x000000D8A8, // Instruction SLB Miss - Total of all segment sizes
		PM_ISLB_MISS_ALT = 0x0000040006, // Number of ISLB misses for this thread
		PM_ISQ_0_8_ENTRIES = 0x000003005A, // Cycles in which 8 or less Issue Queue entries are in use.
		PM_ISQ_36_44_ENTRIES = 0x000004000A, // Cycles in which 36 or more Issue Queue entries are in use.
		PM_ISU0_ISS_HOLD_ALL = 0x0000003080, // All ISU rejects
		PM_ISU1_ISS_HOLD_ALL = 0x0000003084, // All ISU rejects
		PM_ISU2_ISS_HOLD_ALL = 0x0000003880, // All ISU rejects
		PM_ISU3_ISS_HOLD_ALL = 0x0000003884, // All ISU rejects
		PM_ISYNC = 0x0000002884, // Isync completion count per thread
		PM_ITLB_MISS = 0x00000400FC, // ITLB Reloaded.
		PM_L1_DCACHE_RELOADED_ALL = 0x000001002C, // L1 data cache reloaded for demand.
		PM_L1_DCACHE_RELOAD_VALID = 0x00000300F6, // DL1 reloaded due to Demand Load
		PM_L1_DEMAND_WRITE = 0x000000408C, // Instruction Demand sectors written into IL1
		PM_L1_ICACHE_MISS = 0x00000200FD, // Demand iCache Miss
		PM_L1_ICACHE_RELOADED_ALL = 0x0000040012, // Counts all Icache reloads includes demand
		PM_L1_ICACHE_RELOADED_PREF = 0x0000030068, // Counts all Icache prefetch reloads (includes demand turned into prefetch)
		PM_L1PF_L2MEMACC = 0x0000016890, // Valid when first beat of data comes in for an L1PF where data came from memory
		PM_L1_PREF = 0x0000020054, // A data line was written to the L1 due to a hardware or software prefetch
		PM_L1_SW_PREF = 0x000000E880, // Software L1 Prefetches
		PM_L2_CASTOUT_MOD = 0x0000016082, // L2 Castouts - Modified (M
		PM_L2_CASTOUT_SHR = 0x0000016882, // L2 Castouts - Shared (Tx
		PM_L2_CHIP_PUMP = 0x0000046088, // RC requests that were local (aka chip) pump attempts
		PM_L2_DC_INV = 0x0000026882, // D-cache invalidates sent over the reload bus to the core
		PM_L2_DISP_ALL_L2MISS = 0x0000046080, // All successful Ld/St dispatches for this thread that were an L2 miss (excludes i_l2mru_tch_reqs)
		PM_L2_GROUP_PUMP = 0x0000046888, // RC requests that were on group (aka nodel) pump attempts
		PM_L2_GRP_GUESS_CORRECT = 0x0000026088, // L2 guess grp (GS or NNS) and guess was correct (data intra-group AND ^on-chip)
		PM_L2_GRP_GUESS_WRONG = 0x0000026888, // L2 guess grp (GS or NNS) and guess was not correct (ie data on-chip OR beyond-group)
		PM_L2_IC_INV = 0x0000026082, // I-cache Invalidates sent over the realod bus to the core
		PM_L2_INST_MISS = 0x0000036880, // All successful I-side dispatches that were an L2 miss for this thread (excludes i_l2mru_tch reqs)
		PM_L2_INST_MISS_ALT = 0x000004609E, // All successful I-side dispatches that were an L2 miss for this thread (excludes i_l2mru_tch reqs)
		PM_L2_INST = 0x0000036080, // All successful I-side dispatches for this thread (excludes i_l2mru_tch reqs)
		PM_L2_INST_ALT = 0x000003609E, // All successful I-side dispatches for this thread (excludes i_l2mru_tch reqs)
		PM_L2_LD_DISP = 0x000001609E, // All successful D-side load dispatches for this thread (L2 miss + L2 hits)
		PM_L2_LD_DISP_ALT = 0x0000036082, // All successful I-or-D side load dispatches for this thread (excludes i_l2mru_tch_reqs)
		PM_L2_LD_HIT = 0x000002609E, // All successful D-side load dispatches that were L2 hits for this thread
		PM_L2_LD_HIT_ALT = 0x0000036882, // All successful I-or-D side load dispatches for this thread that were L2 hits (excludes i_l2mru_tch_reqs)
		PM_L2_LD_MISS_128B = 0x0000016092, // All successful D-side load dispatches that were an L2 miss (NOT Sx
		PM_L2_LD_MISS_64B = 0x0000026092, // All successful D-side load dispatches that were an L2 miss (NOT Sx
		PM_L2_LD_MISS = 0x0000026080, // All successful D-Side Load dispatches that were an L2 miss for this thread
		PM_L2_LD = 0x0000016080, // All successful D-side Load dispatches for this thread (L2 miss + L2 hits)
		PM_L2_LOC_GUESS_CORRECT = 0x0000016088, // L2 guess local (LNS) and guess was correct (ie data local)
		PM_L2_LOC_GUESS_WRONG = 0x0000016888, // L2 guess local (LNS) and guess was not correct (ie data not on chip)
		PM_L2_RCLD_DISP_FAIL_ADDR = 0x0000016884, // All I-od-D side load dispatch attempts for this thread that failed due to address collision with RC/CO/SN/SQ machine (excludes i_l2mru_tch_reqs)
		PM_L2_RCLD_DISP_FAIL_OTHER = 0x0000026084, // All I-or-D side load dispatch attempts for this thread that failed due to reason other than address collision (excludes i_l2mru_tch_reqs)
		PM_L2_RCLD_DISP = 0x0000016084, // All I-or-D side load dispatch attempts for this thread (excludes i_l2mru_tch_reqs)
		PM_L2_RCST_DISP_FAIL_ADDR = 0x0000036884, // All D-side store dispatch attempts for this thread that failed due to address collision with RC/CO/SN/SQ
		PM_L2_RCST_DISP_FAIL_OTHER = 0x0000046084, // All D-side store dispatch attempts for this thread that failed due to reason other than address collision
		PM_L2_RCST_DISP = 0x0000036084, // All D-side store dispatch attempts for this thread
		PM_L2_RC_ST_DONE = 0x0000036086, // RC did store to line that was Tx or Sx
		PM_L2_RTY_LD = 0x000003688A, // RC retries on PB for any load from core (excludes DCBFs)
		PM_L2_RTY_LD_ALT = 0x000003689E, // RC retries on PB for any load from core (excludes DCBFs)
		PM_L2_RTY_ST = 0x000003608A, // RC retries on PB for any store from core (excludes DCBFs)
		PM_L2_RTY_ST_ALT = 0x000004689E, // RC retries on PB for any store from core (excludes DCBFs)
		PM_L2_SN_M_RD_DONE = 0x0000046086, // SNP dispatched for a read and was M (true M)
		PM_L2_SN_M_WR_DONE = 0x0000016086, // SNP dispatched for a write and was M (true M); for DMA cacheinj this will pulse if rty/push is required (won't pulse if cacheinj is accepted)
		PM_L2_SN_M_WR_DONE_ALT = 0x0000046886, // SNP dispatched for a write and was M (true M); for DMA cacheinj this will pulse if rty/push is required (won't pulse if cacheinj is accepted)
		PM_L2_SN_SX_I_DONE = 0x0000036886, // SNP dispatched and went from Sx to Ix
		PM_L2_ST_DISP = 0x0000046082, // All successful D-side store dispatches for this thread
		PM_L2_ST_DISP_ALT = 0x000001689E, // All successful D-side store dispatches for this thread (L2 miss + L2 hits)
		PM_L2_ST_HIT = 0x0000046882, // All successful D-side store dispatches for this thread that were L2 hits
		PM_L2_ST_HIT_ALT = 0x000002689E, // All successful D-side store dispatches that were L2 hits for this thread
		PM_L2_ST_MISS_128B = 0x0000016892, // All successful D-side store dispatches that were an L2 miss (NOT Sx
		PM_L2_ST_MISS_64B = 0x0000026892, // All successful D-side store dispatches that were an L2 miss (NOT Sx
		PM_L2_ST_MISS = 0x0000026880, // All successful D-Side Store dispatches that were an L2 miss for this thread
		PM_L2_ST = 0x0000016880, // All successful D-side store dispatches for this thread (L2 miss + L2 hits)
		PM_L2_SYS_GUESS_CORRECT = 0x0000036088, // L2 guess system (VGS or RNS) and guess was correct (ie data beyond-group)
		PM_L2_SYS_GUESS_WRONG = 0x0000036888, // L2 guess system (VGS or RNS) and guess was not correct (ie data ^beyond-group)
		PM_L2_SYS_PUMP = 0x000004688A, // RC requests that were system pump attempts
		PM_L3_CI_HIT = 0x00000260A2, // L3 Castins Hit (total count)
		PM_L3_CI_MISS = 0x00000268A2, // L3 castins miss (total count)
		PM_L3_CINJ = 0x00000368A4, // L3 castin of cache inject
		PM_L3_CI_USAGE = 0x00000168AC, // Rotating sample of 16 CI or CO actives
		PM_L3_CO0_BUSY = 0x00000368AC, // Lifetime
		PM_L3_CO0_BUSY_ALT = 0x00000468AC, // Lifetime
		PM_L3_CO_L31 = 0x00000268A0, // L3 CO to L3.
		PM_L3_CO_LCO = 0x00000360A4, // Total L3 COs occurred on LCO L3.
		PM_L3_CO_MEM = 0x00000260A0, // may undercount if two cresp come in the same cyc)
		PM_L3_CO_MEPF = 0x000003E05E, // L3 castouts in Mepf state for this thread
		PM_L3_CO_MEPF_ALT = 0x00000168A0, // L3 CO of line in Mep state (includes casthrough to memory).
		PM_L3_CO = 0x00000360A8, // L3 castout occurring (does not include casthrough or log writes (cinj/dmaw))
		PM_L3_GRP_GUESS_CORRECT = 0x00000168B2, // group (GS or NNS) and data from same group (near) (pred successful)
		PM_L3_GRP_GUESS_WRONG_HIGH = 0x00000368B2, // group (GS or NNS) but data from local node.
		PM_L3_GRP_GUESS_WRONG_LOW = 0x00000360B2, // group (GS or NNS) but data from outside group (far or rem).
		PM_L3_HIT = 0x00000160A4, // L3 Hits (L2 miss hitting L3
		PM_L3_L2_CO_HIT = 0x00000360A2, // L2 CO hits
		PM_L3_L2_CO_MISS = 0x00000368A2, // L2 CO miss
		PM_L3_LAT_CI_HIT = 0x00000460A2, // L3 Lateral Castins Hit
		PM_L3_LAT_CI_MISS = 0x00000468A2, // L3 Lateral Castins Miss
		PM_L3_LD_HIT = 0x00000260A4, // L3 Hits for demand LDs
		PM_L3_LD_MISS = 0x00000268A4, // L3 Misses for demand LDs
		PM_L3_LD_PREF = 0x000000F0B0, // L3 load prefetch
		PM_L3_LOC_GUESS_CORRECT = 0x00000160B2, // node/chip (LNS) and data from local node (local) (pred successful) - always PFs only
		PM_L3_LOC_GUESS_WRONG = 0x00000268B2, // node (LNS) but data from out side local node (near or far or rem).
		PM_L3_MISS = 0x00000168A4, // L3 Misses (L2 miss also missing L3
		PM_L3_P0_CO_L31 = 0x00000460AA, // L3 CO to L3.
		PM_L3_P0_CO_MEM = 0x00000360AA, // L3 CO to memory port 0 with or without data
		PM_L3_P0_CO_RTY = 0x00000360AE, // L3 CO received retry port 0 (memory only)
		PM_L3_P0_CO_RTY_ALT = 0x00000460AE, // L3 CO received retry port 2 (memory only)
		PM_L3_P0_GRP_PUMP = 0x00000260B0, // L3 PF sent with grp scope port 0
		PM_L3_P0_LCO_DATA = 0x00000260AA, // LCO sent with data port 0
		PM_L3_P0_LCO_NO_DATA = 0x00000160AA, // Dataless L3 LCO sent port 0
		PM_L3_P0_LCO_RTY = 0x00000160B4, // L3 initiated LCO received retry on port 0 (can try 4 times)
		PM_L3_P0_NODE_PUMP = 0x00000160B0, // L3 PF sent with nodal scope port 0
		PM_L3_P0_PF_RTY = 0x00000160AE, // L3 PF received retry port 0
		PM_L3_P0_PF_RTY_ALT = 0x00000260AE, // L3 PF received retry port 2
		PM_L3_P0_SYS_PUMP = 0x00000360B0, // L3 PF sent with sys scope port 0
		PM_L3_P1_CO_L31 = 0x00000468AA, // L3 CO to L3.
		PM_L3_P1_CO_MEM = 0x00000368AA, // L3 CO to memory port 1 with or without data
		PM_L3_P1_CO_RTY = 0x00000368AE, // L3 CO received retry port 1 (memory only)
		PM_L3_P1_CO_RTY_ALT = 0x00000468AE, // L3 CO received retry port 3 (memory only)
		PM_L3_P1_GRP_PUMP = 0x00000268B0, // L3 PF sent with grp scope port 1
		PM_L3_P1_LCO_DATA = 0x00000268AA, // LCO sent with data port 1
		PM_L3_P1_LCO_NO_DATA = 0x00000168AA, // Dataless L3 LCO sent port 1
		PM_L3_P1_LCO_RTY = 0x00000168B4, // L3 initiated LCO received retry on port 1 (can try 4 times)
		PM_L3_P1_NODE_PUMP = 0x00000168B0, // L3 PF sent with nodal scope port 1
		PM_L3_P1_PF_RTY = 0x00000168AE, // L3 PF received retry port 1
		PM_L3_P1_PF_RTY_ALT = 0x00000268AE, // L3 PF received retry port 3
		PM_L3_P1_SYS_PUMP = 0x00000368B0, // L3 PF sent with sys scope port 1
		PM_L3_P2_LCO_RTY = 0x00000260B4, // L3 initiated LCO received retry on port 2 (can try 4 times)
		PM_L3_P3_LCO_RTY = 0x00000268B4, // L3 initiated LCO received retry on port 3 (can try 4 times)
		PM_L3_PF0_BUSY = 0x00000360B4, // Lifetime
		PM_L3_PF0_BUSY_ALT = 0x00000460B4, // Lifetime
		PM_L3_PF_HIT_L3 = 0x00000260A8, // L3 PF hit in L3 (abandoned)
		PM_L3_PF_MISS_L3 = 0x00000160A0, // L3 PF missed in L3
		PM_L3_PF_OFF_CHIP_CACHE = 0x00000368A0, // L3 PF from Off chip cache
		PM_L3_PF_OFF_CHIP_MEM = 0x00000468A0, // L3 PF from Off chip memory
		PM_L3_PF_ON_CHIP_CACHE = 0x00000360A0, // L3 PF from On chip cache
		PM_L3_PF_ON_CHIP_MEM = 0x00000460A0, // L3 PF from On chip memory
		PM_L3_PF_USAGE = 0x00000260AC, // Rotating sample of 32 PF actives
		PM_L3_RD0_BUSY = 0x00000368B4, // Lifetime
		PM_L3_RD0_BUSY_ALT = 0x00000468B4, // Lifetime
		PM_L3_RD_USAGE = 0x00000268AC, // Rotating sample of 16 RD actives
		PM_L3_SN0_BUSY = 0x00000360AC, // Lifetime
		PM_L3_SN0_BUSY_ALT = 0x00000460AC, // Lifetime
		PM_L3_SN_USAGE = 0x00000160AC, // Rotating sample of 16 snoop valids
		PM_L3_SW_PREF = 0x000000F8B0, // L3 load prefetch
		PM_L3_SYS_GUESS_CORRECT = 0x00000260B2, // system (VGS or RNS) and data from outside group (far or rem)(pred successful)
		PM_L3_SYS_GUESS_WRONG = 0x00000460B2, // system (VGS or RNS) but data from local or near.
		PM_L3_TRANS_PF = 0x00000468A4, // L3 Transient prefetch received from L2
		PM_L3_WI0_BUSY = 0x00000160B6, // Rotating sample of 8 WI valid
		PM_L3_WI0_BUSY_ALT = 0x00000260B6, // Rotating sample of 8 WI valid (duplicate)
		PM_L3_WI_USAGE = 0x00000168A8, // Lifetime
		PM_LARX_FIN = 0x000003C058, // Larx finished
		PM_LD_CMPL = 0x000004003E, // count of Loads completed
		PM_LD_L3MISS_PEND_CYC = 0x0000010062, // Cycles L3 miss was pending for this thread
		PM_LD_MISS_L1_FIN = 0x000002C04E, // Number of load instructions that finished with an L1 miss.
		PM_LD_MISS_L1 = 0x000003E054, // Load Missed L1
		PM_LD_REF_L1 = 0x00000100FC, // All L1 D cache load references counted at finish
		PM_LINK_STACK_CORRECT = 0x00000058A0, // Link stack predicts right address
		PM_LINK_STACK_INVALID_PTR = 0x0000005898, // It is most often caused by certain types of flush where the pointer is not available.
		PM_LINK_STACK_WRONG_ADD_PRED = 0x0000005098, // Link stack predicts wrong address
		PM_LMQ_EMPTY_CYC = 0x000002E05E, // Cycles in which the LMQ has no pending load misses for this thread
		PM_LMQ_MERGE = 0x000001002E, // A demand miss collides with a prefetch for the same line
		PM_LRQ_REJECT = 0x000002E05A, // Internal LSU reject from LRQ.
		PM_LS0_DC_COLLISIONS = 0x000000D090, // Read-write data cache collisions
		PM_LS0_ERAT_MISS_PREF = 0x000000E084, // LS0 Erat miss due to prefetch
		PM_LS0_LAUNCH_HELD_PREF = 0x000000C09C, // Number of times a load or store instruction was unable to launch/relaunch because a high priority prefetch used that relaunch cycle
		PM_LS0_PTE_TABLEWALK_CYC = 0x000000E0BC, // Cycles when a tablewalk is pending on this thread on table 0
		PM_LS0_TM_DISALLOW = 0x000000E0B4, // A TM-ineligible instruction tries to execute inside a transaction and the LSU disallows it
		PM_LS0_UNALIGNED_LD = 0x000000C094, // Load instructions whose data crosses a double-word boundary
		PM_LS0_UNALIGNED_ST = 0x000000F0B8, // Store instructions whose data crosses a double-word boundary
		PM_LS1_DC_COLLISIONS = 0x000000D890, // Read-write data cache collisions
		PM_LS1_ERAT_MISS_PREF = 0x000000E884, // LS1 Erat miss due to prefetch
		PM_LS1_LAUNCH_HELD_PREF = 0x000000C89C, // Number of times a load or store instruction was unable to launch/relaunch because a high priority prefetch used that relaunch cycle
		PM_LS1_PTE_TABLEWALK_CYC = 0x000000E8BC, // Cycles when a tablewalk is pending on this thread on table 1
		PM_LS1_TM_DISALLOW = 0x000000E8B4, // A TM-ineligible instruction tries to execute inside a transaction and the LSU disallows it
		PM_LS1_UNALIGNED_LD = 0x000000C894, // Load instructions whose data crosses a double-word boundary
		PM_LS1_UNALIGNED_ST = 0x000000F8B8, // Store instructions whose data crosses a double-word boundary
		PM_LS2_DC_COLLISIONS = 0x000000D094, // Read-write data cache collisions
		PM_LS2_ERAT_MISS_PREF = 0x000000E088, // LS0 Erat miss due to prefetch
		PM_LS2_TM_DISALLOW = 0x000000E0B8, // A TM-ineligible instruction tries to execute inside a transaction and the LSU disallows it
		PM_LS2_UNALIGNED_LD = 0x000000C098, // Load instructions whose data crosses a double-word boundary
		PM_LS2_UNALIGNED_ST = 0x000000F0BC, // Store instructions whose data crosses a double-word boundary
		PM_LS3_DC_COLLISIONS = 0x000000D894, // Read-write data cache collisions
		PM_LS3_ERAT_MISS_PREF = 0x000000E888, // LS1 Erat miss due to prefetch
		PM_LS3_TM_DISALLOW = 0x000000E8B8, // A TM-ineligible instruction tries to execute inside a transaction and the LSU disallows it
		PM_LS3_UNALIGNED_LD = 0x000000C898, // Load instructions whose data crosses a double-word boundary
		PM_LS3_UNALIGNED_ST = 0x000000F8BC, // Store instructions whose data crosses a double-word boundary
		PM_LSU0_1_LRQF_FULL_CYC = 0x000000D0BC, // Counts the number of cycles the LRQF is full.
		PM_LSU0_ERAT_HIT = 0x000000E08C, // Primary ERAT hit.
		PM_LSU0_FALSE_LHS = 0x000000C0A0, // False LHS match detected
		PM_LSU0_L1_CAM_CANCEL = 0x000000F090, // ls0 l1 tm cam cancel
		PM_LSU0_LDMX_FIN = 0x000000D088, // New P9 instruction LDMX.
		PM_LSU0_LMQ_S0_VALID = 0x000000D8B8, // Slot 0 of LMQ valid
		PM_LSU0_LRQ_S0_VALID_CYC = 0x000000D8B4, // Slot 0 of LRQ valid
		PM_LSU0_SET_MPRED = 0x000000D080, // Set prediction(set-p) miss.
		PM_LSU0_SRQ_S0_VALID_CYC = 0x000000D0B4, // Slot 0 of SRQ valid
		PM_LSU0_STORE_REJECT = 0x000000F088, // All internal store rejects cause the instruction to go back to the SRQ and go to sleep until woken up to try again after the condition has been met
		PM_LSU0_TM_L1_HIT = 0x000000E094, // Load tm hit in L1
		PM_LSU0_TM_L1_MISS = 0x000000E09C, // Load tm L1 miss
		PM_LSU1_ERAT_HIT = 0x000000E88C, // Primary ERAT hit.
		PM_LSU1_FALSE_LHS = 0x000000C8A0, // False LHS match detected
		PM_LSU1_L1_CAM_CANCEL = 0x000000F890, // ls1 l1 tm cam cancel
		PM_LSU1_LDMX_FIN = 0x000000D888, // New P9 instruction LDMX.
		PM_LSU1_SET_MPRED = 0x000000D880, // Set prediction(set-p) miss.
		PM_LSU1_STORE_REJECT = 0x000000F888, // All internal store rejects cause the instruction to go back to the SRQ and go to sleep until woken up to try again after the condition has been met
		PM_LSU1_TM_L1_HIT = 0x000000E894, // Load tm hit in L1
		PM_LSU1_TM_L1_MISS = 0x000000E89C, // Load tm L1 miss
		PM_LSU2_3_LRQF_FULL_CYC = 0x000000D8BC, // Counts the number of cycles the LRQF is full.
		PM_LSU2_ERAT_HIT = 0x000000E090, // Primary ERAT hit.
		PM_LSU2_FALSE_LHS = 0x000000C0A4, // False LHS match detected
		PM_LSU2_L1_CAM_CANCEL = 0x000000F094, // ls2 l1 tm cam cancel
		PM_LSU2_LDMX_FIN = 0x000000D08C, // New P9 instruction LDMX.
		PM_LSU2_SET_MPRED = 0x000000D084, // Set prediction(set-p) miss.
		PM_LSU2_STORE_REJECT = 0x000000F08C, // All internal store rejects cause the instruction to go back to the SRQ and go to sleep until woken up to try again after the condition has been met
		PM_LSU2_TM_L1_HIT = 0x000000E098, // Load tm hit in L1
		PM_LSU2_TM_L1_MISS = 0x000000E0A0, // Load tm L1 miss
		PM_LSU3_ERAT_HIT = 0x000000E890, // Primary ERAT hit.
		PM_LSU3_FALSE_LHS = 0x000000C8A4, // False LHS match detected
		PM_LSU3_L1_CAM_CANCEL = 0x000000F894, // ls3 l1 tm cam cancel
		PM_LSU3_LDMX_FIN = 0x000000D88C, // New P9 instruction LDMX.
		PM_LSU3_SET_MPRED = 0x000000D884, // Set prediction(set-p) miss.
		PM_LSU3_STORE_REJECT = 0x000000F88C, // All internal store rejects cause the instruction to go back to the SRQ and go to sleep until woken up to try again after the condition has been met
		PM_LSU3_TM_L1_HIT = 0x000000E898, // Load tm hit in L1
		PM_LSU3_TM_L1_MISS = 0x000000E8A0, // Load tm L1 miss
		PM_LSU_DERAT_MISS = 0x00000200F6, // DERAT Reloaded due to a DERAT miss
		PM_LSU_FIN = 0x0000030066, // LSU Finished a PPC instruction (up to 4 per cycle)
		PM_LSU_FLUSH_ATOMIC = 0x000000C8A8, // Quad-word loads (lq) are considered atomic because they always span at least 2 slices.
		PM_LSU_FLUSH_CI = 0x000000C0A8, // Load was not issued to LSU as a cache inhibited (non-cacheable) load but it was later determined to be cache inhibited
		PM_LSU_FLUSH_EMSH = 0x000000C0AC, // An ERAT miss was detected after a set-p hit.
		PM_LSU_FLUSH_LARX_STCX = 0x000000C8B8, // A larx is flushed because an older larx has an LMQ reservation for the same thread.
		PM_LSU_FLUSH_LHL_SHL = 0x000000C8B4, // The instruction was flushed because of a sequential load/store consistency.
		PM_LSU_FLUSH_LHS = 0x000000C8B0, // Effective Address alias flush : no EA match but Real Address match.
		PM_LSU_FLUSH_NEXT = 0x00000020B0, // LSU flush next reported at flush time.
		PM_LSU_FLUSH_OTHER = 0x000000C0BC, // Other LSU flushes including: Sync (sync ack from L2 caused search of LRQ for oldest snooped load
		PM_LSU_FLUSH_RELAUNCH_MISS = 0x000000C8AC, // If a load that has already returned data and has to relaunch for any reason then gets a miss (erat
		PM_LSU_FLUSH_SAO = 0x000000C0B8, // A load-hit-load condition with Strong Address Ordering will have address compare disabled and flush
		PM_LSU_FLUSH_UE = 0x000000C0B0, // Correctable ECC error on reload data
		PM_LSU_FLUSH_WRK_ARND = 0x000000C0B4, // LSU workaround flush.
		PM_LSU_LMQ_FULL_CYC = 0x000000D0B8, // Counts the number of cycles the LMQ is full
		PM_LSU_LMQ_SRQ_EMPTY_CYC = 0x000002003E, // Cycles in which the LSU is empty for all threads (lmq and srq are completely empty)
		PM_LSU_NCST = 0x000000C890, // 1 store op is sent to the nest.
		PM_LSU_REJECT_ERAT_MISS = 0x000002E05C, // LSU Reject due to ERAT (up to 4 per cycles)
		PM_LSU_REJECT_LHS = 0x000004E05C, // LSU Reject due to LHS (up to 4 per cycle)
		PM_LSU_REJECT_LMQ_FULL = 0x000003001C, // LSU Reject due to LMQ full (up to 4 per cycles)
		PM_LSU_SRQ_FULL_CYC = 0x000001001A, // Cycles in which the Store Queue is full on all 4 slices.
		PM_LSU_STCX_FAIL = 0x000000F080, // 
		PM_LSU_STCX = 0x000000C090, // STCX sent to nest
		PM_LWSYNC = 0x0000005894, // Lwsync instruction decoded and transferred
		PM_MATH_FLOP_CMPL = 0x000004505C, // Math flop instruction completed
		PM_MEM_CO = 0x000004C058, // Memory castouts from this thread
		PM_MEM_LOC_THRESH_IFU = 0x0000010058, // Local Memory above threshold for IFU speculation control
		PM_MEM_LOC_THRESH_LSU_HIGH = 0x0000040056, // Local memory above threshold for LSU medium
		PM_MEM_LOC_THRESH_LSU_MED = 0x000001C05E, // Local memory above threshold for data prefetch
		PM_MEM_PREF = 0x000002C058, // Memory prefetch for this thread.
		PM_MEM_READ = 0x0000010056, // Reads from Memory from this thread (includes data/inst/xlate/l1prefetch/inst prefetch).
		PM_MEM_RWITM = 0x000003C05E, // Memory Read With Intent to Modify for this thread
		PM_MRK_BACK_BR_CMPL = 0x000003515E, // Marked branch instruction completed with a target address less than current instruction address
		PM_MRK_BR_2PATH = 0x0000010138, // marked branches which are not strongly biased
		PM_MRK_BR_CMPL = 0x000001016E, // Branch Instruction completed
		PM_MRK_BR_MPRED_CMPL = 0x00000301E4, // Marked Branch Mispredicted
		PM_MRK_BR_TAKEN_CMPL = 0x00000101E2, // Marked Branch Taken completed
		PM_MRK_BRU_FIN = 0x000002013A, // bru marked instr finish
		PM_MRK_DATA_FROM_DL2L3_MOD_CYC = 0x000004D12E, // Duration in cycles to reload with Modified (M) data from another chip's L2 or L3 on a different Node or Group (Distant)
		PM_MRK_DATA_FROM_DL2L3_MOD = 0x000003D14E, // The processor's data cache was reloaded with Modified (M) data from another chip's L2 or L3 on a different Node or Group (Distant)
		PM_MRK_DATA_FROM_DL2L3_SHR_CYC = 0x000002C128, // Duration in cycles to reload with Shared (S) data from another chip's L2 or L3 on a different Node or Group (Distant)
		PM_MRK_DATA_FROM_DL2L3_SHR = 0x000001D150, // The processor's data cache was reloaded with Shared (S) data from another chip's L2 or L3 on a different Node or Group (Distant)
		PM_MRK_DATA_FROM_DL4_CYC = 0x000002C12C, // Duration in cycles to reload from another chip's L4 on a different Node or Group (Distant) due to a marked load
		PM_MRK_DATA_FROM_DL4 = 0x000001D152, // The processor's data cache was reloaded from another chip's L4 on a different Node or Group (Distant) due to a marked load
		PM_MRK_DATA_FROM_DMEM_CYC = 0x000004E11E, // Duration in cycles to reload from another chip's memory on the same Node or Group (Distant) due to a marked load
		PM_MRK_DATA_FROM_DMEM = 0x000003D14C, // The processor's data cache was reloaded from another chip's memory on the same Node or Group (Distant) due to a marked load
		PM_MRK_DATA_FROM_L21_MOD_CYC = 0x000003D148, // Duration in cycles to reload with Modified (M) data from another core's L2 on the same chip due to a marked load
		PM_MRK_DATA_FROM_L21_MOD = 0x000004D146, // The processor's data cache was reloaded with Modified (M) data from another core's L2 on the same chip due to a marked load
		PM_MRK_DATA_FROM_L21_SHR_CYC = 0x000001D154, // Duration in cycles to reload with Shared (S) data from another core's L2 on the same chip due to a marked load
		PM_MRK_DATA_FROM_L21_SHR = 0x000002D14E, // The processor's data cache was reloaded with Shared (S) data from another core's L2 on the same chip due to a marked load
		PM_MRK_DATA_FROM_L2_CYC = 0x0000014156, // Duration in cycles to reload from local core's L2 due to a marked load
		PM_MRK_DATA_FROM_L2_DISP_CONFLICT_LDHITST_CYC = 0x000001415A, // Duration in cycles to reload from local core's L2 with load hit store conflict due to a marked load
		PM_MRK_DATA_FROM_L2_DISP_CONFLICT_LDHITST = 0x000002D148, // The processor's data cache was reloaded from local core's L2 with load hit store conflict due to a marked load
		PM_MRK_DATA_FROM_L2_DISP_CONFLICT_OTHER_CYC = 0x000003D140, // Duration in cycles to reload from local core's L2 with dispatch conflict due to a marked load
		PM_MRK_DATA_FROM_L2_DISP_CONFLICT_OTHER = 0x000002C124, // The processor's data cache was reloaded from local core's L2 with dispatch conflict due to a marked load
		PM_MRK_DATA_FROM_L2_MEPF_CYC = 0x000003D144, // Duration in cycles to reload from local core's L2 hit without dispatch conflicts on Mepf state.
		PM_MRK_DATA_FROM_L2_MEPF = 0x000004C120, // The processor's data cache was reloaded from local core's L2 hit without dispatch conflicts on Mepf state.
		PM_MRK_DATA_FROM_L2MISS_CYC = 0x0000035152, // Duration in cycles to reload from a location other than the local core's L2 due to a marked load
		PM_MRK_DATA_FROM_L2MISS = 0x00000401E8, // The processor's data cache was reloaded from a location other than the local core's L2 due to a marked load
		PM_MRK_DATA_FROM_L2_NO_CONFLICT_CYC = 0x0000014158, // Duration in cycles to reload from local core's L2 without conflict due to a marked load
		PM_MRK_DATA_FROM_L2_NO_CONFLICT = 0x000002C120, // The processor's data cache was reloaded from local core's L2 without conflict due to a marked load
		PM_MRK_DATA_FROM_L2 = 0x000002C126, // The processor's data cache was reloaded from local core's L2 due to a marked load
		PM_MRK_DATA_FROM_L31_ECO_MOD_CYC = 0x0000035158, // Duration in cycles to reload with Modified (M) data from another core's ECO L3 on the same chip due to a marked load
		PM_MRK_DATA_FROM_L31_ECO_MOD = 0x000004D144, // The processor's data cache was reloaded with Modified (M) data from another core's ECO L3 on the same chip due to a marked load
		PM_MRK_DATA_FROM_L31_ECO_SHR_CYC = 0x000001D142, // Duration in cycles to reload with Shared (S) data from another core's ECO L3 on the same chip due to a marked load
		PM_MRK_DATA_FROM_L31_ECO_SHR = 0x000002D14C, // The processor's data cache was reloaded with Shared (S) data from another core's ECO L3 on the same chip due to a marked load
		PM_MRK_DATA_FROM_L31_MOD_CYC = 0x000001D140, // Duration in cycles to reload with Modified (M) data from another core's L3 on the same chip due to a marked load
		PM_MRK_DATA_FROM_L31_MOD = 0x000002D144, // The processor's data cache was reloaded with Modified (M) data from another core's L3 on the same chip due to a marked load
		PM_MRK_DATA_FROM_L31_SHR_CYC = 0x0000035156, // Duration in cycles to reload with Shared (S) data from another core's L3 on the same chip due to a marked load
		PM_MRK_DATA_FROM_L31_SHR = 0x000004D124, // The processor's data cache was reloaded with Shared (S) data from another core's L3 on the same chip due to a marked load
		PM_MRK_DATA_FROM_L3_CYC = 0x0000035154, // Duration in cycles to reload from local core's L3 due to a marked load
		PM_MRK_DATA_FROM_L3_DISP_CONFLICT_CYC = 0x000002C122, // Duration in cycles to reload from local core's L3 with dispatch conflict due to a marked load
		PM_MRK_DATA_FROM_L3_DISP_CONFLICT = 0x000001D144, // The processor's data cache was reloaded from local core's L3 with dispatch conflict due to a marked load
		PM_MRK_DATA_FROM_L3_MEPF_CYC = 0x000001415C, // Duration in cycles to reload from local core's L3 without dispatch conflicts hit on Mepf state due to a marked load
		PM_MRK_DATA_FROM_L3_MEPF = 0x000002D142, // The processor's data cache was reloaded from local core's L3 without dispatch conflicts hit on Mepf state.
		PM_MRK_DATA_FROM_L3MISS_CYC = 0x000001415E, // Duration in cycles to reload from a location other than the local core's L3 due to a marked load
		PM_MRK_DATA_FROM_L3MISS = 0x00000201E4, // The processor's data cache was reloaded from a location other than the local core's L3 due to a marked load
		PM_MRK_DATA_FROM_L3_NO_CONFLICT_CYC = 0x000004C124, // Duration in cycles to reload from local core's L3 without conflict due to a marked load
		PM_MRK_DATA_FROM_L3_NO_CONFLICT = 0x000003D146, // The processor's data cache was reloaded from local core's L3 without conflict due to a marked load
		PM_MRK_DATA_FROM_L3 = 0x000004D142, // The processor's data cache was reloaded from local core's L3 due to a marked load
		PM_MRK_DATA_FROM_LL4_CYC = 0x000002C12E, // Duration in cycles to reload from the local chip's L4 cache due to a marked load
		PM_MRK_DATA_FROM_LL4 = 0x000001D14C, // The processor's data cache was reloaded from the local chip's L4 cache due to a marked load
		PM_MRK_DATA_FROM_LMEM_CYC = 0x000004D128, // Duration in cycles to reload from the local chip's Memory due to a marked load
		PM_MRK_DATA_FROM_LMEM = 0x000003D142, // The processor's data cache was reloaded from the local chip's Memory due to a marked load
		PM_MRK_DATA_FROM_MEMORY_CYC = 0x000001D146, // Duration in cycles to reload from a memory location including L4 from local remote or distant due to a marked load
		PM_MRK_DATA_FROM_MEMORY = 0x00000201E0, // The processor's data cache was reloaded from a memory location including L4 from local remote or distant due to a marked load
		PM_MRK_DATA_FROM_OFF_CHIP_CACHE_CYC = 0x000001D14E, // Duration in cycles to reload either shared or modified data from another core's L2/L3 on a different chip (remote or distant) due to a marked load
		PM_MRK_DATA_FROM_OFF_CHIP_CACHE = 0x000002D120, // The processor's data cache was reloaded either shared or modified data from another core's L2/L3 on a different chip (remote or distant) due to a marked load
		PM_MRK_DATA_FROM_ON_CHIP_CACHE_CYC = 0x000003515A, // Duration in cycles to reload either shared or modified data from another core's L2/L3 on the same chip due to a marked load
		PM_MRK_DATA_FROM_ON_CHIP_CACHE = 0x000004D140, // The processor's data cache was reloaded either shared or modified data from another core's L2/L3 on the same chip due to a marked load
		PM_MRK_DATA_FROM_RL2L3_MOD_CYC = 0x000002D14A, // Duration in cycles to reload with Modified (M) data from another chip's L2 or L3 on the same Node or Group (Remote)
		PM_MRK_DATA_FROM_RL2L3_MOD = 0x000001D14A, // The processor's data cache was reloaded with Modified (M) data from another chip's L2 or L3 on the same Node or Group (Remote)
		PM_MRK_DATA_FROM_RL2L3_SHR_CYC = 0x000004C12A, // Duration in cycles to reload with Shared (S) data from another chip's L2 or L3 on the same Node or Group (Remote)
		PM_MRK_DATA_FROM_RL2L3_SHR = 0x0000035150, // The processor's data cache was reloaded with Shared (S) data from another chip's L2 or L3 on the same Node or Group (Remote)
		PM_MRK_DATA_FROM_RL4_CYC = 0x000004D12A, // Duration in cycles to reload from another chip's L4 on the same Node or Group (Remote) due to a marked load
		PM_MRK_DATA_FROM_RL4 = 0x000003515C, // The processor's data cache was reloaded from another chip's L4 on the same Node or Group (Remote) due to a marked load
		PM_MRK_DATA_FROM_RMEM_CYC = 0x000002C12A, // Duration in cycles to reload from another chip's memory on the same Node or Group (Remote) due to a marked load
		PM_MRK_DATA_FROM_RMEM = 0x000001D148, // The processor's data cache was reloaded from another chip's memory on the same Node or Group (Remote) due to a marked load
		PM_MRK_DCACHE_RELOAD_INTV = 0x0000040118, // Combined Intervention event
		PM_MRK_DERAT_MISS_16G = 0x000004C15C, // Marked Data ERAT Miss (Data TLB Access) page size 16G
		PM_MRK_DERAT_MISS_16M = 0x000003D154, // Marked Data ERAT Miss (Data TLB Access) page size 16M
		PM_MRK_DERAT_MISS_1G = 0x000003D152, // Marked Data ERAT Miss (Data TLB Access) page size 1G.
		PM_MRK_DERAT_MISS_2M = 0x000002D152, // Marked Data ERAT Miss (Data TLB Access) page size 2M.
		PM_MRK_DERAT_MISS_4K = 0x000002D150, // Marked Data ERAT Miss (Data TLB Access) page size 4K
		PM_MRK_DERAT_MISS_64K = 0x000002D154, // Marked Data ERAT Miss (Data TLB Access) page size 64K
		PM_MRK_DERAT_MISS = 0x00000301E6, // Erat Miss (TLB Access) All page sizes
		PM_MRK_DFU_FIN = 0x0000020132, // Decimal Unit marked Instruction Finish
		PM_MRK_DPTEG_FROM_DL2L3_MOD = 0x000004F148, // A Page Table Entry was loaded into the TLB with Modified (M) data from another chip's L2 or L3 on a different Node or Group (Distant)
		PM_MRK_DPTEG_FROM_DL2L3_SHR = 0x000003F148, // A Page Table Entry was loaded into the TLB with Shared (S) data from another chip's L2 or L3 on a different Node or Group (Distant)
		PM_MRK_DPTEG_FROM_DL4 = 0x000003F14C, // A Page Table Entry was loaded into the TLB from another chip's L4 on a different Node or Group (Distant) due to a marked data side request.
		PM_MRK_DPTEG_FROM_DMEM = 0x000004F14C, // A Page Table Entry was loaded into the TLB from another chip's memory on the same Node or Group (Distant) due to a marked data side request.
		PM_MRK_DPTEG_FROM_L21_MOD = 0x000004F146, // A Page Table Entry was loaded into the TLB with Modified (M) data from another core's L2 on the same chip due to a marked data side request.
		PM_MRK_DPTEG_FROM_L21_SHR = 0x000003F146, // A Page Table Entry was loaded into the TLB with Shared (S) data from another core's L2 on the same chip due to a marked data side request.
		PM_MRK_DPTEG_FROM_L2_MEPF = 0x000002F140, // A Page Table Entry was loaded into the TLB from local core's L2 hit without dispatch conflicts on Mepf state.
		PM_MRK_DPTEG_FROM_L2MISS = 0x000001F14E, // A Page Table Entry was loaded into the TLB from a location other than the local core's L2 due to a marked data side request.
		PM_MRK_DPTEG_FROM_L2_NO_CONFLICT = 0x000001F140, // A Page Table Entry was loaded into the TLB from local core's L2 without conflict due to a marked data side request.
		PM_MRK_DPTEG_FROM_L2 = 0x000001F142, // A Page Table Entry was loaded into the TLB from local core's L2 due to a marked data side request.
		PM_MRK_DPTEG_FROM_L31_ECO_MOD = 0x000004F144, // A Page Table Entry was loaded into the TLB with Modified (M) data from another core's ECO L3 on the same chip due to a marked data side request.
		PM_MRK_DPTEG_FROM_L31_ECO_SHR = 0x000003F144, // A Page Table Entry was loaded into the TLB with Shared (S) data from another core's ECO L3 on the same chip due to a marked data side request.
		PM_MRK_DPTEG_FROM_L31_MOD = 0x000002F144, // A Page Table Entry was loaded into the TLB with Modified (M) data from another core's L3 on the same chip due to a marked data side request.
		PM_MRK_DPTEG_FROM_L31_SHR = 0x000001F146, // A Page Table Entry was loaded into the TLB with Shared (S) data from another core's L3 on the same chip due to a marked data side request.
		PM_MRK_DPTEG_FROM_L3_DISP_CONFLICT = 0x000003F142, // A Page Table Entry was loaded into the TLB from local core's L3 with dispatch conflict due to a marked data side request.
		PM_MRK_DPTEG_FROM_L3_MEPF = 0x000002F142, // A Page Table Entry was loaded into the TLB from local core's L3 without dispatch conflicts hit on Mepf state.
		PM_MRK_DPTEG_FROM_L3MISS = 0x000004F14E, // A Page Table Entry was loaded into the TLB from a location other than the local core's L3 due to a marked data side request.
		PM_MRK_DPTEG_FROM_L3_NO_CONFLICT = 0x000001F144, // A Page Table Entry was loaded into the TLB from local core's L3 without conflict due to a marked data side request.
		PM_MRK_DPTEG_FROM_L3 = 0x000004F142, // A Page Table Entry was loaded into the TLB from local core's L3 due to a marked data side request.
		PM_MRK_DPTEG_FROM_LL4 = 0x000001F14C, // A Page Table Entry was loaded into the TLB from the local chip's L4 cache due to a marked data side request.
		PM_MRK_DPTEG_FROM_LMEM = 0x000002F148, // A Page Table Entry was loaded into the TLB from the local chip's Memory due to a marked data side request.
		PM_MRK_DPTEG_FROM_MEMORY = 0x000002F14C, // A Page Table Entry was loaded into the TLB from a memory location including L4 from local remote or distant due to a marked data side request.
		PM_MRK_DPTEG_FROM_OFF_CHIP_CACHE = 0x000004F14A, // A Page Table Entry was loaded into the TLB either shared or modified data from another core's L2/L3 on a different chip (remote or distant) due to a marked data side request.
		PM_MRK_DPTEG_FROM_ON_CHIP_CACHE = 0x000001F148, // A Page Table Entry was loaded into the TLB either shared or modified data from another core's L2/L3 on the same chip due to a marked data side request.
		PM_MRK_DPTEG_FROM_RL2L3_MOD = 0x000002F146, // A Page Table Entry was loaded into the TLB with Modified (M) data from another chip's L2 or L3 on the same Node or Group (Remote)
		PM_MRK_DPTEG_FROM_RL2L3_SHR = 0x000001F14A, // A Page Table Entry was loaded into the TLB with Shared (S) data from another chip's L2 or L3 on the same Node or Group (Remote)
		PM_MRK_DPTEG_FROM_RL4 = 0x000002F14A, // A Page Table Entry was loaded into the TLB from another chip's L4 on the same Node or Group (Remote) due to a marked data side request.
		PM_MRK_DPTEG_FROM_RMEM = 0x000003F14A, // A Page Table Entry was loaded into the TLB from another chip's memory on the same Node or Group (Remote) due to a marked data side request.
		PM_MRK_DTLB_MISS_16G = 0x000002D15E, // Marked Data TLB Miss page size 16G
		PM_MRK_DTLB_MISS_16M = 0x000004C15E, // Marked Data TLB Miss page size 16M
		PM_MRK_DTLB_MISS_1G = 0x000001D15C, // Marked Data TLB reload (after a miss) page size 2M.
		PM_MRK_DTLB_MISS_4K = 0x000002D156, // Marked Data TLB Miss page size 4k
		PM_MRK_DTLB_MISS_64K = 0x000003D156, // Marked Data TLB Miss page size 64K
		PM_MRK_DTLB_MISS = 0x00000401E4, // Marked dtlb miss
		PM_MRK_FAB_RSP_BKILL_CYC = 0x000001F152, // cycles L2 RC took for a bkill
		PM_MRK_FAB_RSP_BKILL = 0x0000040154, // Marked store had to do a bkill
		PM_MRK_FAB_RSP_CLAIM_RTY = 0x000003015E, // Sampled store did a rwitm and got a rty
		PM_MRK_FAB_RSP_DCLAIM_CYC = 0x000002F152, // cycles L2 RC took for a dclaim
		PM_MRK_FAB_RSP_DCLAIM = 0x0000030154, // Marked store had to do a dclaim
		PM_MRK_FAB_RSP_RD_RTY = 0x000004015E, // Sampled L2 reads retry count
		PM_MRK_FAB_RSP_RD_T_INTV = 0x000001015E, // Sampled Read got a T intervention
		PM_MRK_FAB_RSP_RWITM_CYC = 0x000004F150, // cycles L2 RC took for a rwitm
		PM_MRK_FAB_RSP_RWITM_RTY = 0x000002015E, // Sampled store did a rwitm and got a rty
		PM_MRK_FXU_FIN = 0x0000020134, // fxu marked instr finish
		PM_MRK_IC_MISS = 0x000004013A, // Marked instruction experienced I cache miss
		PM_MRK_INST_CMPL = 0x00000401E0, // marked instruction completed
		PM_MRK_INST_DECODED = 0x0000020130, // An instruction was marked at decode time.
		PM_MRK_INST_DISP = 0x00000101E0, // The thread has dispatched a randomly sampled marked instruction
		PM_MRK_INST_FIN = 0x0000030130, // marked instruction finished
		PM_MRK_INST_FROM_L3MISS = 0x00000401E6, // Marked instruction was reloaded from a location beyond the local chiplet
		PM_MRK_INST_ISSUED = 0x0000010132, // Marked instruction issued
		PM_MRK_INST_TIMEO = 0x0000040134, // marked Instruction finish timeout (instruction lost)
		PM_MRK_INST = 0x0000024058, // An instruction was marked.
		PM_MRK_L1_ICACHE_MISS = 0x00000101E4, // sampled Instruction suffered an icache Miss
		PM_MRK_L1_RELOAD_VALID = 0x00000101EA, // Marked demand reload
		PM_MRK_L2_RC_DISP = 0x0000020114, // Marked Instruction RC dispatched in L2
		PM_MRK_L2_RC_DONE = 0x000003012A, // Marked RC done
		PM_MRK_L2_TM_REQ_ABORT = 0x000001E15E, // TM abort
		PM_MRK_L2_TM_ST_ABORT_SISTER = 0x000003E15C, // TM marked store abort for this thread
		PM_MRK_LARX_FIN = 0x0000040116, // Larx finished
		PM_MRK_LD_MISS_EXPOSED_CYC = 0x000001013E, // Marked Load exposed Miss (use edge detect to count #)
		PM_MRK_LD_MISS_L1_CYC = 0x000001D056, // Marked ld latency
		PM_MRK_LD_MISS_L1 = 0x00000201E2, // Marked DL1 Demand Miss counted at exec time.
		PM_MRK_LSU_DERAT_MISS = 0x0000030162, // Marked derat reload (miss) for any page size
		PM_MRK_LSU_FIN = 0x0000040132, // lsu marked instr PPC finish
		PM_MRK_LSU_FLUSH_ATOMIC = 0x000000D098, // Quad-word loads (lq) are considered atomic because they always span at least 2 slices.
		PM_MRK_LSU_FLUSH_EMSH = 0x000000D898, // An ERAT miss was detected after a set-p hit.
		PM_MRK_LSU_FLUSH_LARX_STCX = 0x000000D8A4, // A larx is flushed because an older larx has an LMQ reservation for the same thread.
		PM_MRK_LSU_FLUSH_LHL_SHL = 0x000000D8A0, // The instruction was flushed because of a sequential load/store consistency.
		PM_MRK_LSU_FLUSH_LHS = 0x000000D0A0, // Effective Address alias flush : no EA match but Real Address match.
		PM_MRK_LSU_FLUSH_RELAUNCH_MISS = 0x000000D09C, // If a load that has already returned data and has to relaunch for any reason then gets a miss (erat
		PM_MRK_LSU_FLUSH_SAO = 0x000000D0A4, // A load-hit-load condition with Strong Address Ordering will have address compare disabled and flush
		PM_MRK_LSU_FLUSH_UE = 0x000000D89C, // Correctable ECC error on reload data
		PM_MRK_NTC_CYC = 0x000002011C, // Cycles during which the marked instruction is next to complete (completion is held up because the marked instruction hasn't completed yet)
		PM_MRK_NTF_FIN = 0x0000020112, // Marked next to finish instruction finished
		PM_MRK_PROBE_NOP_CMPL = 0x000001F05E, // Marked probeNops completed
		PM_MRK_RUN_CYC = 0x000001D15E, // Run cycles in which a marked instruction is in the pipeline
		PM_MRK_STALL_CMPLU_CYC = 0x000003013E, // Number of cycles the marked instruction is experiencing a stall while it is next to complete (NTC)
		PM_MRK_ST_CMPL_INT = 0x0000030134, // marked store finished with intervention
		PM_MRK_ST_CMPL = 0x00000301E2, // Marked store completed and sent to nest
		PM_MRK_STCX_FAIL = 0x000003E158, // marked stcx failed
		PM_MRK_STCX_FIN = 0x0000024056, // Number of marked stcx instructions finished.
		PM_MRK_ST_DONE_L2 = 0x0000010134, // marked store completed in L2 (RC machine done)
		PM_MRK_ST_DRAIN_TO_L2DISP_CYC = 0x000003F150, // cycles to drain st from core to L2
		PM_MRK_ST_FWD = 0x000003012C, // Marked st forwards
		PM_MRK_ST_L2DISP_TO_CMPL_CYC = 0x000001F150, // cycles from L2 rc disp to l2 rc completion
		PM_MRK_ST_NEST = 0x0000020138, // Marked store sent to nest
		PM_MRK_TEND_FAIL = 0x00000028A4, // Nested or not nested tend failed for a marked tend instruction
		PM_MRK_VSU_FIN = 0x0000030132, // VSU marked instr finish
		PM_MULT_MRK = 0x000003D15E, // mult marked instr
		PM_NEST_REF_CLK = 0x000003006E, // Multiply by 4 to obtain the number of PB cycles
		PM_NON_DATA_STORE = 0x000000F8A0, // All ops that drain from s2q to L2 and contain no data
		PM_NON_FMA_FLOP_CMPL = 0x000004D056, // Non FMA instruction completed
		PM_NON_MATH_FLOP_CMPL = 0x000004D05A, // Non FLOP operation completed
		PM_NON_TM_RST_SC = 0x00000260A6, // Non-TM snp rst TM SC
		PM_NTC_ALL_FIN = 0x000002001A, // Cycles after all instructions have finished to group completed
		PM_NTC_FIN = 0x000002405A, // Cycles in which the oldest instruction in the pipeline (NTC) finishes.
		PM_NTC_ISSUE_HELD_ARB = 0x000002E016, // The NTC instruction is being held at dispatch because it lost arbitration onto the issue pipe to another instruction (from the same thread or a different thread)
		PM_NTC_ISSUE_HELD_DARQ_FULL = 0x000001006A, // The NTC instruction is being held at dispatch because there are no slots in the DARQ for it
		PM_NTC_ISSUE_HELD_OTHER = 0x000003D05A, // The NTC instruction is being held at dispatch during regular pipeline cycles
		PM_PARTIAL_ST_FIN = 0x0000034054, // Any store finished by an LSU slice
		PM_PMC1_OVERFLOW = 0x0000020010, // Overflow from counter 1
		PM_PMC1_REWIND = 0x000004D02C, // 
		PM_PMC1_SAVED = 0x000004D010, // PMC1 Rewind Value saved
		PM_PMC2_OVERFLOW = 0x0000030010, // Overflow from counter 2
		PM_PMC2_REWIND = 0x0000030020, // PMC2 Rewind Event (did not match condition)
		PM_PMC2_SAVED = 0x0000010022, // PMC2 Rewind Value saved
		PM_PMC3_OVERFLOW = 0x0000040010, // Overflow from counter 3
		PM_PMC3_REWIND = 0x000001000A, // PMC3 rewind event.
		PM_PMC3_SAVED = 0x000004D012, // PMC3 Rewind Value saved
		PM_PMC4_OVERFLOW = 0x0000010010, // Overflow from counter 4
		PM_PMC4_REWIND = 0x0000010020, // PMC4 Rewind Event
		PM_PMC4_SAVED = 0x0000030022, // PMC4 Rewind Value saved (matched condition)
		PM_PMC5_OVERFLOW = 0x0000010024, // Overflow from counter 5
		PM_PMC6_OVERFLOW = 0x0000030024, // Overflow from counter 6
		PM_PROBE_NOP_DISP = 0x0000040014, // ProbeNops dispatched
		PM_PTE_PREFETCH = 0x000000F084, // PTE prefetches
		PM_PTESYNC = 0x000000589C, // ptesync instruction counted when the instruction is decoded and transmitted
		PM_PUMP_CPRED = 0x0000010054, // Pump prediction correct.
		PM_PUMP_MPRED = 0x0000040052, // Pump misprediction.
		PM_RADIX_PWC_L1_HIT = 0x000001F056, // A radix translation attempt missed in the TLB and only the first level page walk cache was a hit.
		PM_RADIX_PWC_L1_PDE_FROM_L2 = 0x000002D026, // A Page Directory Entry was reloaded to a level 1 page walk cache from the core's L2 data cache
		PM_RADIX_PWC_L1_PDE_FROM_L3MISS = 0x000004F056, // A Page Directory Entry was reloaded to a level 1 page walk cache from beyond the core's L3 data cache.
		PM_RADIX_PWC_L1_PDE_FROM_L3 = 0x000003F058, // A Page Directory Entry was reloaded to a level 1 page walk cache from the core's L3 data cache
		PM_RADIX_PWC_L2_HIT = 0x000002D024, // A radix translation attempt missed in the TLB but hit on both the first and second levels of page walk cache.
		PM_RADIX_PWC_L2_PDE_FROM_L2 = 0x000002D028, // A Page Directory Entry was reloaded to a level 2 page walk cache from the core's L2 data cache
		PM_RADIX_PWC_L2_PDE_FROM_L3 = 0x000003F05A, // A Page Directory Entry was reloaded to a level 2 page walk cache from the core's L3 data cache
		PM_RADIX_PWC_L2_PTE_FROM_L2 = 0x000001F058, // A Page Table Entry was reloaded to a level 2 page walk cache from the core's L2 data cache.
		PM_RADIX_PWC_L2_PTE_FROM_L3MISS = 0x000004F05C, // A Page Table Entry was reloaded to a level 2 page walk cache from beyond the core's L3 data cache.
		PM_RADIX_PWC_L2_PTE_FROM_L3 = 0x000004F058, // A Page Table Entry was reloaded to a level 2 page walk cache from the core's L3 data cache.
		PM_RADIX_PWC_L3_HIT = 0x000003F056, // A radix translation attempt missed in the TLB but hit on the first
		PM_RADIX_PWC_L3_PDE_FROM_L2 = 0x000002D02A, // A Page Directory Entry was reloaded to a level 3 page walk cache from the core's L2 data cache
		PM_RADIX_PWC_L3_PDE_FROM_L3 = 0x000001F15C, // A Page Directory Entry was reloaded to a level 3 page walk cache from the core's L3 data cache
		PM_RADIX_PWC_L3_PTE_FROM_L2 = 0x000002D02E, // A Page Table Entry was reloaded to a level 3 page walk cache from the core's L2 data cache.
		PM_RADIX_PWC_L3_PTE_FROM_L3MISS = 0x000004F05E, // A Page Table Entry was reloaded to a level 3 page walk cache from beyond the core's L3 data cache.
		PM_RADIX_PWC_L3_PTE_FROM_L3 = 0x000003F05E, // A Page Table Entry was reloaded to a level 3 page walk cache from the core's L3 data cache.
		PM_RADIX_PWC_L4_PTE_FROM_L2 = 0x000001F05A, // A Page Table Entry was reloaded to a level 4 page walk cache from the core's L2 data cache.
		PM_RADIX_PWC_L4_PTE_FROM_L3MISS = 0x000003F054, // A Page Table Entry was reloaded to a level 4 page walk cache from beyond the core's L3 data cache.
		PM_RADIX_PWC_L4_PTE_FROM_L3 = 0x000004F05A, // A Page Table Entry was reloaded to a level 4 page walk cache from the core's L3 data cache.
		PM_RADIX_PWC_MISS = 0x000004F054, // A radix translation attempt missed in the TLB and all levels of page walk cache.
		PM_RC0_BUSY = 0x000001608C, // RC mach 0 Busy.
		PM_RC0_BUSY_ALT = 0x000002608C, // RC mach 0 Busy.
		PM_RC_USAGE = 0x000001688C, // Continuous 16 cycle (2to1) window where this signals rotates thru sampling each RC machine busy.
		PM_RD_CLEARING_SC = 0x00000468A6, // Read clearing SC
		PM_RD_FORMING_SC = 0x00000460A6, // Read forming SC
		PM_RD_HIT_PF = 0x00000268A8, // RD machine hit L3 PF machine
		PM_RUN_CYC_SMT2_MODE = 0x000003006C, // Cycles in which this thread's run latch is set and the core is in SMT2 mode
		PM_RUN_CYC_SMT4_MODE = 0x000002006C, // Cycles in which this thread's run latch is set and the core is in SMT4 mode
		PM_RUN_CYC_ST_MODE = 0x000001006C, // Cycles run latch is set and core is in ST mode
		PM_RUN_CYC = 0x00000200F4, // Run_cycles
		PM_RUN_INST_CMPL = 0x00000400FA, // Run_Instructions
		PM_RUN_PURR = 0x00000400F4, // Run_PURR
		PM_RUN_SPURR = 0x0000010008, // Run SPURR
		PM_S2Q_FULL = 0x000000E080, // Cycles during which the S2Q is full
		PM_SCALAR_FLOP_CMPL = 0x0000045056, // Scalar flop operation completed
		PM_SHL_CREATED = 0x000000508C, // Store-Hit-Load Table Entry Created
		PM_SHL_ST_DEP_CREATED = 0x000000588C, // Store-Hit-Load Table Read Hit with entry Enabled
		PM_SHL_ST_DISABLE = 0x0000005090, // Store-Hit-Load Table Read Hit with entry Disabled (entry was disabled due to the entry shown to not prevent the flush)
		PM_SLB_TABLEWALK_CYC = 0x000000F09C, // Cycles when a tablewalk is pending on this thread on the SLB table
		PM_SN0_BUSY = 0x0000016090, // SN mach 0 Busy.
		PM_SN0_BUSY_ALT = 0x0000026090, // SN mach 0 Busy.
		PM_SN_HIT = 0x00000460A8, // Any port snooper hit L3.
		PM_SN_INVL = 0x00000368A8, // Any port snooper detects a store to a line in the Sx state and invalidates the line.
		PM_SN_MISS = 0x00000468A8, // Any port snooper L3 miss or collision.
		PM_SNOOP_TLBIE = 0x000000F880, // TLBIE snoop
		PM_SNP_TM_HIT_M = 0x00000360A6, // Snp TM st hit M/Mu
		PM_SNP_TM_HIT_T = 0x00000368A6, // Snp TM sthit T/Tn/Te
		PM_SN_USAGE = 0x000003688C, // Continuous 16 cycle (2to1) window where this signals rotates thru sampling each SN machine busy.
		PM_SP_FLOP_CMPL = 0x000004505A, // SP instruction completed
		PM_SRQ_EMPTY_CYC = 0x0000040008, // Cycles in which the SRQ has at least one (out of four) empty slice
		PM_SRQ_SYNC_CYC = 0x000000D0AC, // A sync is in the S2Q (edge detect to count)
		PM_STALL_END_ICT_EMPTY = 0x0000010028, // The number a times the core transitioned from a stall to ICT-empty for this thread
		PM_ST_CAUSED_FAIL = 0x000001608E, // Non-TM Store caused any thread to fail
		PM_ST_CMPL = 0x00000200F0, // Stores completed from S2Q (2nd-level store queue).
		PM_STCX_FAIL = 0x000001E058, // stcx failed
		PM_STCX_FIN = 0x000002E014, // Number of stcx instructions finished.
		PM_STCX_SUCCESS_CMPL = 0x000000C8BC, // Number of stcx instructions that completed successfully
		PM_ST_FIN = 0x0000020016, // Store finish count.
		PM_ST_FWD = 0x0000020018, // Store forwards that finished
		PM_ST_MISS_L1 = 0x00000300F0, // Store Missed L1
		PM_STOP_FETCH_PENDING_CYC = 0x00000048A4, // Fetching is stopped due to an incoming instruction that will result in a flush
		PM_SUSPENDED = 0x0000010000, // Counter OFF
		PM_SYNC_MRK_BR_LINK = 0x0000015152, // Marked Branch and link branch that can cause a synchronous interrupt
		PM_SYNC_MRK_BR_MPRED = 0x000001515C, // Marked Branch mispredict that can cause a synchronous interrupt
		PM_SYNC_MRK_FX_DIVIDE = 0x0000015156, // Marked fixed point divide that can cause a synchronous interrupt
		PM_SYNC_MRK_L2HIT = 0x0000015158, // Marked L2 Hits that can throw a synchronous interrupt
		PM_SYNC_MRK_L2MISS = 0x000001515A, // Marked L2 Miss that can throw a synchronous interrupt
		PM_SYNC_MRK_L3MISS = 0x0000015154, // Marked L3 misses that can throw a synchronous interrupt
		PM_SYNC_MRK_PROBE_NOP = 0x0000015150, // Marked probeNops which can cause synchronous interrupts
		PM_SYS_PUMP_CPRED = 0x0000030050, // Initial and Final Pump Scope was system pump for all data types excluding data prefetch (demand load
		PM_SYS_PUMP_MPRED_RTY = 0x0000040050, // Final Pump Scope (system) ended up larger than Initial Pump Scope (Chip/Group) for all data types excluding data prefetch (demand load
		PM_SYS_PUMP_MPRED = 0x0000030052, // Final Pump Scope (system) mispredicted.
		PM_TABLEWALK_CYC_PREF = 0x000000F884, // tablewalk qualified for pte prefetches
		PM_TABLEWALK_CYC = 0x0000010026, // Cycles when an instruction tablewalk is active
		PM_TAGE_CORRECT_TAKEN_CMPL = 0x00000050B4, // The TAGE overrode BHT direction prediction and it was correct.
		PM_TAGE_CORRECT = 0x00000058B4, // The TAGE overrode BHT direction prediction and it was correct.
		PM_TAGE_OVERRIDE_WRONG_SPEC = 0x00000058B8, // The TAGE overrode BHT direction prediction and it was correct.
		PM_TAGE_OVERRIDE_WRONG = 0x00000050B8, // The TAGE overrode BHT direction prediction but it was incorrect.
		PM_TAKEN_BR_MPRED_CMPL = 0x0000020056, // Total number of taken branches that were incorrectly predicted as not-taken.
		PM_TB_BIT_TRANS = 0x00000300F8, // timebase event
		PM_TEND_PEND_CYC = 0x000000E8B0, // TEND latency per thread
		PM_THRD_ALL_RUN_CYC = 0x000002000C, // Cycles in which all the threads have the run latch set
		PM_THRD_CONC_RUN_INST = 0x00000300F4, // PPC Instructions Finished by this thread when all threads in the core had the run-latch set
		PM_THRD_PRIO_0_1_CYC = 0x00000040BC, // Cycles thread running at priority level 0 or 1
		PM_THRD_PRIO_2_3_CYC = 0x00000048BC, // Cycles thread running at priority level 2 or 3
		PM_THRD_PRIO_4_5_CYC = 0x0000005080, // Cycles thread running at priority level 4 or 5
		PM_THRD_PRIO_6_7_CYC = 0x0000005880, // Cycles thread running at priority level 6 or 7
		PM_THRESH_ACC = 0x0000024154, // This event increments every time the threshold event counter ticks.
		PM_THRESH_EXC_1024 = 0x00000301EA, // Threshold counter exceeded a value of 1024
		PM_THRESH_EXC_128 = 0x00000401EA, // Threshold counter exceeded a value of 128
		PM_THRESH_EXC_2048 = 0x00000401EC, // Threshold counter exceeded a value of 2048
		PM_THRESH_EXC_256 = 0x00000101E8, // Threshold counter exceed a count of 256
		PM_THRESH_EXC_32 = 0x00000201E6, // Threshold counter exceeded a value of 32
		PM_THRESH_EXC_4096 = 0x00000101E6, // Threshold counter exceed a count of 4096
		PM_THRESH_EXC_512 = 0x00000201E8, // Threshold counter exceeded a value of 512
		PM_THRESH_EXC_64 = 0x00000301E8, // Threshold counter exceeded a value of 64
		PM_THRESH_MET = 0x00000101EC, // threshold exceeded
		PM_THRESH_NOT_MET = 0x000004016E, // Threshold counter did not meet threshold
		PM_TLB_HIT = 0x000001F054, // Number of times the TLB had the data required by the instruction.
		PM_TLBIE_FIN = 0x0000030058, // tlbie finished
		PM_TLB_MISS = 0x0000020066, // TLB Miss (I + D)
		PM_TM_ABORTS = 0x0000030056, // Number of TM transactions aborted
		PM_TMA_REQ_L2 = 0x000000E0A4, // addrs only req to L2 only on the first one
		PM_TM_CAM_OVERFLOW = 0x00000168A6, // L3 TM cam overflow during L2 co of SC
		PM_TM_CAP_OVERFLOW = 0x000004608E, // TM Footprint Capacity Overflow
		PM_TM_FAIL_CONF_NON_TM = 0x00000028A8, // TM aborted because a conflict occurred with a non-transactional access by another processor
		PM_TM_FAIL_CONF_TM = 0x00000020AC, // TM aborted because a conflict occurred with another transaction.
		PM_TM_FAIL_FOOTPRINT_OVERFLOW = 0x00000020A8, // TM aborted because the tracking limit for transactional storage accesses was exceeded.
		PM_TM_FAIL_NON_TX_CONFLICT = 0x000000E0B0, // Non transactional conflict from LSU
		PM_TM_FAIL_SELF = 0x00000028AC, // TM aborted because a self-induced conflict occurred in Suspended state
		PM_TM_FAIL_TLBIE = 0x000000E0AC, // Transaction failed because there was a TLBIE hit in the bloom filter
		PM_TM_FAIL_TX_CONFLICT = 0x000000E8AC, // Transactional conflict from LSU
		PM_TM_FAV_CAUSED_FAIL = 0x000002688E, // TM Load (fav) caused another thread to fail
		PM_TM_FAV_TBEGIN = 0x000000209C, // Dispatch time Favored tbegin
		PM_TM_LD_CAUSED_FAIL = 0x000001688E, // Non-TM Load caused any thread to fail
		PM_TM_LD_CONF = 0x000002608E, // TM Load (fav or non-fav) ran into conflict (failed)
		PM_TM_NESTED_TBEGIN = 0x00000020A0, // Completion Tm nested tbegin
		PM_TM_NESTED_TEND = 0x0000002098, // Completion time nested tend
		PM_TM_NON_FAV_TBEGIN = 0x000000289C, // Dispatch time non favored tbegin
		PM_TM_OUTER_TBEGIN_DISP = 0x000004E05E, // Number of outer tbegin instructions dispatched.
		PM_TM_OUTER_TBEGIN = 0x0000002094, // Completion time outer tbegin
		PM_TM_OUTER_TEND = 0x0000002894, // Completion time outer tend
		PM_TM_PASSED = 0x000002E052, // Number of TM transactions that passed
		PM_TM_RST_SC = 0x00000268A6, // TM-snp rst RM SC
		PM_TM_SC_CO = 0x00000160A6, // L3 castout TM SC line
		PM_TM_ST_CAUSED_FAIL = 0x000003688E, // TM Store (fav or non-fav) caused another thread to fail
		PM_TM_ST_CONF = 0x000003608E, // TM Store (fav or non-fav) ran into conflict (failed)
		PM_TM_TABORT_TRECLAIM = 0x0000002898, // Completion time tabortnoncd
		PM_TM_TRANS_RUN_CYC = 0x0000010060, // run cycles in transactional state
		PM_TM_TRANS_RUN_INST = 0x0000030060, // Run instructions completed in transactional state (gated by the run latch)
		PM_TM_TRESUME = 0x00000020A4, // TM resume instruction completed
		PM_TM_TSUSPEND = 0x00000028A0, // TM suspend instruction completed
		PM_TM_TX_PASS_RUN_CYC = 0x000002E012, // cycles spent in successful transactions
		PM_TM_TX_PASS_RUN_INST = 0x000004E014, // Run instructions spent in successful transactions
		PM_VECTOR_FLOP_CMPL = 0x000004D058, // Vector FP instruction completed
		PM_VECTOR_LD_CMPL = 0x0000044054, // Number of vector load instructions completed
		PM_VECTOR_ST_CMPL = 0x0000044056, // Number of vector store instructions completed
		PM_VSU_DP_FSQRT_FDIV = 0x000003D058, // vector versions of fdiv
		PM_VSU_FIN = 0x000002505C, // VSU instruction finished.
		PM_VSU_FSQRT_FDIV = 0x000004D04E, // four flops operation (fdiv
		PM_VSU_NON_FLOP_CMPL = 0x000004D050, // Non FLOP operation completed
		PM_XLATE_HPT_MODE = 0x000000F098, // LSU reports every cycle the thread is in HPT translation mode (as opposed to radix mode)
		PM_XLATE_MISS = 0x000000F89C, // The LSU requested a line from L2 for translation.
		PM_XLATE_RADIX_MODE = 0x000000F898, // LSU reports every cycle the thread is in radix translation mode (as opposed to HPT mode)
		PM_BR_2PATH_ALT = 0x0000040036, // Branches that are not strongly biased
		PM_CYC_ALT = 0x000002001E, // Processor cycles
		PM_CYC_ALT2 = 0x000003001E, // Processor cycles
		PM_CYC_ALT3 = 0x000004001E, // Processor cycles
		PM_INST_CMPL_ALT = 0x0000020002, // Number of PowerPC Instructions that completed.
		PM_INST_CMPL_ALT2 = 0x0000030002, // Number of PowerPC Instructions that completed.
		PM_INST_CMPL_ALT3 = 0x0000040002, // Number of PowerPC Instructions that completed.
		PM_INST_DISP_ALT = 0x00000300F2, // # PPC Dispatched
		PM_LD_MISS_L1_ALT = 0x00000400F0, // Load Missed L1
		PM_SUSPENDED_ALT = 0x0000020000, // Counter OFF
		PM_SUSPENDED_ALT2 = 0x0000030000, // Counter OFF
		PM_SUSPENDED_ALT3 = 0x0000040000, // Counter OFF
		
	};
};