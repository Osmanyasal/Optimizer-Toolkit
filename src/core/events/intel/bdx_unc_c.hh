#include <cstdint>

namespace optkit_intel{
	enum class bdx_unc_c : uint64_t {
		UNC_C_BOUNCE_CONTROL = 0xa, // TBD
		UNC_C_CLOCKTICKS = 0x0, // Clock ticks
		UNC_C_COUNTER0_OCCUPANCY = 0x1f, // Since occupancy counts can only be captured in the Cbos 0 counter
		UNC_C_FAST_ASSERTED = 0x9, // Counts the number of cycles either the local distress or incoming distress signals are asserted.  Incoming distress includes both up and dn.
		UNC_C_LLC_LOOKUP = 0x34, // Counts the number of times the LLC was accessed - this includes code
		UNC_C_LLC_LOOKUP_MASK_ANY = 0x1100, // Cache Lookups -- Any Request
		UNC_C_LLC_LOOKUP_MASK_DATA_READ = 0x300, // Cache Lookups -- Data Read Request
		UNC_C_LLC_LOOKUP_MASK_NID = 0x4100, // Cache Lookups -- Lookups that Match NID
		UNC_C_LLC_LOOKUP_MASK_READ = 0x2100, // Cache Lookups -- Any Read Request
		UNC_C_LLC_LOOKUP_MASK_REMOTE_SNOOP = 0x900, // Cache Lookups -- External Snoop Request
		UNC_C_LLC_LOOKUP_MASK_WRITE = 0x500, // Cache Lookups -- Write Requests
		UNC_C_LLC_VICTIMS = 0x37, // Counts the number of lines that were victimized on a fill.  This can be filtered by the state that the line was in.
		UNC_C_LLC_VICTIMS_MASK_F_STATE = 0x800, // Lines in Forward state
		UNC_C_LLC_VICTIMS_MASK_I_STATE = 0x400, // Lines in S State
		UNC_C_LLC_VICTIMS_MASK_S_STATE = 0x400, // Lines in S state
		UNC_C_LLC_VICTIMS_MASK_E_STATE = 0x200, // Lines in E state
		UNC_C_LLC_VICTIMS_MASK_M_STATE = 0x100, // Lines in M state
		UNC_C_LLC_VICTIMS_MASK_MISS = 0x1000, // Lines Victimized
		UNC_C_LLC_VICTIMS_MASK_NID = 0x4000, // Lines Victimized -- Victimized Lines that Match NID
		UNC_C_MISC = 0x39, // Miscellaneous events in the Cbo.
		UNC_C_MISC_MASK_CVZERO_PREFETCH_MISS = 0x2000, // 0
		UNC_C_MISC_MASK_CVZERO_PREFETCH_VICTIM = 0x1000, // 0
		UNC_C_MISC_MASK_RFO_HIT_S = 0x800, // Cbo Misc -- RFO HitS
		UNC_C_MISC_MASK_RSPI_WAS_FSE = 0x100, // Cbo Misc -- Silent Snoop Eviction
		UNC_C_MISC_MASK_STARTED = 0x400, // Cbo Misc --
		UNC_C_MISC_MASK_WC_ALIASING = 0x200, // Cbo Misc -- Write Combining Aliasing
		UNC_C_RING_AD_USED = 0x1b, // Counts the number of cycles that the AD ring is being used at this ring stop.  This includes when packets are passing by and when packets are being sunk
		UNC_C_RING_AD_USED_MASK_ALL = 0xf00, // AD Ring In Use -- All
		UNC_C_RING_AD_USED_MASK_CCW = 0xc00, // AD Ring In Use -- Down
		UNC_C_RING_AD_USED_MASK_CW = 0x300, // AD Ring In Use -- Up
		UNC_C_RING_AD_USED_MASK_DOWN_EVEN = 0x400, // AD Ring In Use -- Down and Even
		UNC_C_RING_AD_USED_MASK_DOWN_ODD = 0x800, // AD Ring In Use -- Down and Odd
		UNC_C_RING_AD_USED_MASK_UP_EVEN = 0x100, // AD Ring In Use -- Up and Even
		UNC_C_RING_AD_USED_MASK_UP_ODD = 0x200, // AD Ring In Use -- Up and Odd
		UNC_C_RING_AK_USED = 0x1c, // Counts the number of cycles that the AK ring is being used at this ring stop.  This includes when packets are passing by and when packets are being sunk
		UNC_C_RING_AK_USED_MASK_ALL = 0xf00, // AK Ring In Use -- All
		UNC_C_RING_AK_USED_MASK_CCW = 0xc00, // AK Ring In Use -- Down
		UNC_C_RING_AK_USED_MASK_CW = 0x300, // AK Ring In Use -- Up
		UNC_C_RING_AK_USED_MASK_DOWN_EVEN = 0x400, // AK Ring In Use -- Down and Even
		UNC_C_RING_AK_USED_MASK_DOWN_ODD = 0x800, // AK Ring In Use -- Down and Odd
		UNC_C_RING_AK_USED_MASK_UP_EVEN = 0x100, // AK Ring In Use -- Up and Even
		UNC_C_RING_AK_USED_MASK_UP_ODD = 0x200, // AK Ring In Use -- Up and Odd
		UNC_C_RING_BL_USED = 0x1d, // Counts the number of cycles that the BL ring is being used at this ring stop.  This includes when packets are passing by and when packets are being sunk
		UNC_C_RING_BL_USED_MASK_ALL = 0xf00, // BL Ring in Use -- Down
		UNC_C_RING_BL_USED_MASK_CCW = 0xc00, // BL Ring in Use -- Down
		UNC_C_RING_BL_USED_MASK_CW = 0x300, // BL Ring in Use -- Up
		UNC_C_RING_BL_USED_MASK_DOWN_EVEN = 0x400, // BL Ring in Use -- Down and Even
		UNC_C_RING_BL_USED_MASK_DOWN_ODD = 0x800, // BL Ring in Use -- Down and Odd
		UNC_C_RING_BL_USED_MASK_UP_EVEN = 0x100, // BL Ring in Use -- Up and Even
		UNC_C_RING_BL_USED_MASK_UP_ODD = 0x200, // BL Ring in Use -- Up and Odd
		UNC_C_RING_BOUNCES = 0x5, // TBD
		UNC_C_RING_BOUNCES_MASK_AD = 0x100, // Number of LLC responses that bounced on the Ring. -- AD
		UNC_C_RING_BOUNCES_MASK_AK = 0x200, // Number of LLC responses that bounced on the Ring. -- AK
		UNC_C_RING_BOUNCES_MASK_BL = 0x400, // Number of LLC responses that bounced on the Ring. -- BL
		UNC_C_RING_BOUNCES_MASK_IV = 0x1000, // Number of LLC responses that bounced on the Ring. -- Snoops of processors cachee.
		UNC_C_RING_IV_USED = 0x1e, // Counts the number of cycles that the IV ring is being used at this ring stop.  This includes when packets are passing by and when packets are being sunk
		UNC_C_RING_IV_USED_MASK_ANY = 0xf00, // BL Ring in Use -- Any
		UNC_C_RING_IV_USED_MASK_DN = 0xc00, // BL Ring in Use -- Any
		UNC_C_RING_IV_USED_MASK_DOWN = 0xcc00, // BL Ring in Use -- Down
		UNC_C_RING_IV_USED_MASK_UP = 0x300, // BL Ring in Use -- Any
		UNC_C_RING_SRC_THRTL = 0x7, // TBD
		UNC_C_RXR_EXT_STARVED = 0x12, // Counts cycles in external starvation.  This occurs when one of the ingress queues is being starved by the other queues.
		UNC_C_RXR_EXT_STARVED_MASK_IPQ = 0x200, // Ingress Arbiter Blocking Cycles -- IRQ
		UNC_C_RXR_EXT_STARVED_MASK_IRQ = 0x100, // Ingress Arbiter Blocking Cycles -- IPQ
		UNC_C_RXR_EXT_STARVED_MASK_ISMQ_BIDS = 0x800, // Ingress Arbiter Blocking Cycles -- ISMQ_BID
		UNC_C_RXR_EXT_STARVED_MASK_PRQ = 0x400, // Ingress Arbiter Blocking Cycles -- PRQ
		UNC_C_RXR_INSERTS = 0x13, // Counts number of allocations per cycle into the specified Ingress queue.
		UNC_C_RXR_INSERTS_MASK_IPQ = 0x400, // Ingress Allocations -- IPQ
		UNC_C_RXR_INSERTS_MASK_IRQ = 0x100, // Ingress Allocations -- IRQ
		UNC_C_RXR_INSERTS_MASK_IRQ_REJ = 0x200, // Ingress Allocations -- IRQ Rejected
		UNC_C_RXR_INSERTS_MASK_PRQ = 0x1000, // Ingress Allocations -- PRQ
		UNC_C_RXR_INSERTS_MASK_PRQ_REJ = 0x2000, // Ingress Allocations -- PRQ
		UNC_C_RXR_IPQ_RETRY = 0x31, // Number of times a snoop (probe) request had to retry.  Filters exist to cover some of the common cases retries.
		UNC_C_RXR_IPQ_RETRY_MASK_ADDR_CONFLICT = 0x400, // Probe Queue Retries -- Address Conflict
		UNC_C_RXR_IPQ_RETRY_MASK_ANY = 0x100, // Probe Queue Retries -- Any Reject
		UNC_C_RXR_IPQ_RETRY_MASK_FULL = 0x200, // Probe Queue Retries -- No Egress Credits
		UNC_C_RXR_IPQ_RETRY_MASK_QPI_CREDITS = 0x1000, // Probe Queue Retries -- No QPI Credits
		UNC_C_RXR_IPQ_RETRY2 = 0x28, // Number of times a snoop (probe) request had to retry.  Filters exist to cover some of the common cases retries.
		UNC_C_RXR_IPQ_RETRY2_MASK_AD_SBO = 0x100, // Probe Queue Retries -- No AD Sbo Credits
		UNC_C_RXR_IPQ_RETRY2_MASK_TARGET = 0x4000, // Probe Queue Retries -- Target Node Filter
		UNC_C_RXR_IRQ_RETRY = 0x32, // TBD
		UNC_C_RXR_IRQ_RETRY_MASK_ADDR_CONFLICT = 0x400, // Ingress Request Queue Rejects -- Address Conflict
		UNC_C_RXR_IRQ_RETRY_MASK_ANY = 0x100, // Ingress Request Queue Rejects -- Any Reject
		UNC_C_RXR_IRQ_RETRY_MASK_FULL = 0x200, // Ingress Request Queue Rejects -- No Egress Credits
		UNC_C_RXR_IRQ_RETRY_MASK_IIO_CREDITS = 0x2000, // Ingress Request Queue Rejects -- No IIO Credits
		UNC_C_RXR_IRQ_RETRY_MASK_NID = 0x4000, // Ingress Request Queue Rejects --
		UNC_C_RXR_IRQ_RETRY_MASK_QPI_CREDITS = 0x1000, // Ingress Request Queue Rejects -- No QPI Credits
		UNC_C_RXR_IRQ_RETRY_MASK_RTID = 0x800, // Ingress Request Queue Rejects -- No RTIDs
		UNC_C_RXR_IRQ_RETRY2 = 0x29, // TBD
		UNC_C_RXR_IRQ_RETRY2_MASK_AD_SBO = 0x100, // Ingress Request Queue Rejects -- No AD Sbo Credits
		UNC_C_RXR_IRQ_RETRY2_MASK_BL_SBO = 0x200, // Ingress Request Queue Rejects -- No BL Sbo Credits
		UNC_C_RXR_IRQ_RETRY2_MASK_TARGET = 0x4000, // Ingress Request Queue Rejects -- Target Node Filter
		UNC_C_RXR_ISMQ_RETRY = 0x33, // Number of times a transaction flowing through the ISMQ had to retry.  Transaction pass through the ISMQ as responses for requests that already exist in the Cbo.  Some examples include: when data is returned or when snoop responses come back from the cores.
		UNC_C_RXR_ISMQ_RETRY_MASK_ANY = 0x100, // ISMQ Retries -- Any Reject
		UNC_C_RXR_ISMQ_RETRY_MASK_FULL = 0x200, // ISMQ Retries -- No Egress Credits
		UNC_C_RXR_ISMQ_RETRY_MASK_IIO_CREDITS = 0x2000, // ISMQ Retries -- No IIO Credits
		UNC_C_RXR_ISMQ_RETRY_MASK_NID = 0x4000, // ISMQ Retries --
		UNC_C_RXR_ISMQ_RETRY_MASK_QPI_CREDITS = 0x1000, // ISMQ Retries -- No QPI Credits
		UNC_C_RXR_ISMQ_RETRY_MASK_RTID = 0x800, // ISMQ Retries -- No RTIDs
		UNC_C_RXR_ISMQ_RETRY_MASK_WB_CREDITS = 0x8000, // ISMQ Retries --
		UNC_C_RXR_ISMQ_RETRY2 = 0x2a, // TBD
		UNC_C_RXR_ISMQ_RETRY2_MASK_AD_SBO = 0x100, // ISMQ Request Queue Rejects -- No AD Sbo Credits
		UNC_C_RXR_ISMQ_RETRY2_MASK_BL_SBO = 0x200, // ISMQ Request Queue Rejects -- No BL Sbo Credits
		UNC_C_RXR_ISMQ_RETRY2_MASK_TARGET = 0x4000, // ISMQ Request Queue Rejects -- Target Node Filter
		UNC_C_RXR_OCCUPANCY = 0x11, // Counts number of entries in the specified Ingress queue in each cycle.
		UNC_C_RXR_OCCUPANCY_MASK_IPQ = 0x400, // Ingress Occupancy -- IPQ
		UNC_C_RXR_OCCUPANCY_MASK_IRQ = 0x100, // Ingress Occupancy -- IRQ
		UNC_C_RXR_OCCUPANCY_MASK_IRQ_REJ = 0x200, // Ingress Occupancy -- IRQ Rejected
		UNC_C_RXR_OCCUPANCY_MASK_PRQ_REJ = 0x2000, // Ingress Occupancy -- PRQ Rejects
		UNC_C_SBO_CREDITS_ACQUIRED = 0x3d, // Number of Sbo credits acquired in a given cycle
		UNC_C_SBO_CREDITS_ACQUIRED_MASK_AD = 0x100, // SBo Credits Acquired -- For AD Ring
		UNC_C_SBO_CREDITS_ACQUIRED_MASK_BL = 0x200, // SBo Credits Acquired -- For BL Ring
		UNC_C_SBO_CREDIT_OCCUPANCY = 0x3e, // Number of Sbo credits in use in a given cycle
		UNC_C_SBO_CREDIT_OCCUPANCY_MASK_AD = 0x100, // SBo Credits Occupancy -- For AD Ring
		UNC_C_SBO_CREDIT_OCCUPANCY_MASK_BL = 0x200, // SBo Credits Occupancy -- For BL Ring
		UNC_C_TOR_INSERTS = 0x35, // Counts the number of entries successfully inserted into the TOR that match qualifications specified by the subevent.  There are a number of subevent filters but only a subset of the subevent combinations are valid.  Subevents that require an opcode or NID match require the Cn_MSR_PMON_BOX_FILTER.opc
		UNC_C_TOR_INSERTS_MASK_ALL = 0x800, // All
		UNC_C_TOR_INSERTS_MASK_EVICTION = 0x400, // Evictions
		UNC_C_TOR_INSERTS_MASK_LOCAL = 0x2800, // Local Memory
		UNC_C_TOR_INSERTS_MASK_LOCAL_OPCODE = 0x2100, // Local Memory - Opcode Matched
		UNC_C_TOR_INSERTS_MASK_MISS_LOCAL = 0x2a00, // Misses to Local Memory
		UNC_C_TOR_INSERTS_MASK_MISS_LOCAL_OPCODE = 0x2300, // Misses to Local Memory - Opcode Matched
		UNC_C_TOR_INSERTS_MASK_MISS_OPCODE = 0x300, // Miss Opcode Match
		UNC_C_TOR_INSERTS_MASK_MISS_REMOTE = 0x8a00, // Misses to Remote Memory
		UNC_C_TOR_INSERTS_MASK_MISS_REMOTE_OPCODE = 0x8300, // Misses to Remote Memory - Opcode Matched
		UNC_C_TOR_INSERTS_MASK_NID_ALL = 0x4800, // NID Matched
		UNC_C_TOR_INSERTS_MASK_NID_EVICTION = 0x4400, // NID Matched Evictions
		UNC_C_TOR_INSERTS_MASK_NID_MISS_ALL = 0x4a00, // NID Matched Miss All
		UNC_C_TOR_INSERTS_MASK_NID_MISS_OPCODE = 0x4300, // NID and Opcode Matched Miss
		UNC_C_TOR_INSERTS_MASK_NID_OPCODE = 0x4100, // NID and Opcode Matched
		UNC_C_TOR_INSERTS_MASK_NID_WB = 0x5000, // NID Matched Writebacks
		UNC_C_TOR_INSERTS_MASK_OPCODE = 0x100, // Opcode Match
		UNC_C_TOR_INSERTS_MASK_REMOTE = 0x8800, // Remote Memory
		UNC_C_TOR_INSERTS_MASK_REMOTE_OPCODE = 0x8100, // Remote Memory - Opcode Matched
		UNC_C_TOR_INSERTS_MASK_WB = 0x1000, // Writebacks
		UNC_C_TOR_OCCUPANCY = 0x36, // For each cycle
		UNC_C_TOR_OCCUPANCY_MASK_ALL = 0x800, // Any
		UNC_C_TOR_OCCUPANCY_MASK_EVICTION = 0x400, // Evictions
		UNC_C_TOR_OCCUPANCY_MASK_LOCAL = 0x2800, // Number of transactions in the TOR that are satisfied by locally homed memory
		UNC_C_TOR_OCCUPANCY_MASK_LOCAL_OPCODE = 0x2100, // Local Memory - Opcode Matched
		UNC_C_TOR_OCCUPANCY_MASK_MISS_ALL = 0xa00, // Miss All
		UNC_C_TOR_OCCUPANCY_MASK_MISS_LOCAL = 0x2a00, // Number of miss transactions in the TOR that are satisfied by locally homed memory
		UNC_C_TOR_OCCUPANCY_MASK_MISS_LOCAL_OPCODE = 0x2300, // Number of miss opcode-matched transactions inserted into the TOR that are satisfied by locally homed memory
		UNC_C_TOR_OCCUPANCY_MASK_MISS_OPCODE = 0x300, // Number of miss transactions inserted into the TOR that match an opcode (must provide opc_* umask)
		UNC_C_TOR_OCCUPANCY_MASK_MISS_REMOTE_OPCODE = 0x8300, // Number of miss opcode-matched transactions inserted into the TOR that are satisfied by remote caches or memory
		UNC_C_TOR_OCCUPANCY_MASK_NID_ALL = 0x4800, // X modifier)
		UNC_C_TOR_OCCUPANCY_MASK_NID_EVICTION = 0x4400, // X modifier)
		UNC_C_TOR_OCCUPANCY_MASK_NID_MISS_ALL = 0x4a00, // X modifier)
		UNC_C_TOR_OCCUPANCY_MASK_NID_MISS_OPCODE = 0x4300, // X modifier)
		UNC_C_TOR_OCCUPANCY_MASK_NID_OPCODE = 0x4100, // X modifier)
		UNC_C_TOR_OCCUPANCY_MASK_NID_WB = 0x5000, // X modifier)
		UNC_C_TOR_OCCUPANCY_MASK_OPCODE = 0x100, // Number of transactions inserted into the TOR that match an opcode (must provide opc_* umask)
		UNC_C_TOR_OCCUPANCY_MASK_REMOTE = 0x8800, // Number of transactions inserted into the TOR that are satisfied by remote caches or memory
		UNC_C_TOR_OCCUPANCY_MASK_REMOTE_OPCODE = 0x8100, // Number of opcode-matched transactions inserted into the TOR that are satisfied by remote caches or memory
		UNC_C_TOR_OCCUPANCY_MASK_WB = 0x1000, // Number of write transactions inserted into the TOR
		UNC_C_TOR_OCCUPANCY_MASK_MISS_REMOTE = 0x8a00, // Number of miss transactions inserted into the TOR that are satisfied by remote caches or memory
		UNC_C_TXR_ADS_USED = 0x4, // TBD
		UNC_C_TXR_ADS_USED_MASK_AD = 0x100, // Onto AD Ring
		UNC_C_TXR_ADS_USED_MASK_AK = 0x200, // Onto AK Ring
		UNC_C_TXR_ADS_USED_MASK_BL = 0x400, // Onto BL Ring
		UNC_C_TXR_INSERTS = 0x2, // Number of allocations into the Cbo Egress.  The Egress is used to queue up requests destined for the ring.
		UNC_C_TXR_INSERTS_MASK_AD_CACHE = 0x100, // Egress Allocations -- AD - Cachebo
		UNC_C_TXR_INSERTS_MASK_AD_CORE = 0x1000, // Egress Allocations -- AD - Corebo
		UNC_C_TXR_INSERTS_MASK_AK_CACHE = 0x200, // Egress Allocations -- AK - Cachebo
		UNC_C_TXR_INSERTS_MASK_AK_CORE = 0x2000, // Egress Allocations -- AK - Corebo
		UNC_C_TXR_INSERTS_MASK_BL_CACHE = 0x400, // Egress Allocations -- BL - Cacheno
		UNC_C_TXR_INSERTS_MASK_BL_CORE = 0x4000, // Egress Allocations -- BL - Corebo
		UNC_C_TXR_INSERTS_MASK_IV_CACHE = 0x800, // Egress Allocations -- IV - Cachebo
		
	};
};