#include <cstdint>
#include <intel_priv.hh>
namespace optkit::intel{
	enum class skx_unc_c : uint64_t {
		UNC_C_AG0_AD_CRD_ACQUIRED = 0x80, // Number of CMS Agent 0 AD credits acquired in a given cycle
		UNC_C_AG0_AD_CRD_ACQUIRED__MASK__SKX_UNC_C_AG0_AD_CRD_ACQUIRED__TGR0 = 0x100, // CMS Agent0 AD Credits Acquired -- For Transgress 0
		UNC_C_AG0_AD_CRD_ACQUIRED__MASK__SKX_UNC_C_AG0_AD_CRD_ACQUIRED__TGR1 = 0x200, // CMS Agent0 AD Credits Acquired -- For Transgress 1
		UNC_C_AG0_AD_CRD_ACQUIRED__MASK__SKX_UNC_C_AG0_AD_CRD_ACQUIRED__TGR2 = 0x400, // CMS Agent0 AD Credits Acquired -- For Transgress 2
		UNC_C_AG0_AD_CRD_ACQUIRED__MASK__SKX_UNC_C_AG0_AD_CRD_ACQUIRED__TGR3 = 0x800, // CMS Agent0 AD Credits Acquired -- For Transgress 3
		UNC_C_AG0_AD_CRD_ACQUIRED__MASK__SKX_UNC_C_AG0_AD_CRD_ACQUIRED__TGR4 = 0x1000, // CMS Agent0 AD Credits Acquired -- For Transgress 4
		UNC_C_AG0_AD_CRD_ACQUIRED__MASK__SKX_UNC_C_AG0_AD_CRD_ACQUIRED__TGR5 = 0x2000, // CMS Agent0 AD Credits Acquired -- For Transgress 5
		UNC_C_AG0_AD_CRD_OCCUPANCY = 0x82, // Number of CMS Agent 0 AD credits in use in a given cycle
		UNC_C_AG0_AD_CRD_OCCUPANCY__MASK__SKX_UNC_C_AG0_AD_CRD_OCCUPANCY__TGR0 = 0x100, // CMS Agent0 AD Credits Occupancy -- For Transgress 0
		UNC_C_AG0_AD_CRD_OCCUPANCY__MASK__SKX_UNC_C_AG0_AD_CRD_OCCUPANCY__TGR1 = 0x200, // CMS Agent0 AD Credits Occupancy -- For Transgress 1
		UNC_C_AG0_AD_CRD_OCCUPANCY__MASK__SKX_UNC_C_AG0_AD_CRD_OCCUPANCY__TGR2 = 0x400, // CMS Agent0 AD Credits Occupancy -- For Transgress 2
		UNC_C_AG0_AD_CRD_OCCUPANCY__MASK__SKX_UNC_C_AG0_AD_CRD_OCCUPANCY__TGR3 = 0x800, // CMS Agent0 AD Credits Occupancy -- For Transgress 3
		UNC_C_AG0_AD_CRD_OCCUPANCY__MASK__SKX_UNC_C_AG0_AD_CRD_OCCUPANCY__TGR4 = 0x1000, // CMS Agent0 AD Credits Occupancy -- For Transgress 4
		UNC_C_AG0_AD_CRD_OCCUPANCY__MASK__SKX_UNC_C_AG0_AD_CRD_OCCUPANCY__TGR5 = 0x2000, // CMS Agent0 AD Credits Occupancy -- For Transgress 5
		UNC_C_AG0_BL_CRD_ACQUIRED = 0x88, // Number of CMS Agent 0 BL credits acquired in a given cycle
		UNC_C_AG0_BL_CRD_ACQUIRED__MASK__SKX_UNC_C_AG0_BL_CRD_ACQUIRED__TGR0 = 0x100, // CMS Agent0 BL Credits Acquired -- For Transgress 0
		UNC_C_AG0_BL_CRD_ACQUIRED__MASK__SKX_UNC_C_AG0_BL_CRD_ACQUIRED__TGR1 = 0x200, // CMS Agent0 BL Credits Acquired -- For Transgress 1
		UNC_C_AG0_BL_CRD_ACQUIRED__MASK__SKX_UNC_C_AG0_BL_CRD_ACQUIRED__TGR2 = 0x400, // CMS Agent0 BL Credits Acquired -- For Transgress 2
		UNC_C_AG0_BL_CRD_ACQUIRED__MASK__SKX_UNC_C_AG0_BL_CRD_ACQUIRED__TGR3 = 0x800, // CMS Agent0 BL Credits Acquired -- For Transgress 3
		UNC_C_AG0_BL_CRD_ACQUIRED__MASK__SKX_UNC_C_AG0_BL_CRD_ACQUIRED__TGR4 = 0x1000, // CMS Agent0 BL Credits Acquired -- For Transgress 4
		UNC_C_AG0_BL_CRD_ACQUIRED__MASK__SKX_UNC_C_AG0_BL_CRD_ACQUIRED__TGR5 = 0x2000, // CMS Agent0 BL Credits Acquired -- For Transgress 5
		UNC_C_AG0_BL_CRD_OCCUPANCY = 0x8a, // Number of CMS Agent 0 BL credits in use in a given cycle
		UNC_C_AG0_BL_CRD_OCCUPANCY__MASK__SKX_UNC_C_AG0_BL_CRD_OCCUPANCY__TGR0 = 0x100, // CMS Agent0 BL Credits Occupancy -- For Transgress 0
		UNC_C_AG0_BL_CRD_OCCUPANCY__MASK__SKX_UNC_C_AG0_BL_CRD_OCCUPANCY__TGR1 = 0x200, // CMS Agent0 BL Credits Occupancy -- For Transgress 1
		UNC_C_AG0_BL_CRD_OCCUPANCY__MASK__SKX_UNC_C_AG0_BL_CRD_OCCUPANCY__TGR2 = 0x400, // CMS Agent0 BL Credits Occupancy -- For Transgress 2
		UNC_C_AG0_BL_CRD_OCCUPANCY__MASK__SKX_UNC_C_AG0_BL_CRD_OCCUPANCY__TGR3 = 0x800, // CMS Agent0 BL Credits Occupancy -- For Transgress 3
		UNC_C_AG0_BL_CRD_OCCUPANCY__MASK__SKX_UNC_C_AG0_BL_CRD_OCCUPANCY__TGR4 = 0x1000, // CMS Agent0 BL Credits Occupancy -- For Transgress 4
		UNC_C_AG0_BL_CRD_OCCUPANCY__MASK__SKX_UNC_C_AG0_BL_CRD_OCCUPANCY__TGR5 = 0x2000, // CMS Agent0 BL Credits Occupancy -- For Transgress 5
		UNC_C_AG1_AD_CRD_ACQUIRED = 0x84, // Number of CMS Agent 1 AD credits acquired in a given cycle
		UNC_C_AG1_AD_CRD_ACQUIRED__MASK__SKX_UNC_C_AG1_AD_CRD_ACQUIRED__TGR0 = 0x100, // CMS Agent1 AD Credits Acquired -- For Transgress 0
		UNC_C_AG1_AD_CRD_ACQUIRED__MASK__SKX_UNC_C_AG1_AD_CRD_ACQUIRED__TGR1 = 0x200, // CMS Agent1 AD Credits Acquired -- For Transgress 1
		UNC_C_AG1_AD_CRD_ACQUIRED__MASK__SKX_UNC_C_AG1_AD_CRD_ACQUIRED__TGR2 = 0x400, // CMS Agent1 AD Credits Acquired -- For Transgress 2
		UNC_C_AG1_AD_CRD_ACQUIRED__MASK__SKX_UNC_C_AG1_AD_CRD_ACQUIRED__TGR3 = 0x800, // CMS Agent1 AD Credits Acquired -- For Transgress 3
		UNC_C_AG1_AD_CRD_ACQUIRED__MASK__SKX_UNC_C_AG1_AD_CRD_ACQUIRED__TGR4 = 0x1000, // CMS Agent1 AD Credits Acquired -- For Transgress 4
		UNC_C_AG1_AD_CRD_ACQUIRED__MASK__SKX_UNC_C_AG1_AD_CRD_ACQUIRED__TGR5 = 0x2000, // CMS Agent1 AD Credits Acquired -- For Transgress 5
		UNC_C_AG1_AD_CRD_OCCUPANCY = 0x86, // Number of CMS Agent 1 AD credits in use in a given cycle
		UNC_C_AG1_AD_CRD_OCCUPANCY__MASK__SKX_UNC_C_AG1_AD_CRD_OCCUPANCY__TGR0 = 0x100, // CMS Agent1 AD Credits Occupancy -- For Transgress 0
		UNC_C_AG1_AD_CRD_OCCUPANCY__MASK__SKX_UNC_C_AG1_AD_CRD_OCCUPANCY__TGR1 = 0x200, // CMS Agent1 AD Credits Occupancy -- For Transgress 1
		UNC_C_AG1_AD_CRD_OCCUPANCY__MASK__SKX_UNC_C_AG1_AD_CRD_OCCUPANCY__TGR2 = 0x400, // CMS Agent1 AD Credits Occupancy -- For Transgress 2
		UNC_C_AG1_AD_CRD_OCCUPANCY__MASK__SKX_UNC_C_AG1_AD_CRD_OCCUPANCY__TGR3 = 0x800, // CMS Agent1 AD Credits Occupancy -- For Transgress 3
		UNC_C_AG1_AD_CRD_OCCUPANCY__MASK__SKX_UNC_C_AG1_AD_CRD_OCCUPANCY__TGR4 = 0x1000, // CMS Agent1 AD Credits Occupancy -- For Transgress 4
		UNC_C_AG1_AD_CRD_OCCUPANCY__MASK__SKX_UNC_C_AG1_AD_CRD_OCCUPANCY__TGR5 = 0x2000, // CMS Agent1 AD Credits Occupancy -- For Transgress 5
		UNC_C_AG1_BL_CRD_OCCUPANCY = 0x8e, // Number of CMS Agent 1 BL credits in use in a given cycle
		UNC_C_AG1_BL_CRD_OCCUPANCY__MASK__SKX_UNC_C_AG1_BL_CRD_OCCUPANCY__TGR0 = 0x100, // CMS Agent1 BL Credits Occupancy -- For Transgress 0
		UNC_C_AG1_BL_CRD_OCCUPANCY__MASK__SKX_UNC_C_AG1_BL_CRD_OCCUPANCY__TGR1 = 0x200, // CMS Agent1 BL Credits Occupancy -- For Transgress 1
		UNC_C_AG1_BL_CRD_OCCUPANCY__MASK__SKX_UNC_C_AG1_BL_CRD_OCCUPANCY__TGR2 = 0x400, // CMS Agent1 BL Credits Occupancy -- For Transgress 2
		UNC_C_AG1_BL_CRD_OCCUPANCY__MASK__SKX_UNC_C_AG1_BL_CRD_OCCUPANCY__TGR3 = 0x800, // CMS Agent1 BL Credits Occupancy -- For Transgress 3
		UNC_C_AG1_BL_CRD_OCCUPANCY__MASK__SKX_UNC_C_AG1_BL_CRD_OCCUPANCY__TGR4 = 0x1000, // CMS Agent1 BL Credits Occupancy -- For Transgress 4
		UNC_C_AG1_BL_CRD_OCCUPANCY__MASK__SKX_UNC_C_AG1_BL_CRD_OCCUPANCY__TGR5 = 0x2000, // CMS Agent1 BL Credits Occupancy -- For Transgress 5
		UNC_C_AG1_BL_CREDITS_ACQUIRED = 0x8c, // Number of CMS Agent 1 BL credits acquired in a given cycle
		UNC_C_AG1_BL_CREDITS_ACQUIRED__MASK__SKX_UNC_C_AG1_BL_CREDITS_ACQUIRED__TGR0 = 0x100, // CMS Agent1 BL Credits Acquired -- For Transgress 0
		UNC_C_AG1_BL_CREDITS_ACQUIRED__MASK__SKX_UNC_C_AG1_BL_CREDITS_ACQUIRED__TGR1 = 0x200, // CMS Agent1 BL Credits Acquired -- For Transgress 1
		UNC_C_AG1_BL_CREDITS_ACQUIRED__MASK__SKX_UNC_C_AG1_BL_CREDITS_ACQUIRED__TGR2 = 0x400, // CMS Agent1 BL Credits Acquired -- For Transgress 2
		UNC_C_AG1_BL_CREDITS_ACQUIRED__MASK__SKX_UNC_C_AG1_BL_CREDITS_ACQUIRED__TGR3 = 0x800, // CMS Agent1 BL Credits Acquired -- For Transgress 3
		UNC_C_AG1_BL_CREDITS_ACQUIRED__MASK__SKX_UNC_C_AG1_BL_CREDITS_ACQUIRED__TGR4 = 0x1000, // CMS Agent1 BL Credits Acquired -- For Transgress 4
		UNC_C_AG1_BL_CREDITS_ACQUIRED__MASK__SKX_UNC_C_AG1_BL_CREDITS_ACQUIRED__TGR5 = 0x2000, // CMS Agent1 BL Credits Acquired -- For Transgress 5
		UNC_C_BYPASS_CHA_IMC = 0x57, // Counts the number of times when the CHA was able to bypass HA pipe on the way to iMC.  This is a latency optimization for situations when there is light loadings on the memory subsystem.  This can be filtered by when the bypass was taken and when it was not.
		UNC_C_BYPASS_CHA_IMC__MASK__SKX_UNC_C_BYPASS_CHA_IMC__INTERMEDIATE = 0x200, // CHA to iMC Bypass -- Intermediate bypass Taken
		UNC_C_BYPASS_CHA_IMC__MASK__SKX_UNC_C_BYPASS_CHA_IMC__NOT_TAKEN = 0x400, // CHA to iMC Bypass -- Not Taken
		UNC_C_BYPASS_CHA_IMC__MASK__SKX_UNC_C_BYPASS_CHA_IMC__TAKEN = 0x100, // CHA to iMC Bypass -- Taken
		UNC_C_CLOCKTICKS = 0x0, // TBD
		UNC_C_CMS_CLOCKTICKS = 0xc0, // TBD
		UNC_C_CORE_PMA = 0x17, // TBD
		UNC_C_CORE_PMA__MASK__SKX_UNC_C_CORE_PMA__C1_STATE = 0x100, // Core PMA Events -- C1  State
		UNC_C_CORE_PMA__MASK__SKX_UNC_C_CORE_PMA__C1_TRANSITION = 0x200, // Core PMA Events -- C1 Transition
		UNC_C_CORE_PMA__MASK__SKX_UNC_C_CORE_PMA__C6_STATE = 0x400, // Core PMA Events -- C6 State
		UNC_C_CORE_PMA__MASK__SKX_UNC_C_CORE_PMA__C6_TRANSITION = 0x800, // Core PMA Events -- C6 Transition
		UNC_C_CORE_PMA__MASK__SKX_UNC_C_CORE_PMA__GV = 0x1000, // Core PMA Events -- GV
		UNC_C_CORE_SNP = 0x33, // Counts the number of transactions that trigger a configurable number of cross snoops.  Cores are snooped if the transaction looks up the cache and determines that it is necessary based on the operation type and what CoreValid bits are set.  For example
		UNC_C_CORE_SNP__MASK__SKX_UNC_C_CORE_SNP__ANY_GTONE = 0xe200, // Core Cross Snoops Issued -- Any Cycle with Multiple Snoops
		UNC_C_CORE_SNP__MASK__SKX_UNC_C_CORE_SNP__ANY_ONE = 0xe100, // Core Cross Snoops Issued -- Any Single Snoop
		UNC_C_CORE_SNP__MASK__SKX_UNC_C_CORE_SNP__ANY_REMOTE = 0xe400, // Core Cross Snoops Issued -- Any Snoop to Remote Node
		UNC_C_CORE_SNP__MASK__SKX_UNC_C_CORE_SNP__CORE_GTONE = 0x4200, // Core Cross Snoops Issued -- Multiple Core Requests
		UNC_C_CORE_SNP__MASK__SKX_UNC_C_CORE_SNP__CORE_ONE = 0x4100, // Core Cross Snoops Issued -- Single Core Requests
		UNC_C_CORE_SNP__MASK__SKX_UNC_C_CORE_SNP__CORE_REMOTE = 0x4400, // Core Cross Snoops Issued -- Core Request to Remote Node
		UNC_C_CORE_SNP__MASK__SKX_UNC_C_CORE_SNP__EVICT_GTONE = 0x8200, // Core Cross Snoops Issued -- Multiple Eviction
		UNC_C_CORE_SNP__MASK__SKX_UNC_C_CORE_SNP__EVICT_ONE = 0x8100, // Core Cross Snoops Issued -- Single Eviction
		UNC_C_CORE_SNP__MASK__SKX_UNC_C_CORE_SNP__EVICT_REMOTE = 0x8400, // Core Cross Snoops Issued -- Eviction to Remote Node
		UNC_C_CORE_SNP__MASK__SKX_UNC_C_CORE_SNP__EXT_GTONE = 0x2200, // Core Cross Snoops Issued -- Multiple External Snoops
		UNC_C_CORE_SNP__MASK__SKX_UNC_C_CORE_SNP__EXT_ONE = 0x2100, // Core Cross Snoops Issued -- Single External Snoops
		UNC_C_CORE_SNP__MASK__SKX_UNC_C_CORE_SNP__EXT_REMOTE = 0x2400, // Core Cross Snoops Issued -- External Snoop to Remote Node
		UNC_C_COUNTER0_OCCUPANCY = 0x1f, // Since occupancy counts can only be captured in the Cbos 0 counter
		UNC_C_DIR_LOOKUP = 0x53, // Counts the number of transactions that looked up the Home Agent directory.  Can be filtered by requests that had to snoop and those that did not have to.
		UNC_C_DIR_LOOKUP__MASK__SKX_UNC_C_DIR_LOOKUP__NO_SNP = 0x200, // Directory Lookups -- Snoop Not Needed
		UNC_C_DIR_LOOKUP__MASK__SKX_UNC_C_DIR_LOOKUP__SNP = 0x100, // Directory Lookups -- Snoop Needed
		UNC_C_DIR_UPDATE = 0x54, // Counts the number of directory updates that were required.  These result in writes to the memory controller.
		UNC_C_DIR_UPDATE__MASK__SKX_UNC_C_DIR_UPDATE__HA = 0x100, // Directory Updates -- from HA pipe
		UNC_C_DIR_UPDATE__MASK__SKX_UNC_C_DIR_UPDATE__TOR = 0x200, // Directory Updates -- from TOR pipe
		UNC_C_EGRESS_ORDERING = 0xae, // Counts number of cycles IV was blocked in the TGR Egress due to SNP/GO Ordering requirements
		UNC_C_EGRESS_ORDERING__MASK__SKX_UNC_C_EGRESS_ORDERING__IV_SNOOPGO_DN = 0x400, // Egress Blocking due to Ordering requirements -- Down
		UNC_C_EGRESS_ORDERING__MASK__SKX_UNC_C_EGRESS_ORDERING__IV_SNOOPGO_UP = 0x100, // Egress Blocking due to Ordering requirements -- Up
		UNC_C_FAST_ASSERTED = 0xa5, // Counts the number of cycles either the local or incoming distress signals are asserted.  Incoming distress includes up
		UNC_C_FAST_ASSERTED__MASK__SKX_UNC_C_FAST_ASSERTED__HORZ = 0x200, // FaST wire asserted -- Horizontal
		UNC_C_FAST_ASSERTED__MASK__SKX_UNC_C_FAST_ASSERTED__VERT = 0x100, // FaST wire asserted -- Vertical
		UNC_C_HITME_HIT = 0x5f, // TBD
		UNC_C_HITME_HIT__MASK__SKX_UNC_C_HITME_HIT__EX_RDS = 0x100, // Counts Number of Hits in HitMe Cache -- Exclusive hit and op is RdCode
		UNC_C_HITME_HIT__MASK__SKX_UNC_C_HITME_HIT__SHARED_OWNREQ = 0x400, // Counts Number of Hits in HitMe Cache -- Shared hit and op is RdInvOwn
		UNC_C_HITME_HIT__MASK__SKX_UNC_C_HITME_HIT__WBMTOE = 0x800, // Counts Number of Hits in HitMe Cache -- op is WbMtoE
		UNC_C_HITME_HIT__MASK__SKX_UNC_C_HITME_HIT__WBMTOI_OR_S = 0x1000, // Counts Number of Hits in HitMe Cache -- op is WbMtoI
		UNC_C_HITME_LOOKUP = 0x5e, // TBD
		UNC_C_HITME_LOOKUP__MASK__SKX_UNC_C_HITME_LOOKUP__READ = 0x100, // Counts Number of times HitMe Cache is accessed -- op is RdCode
		UNC_C_HITME_LOOKUP__MASK__SKX_UNC_C_HITME_LOOKUP__WRITE = 0x200, // Counts Number of times HitMe Cache is accessed -- op is WbMtoE
		UNC_C_HITME_MISS = 0x60, // TBD
		UNC_C_HITME_MISS__MASK__SKX_UNC_C_HITME_MISS__NOTSHARED_RDINVOWN = 0x4000, // Counts Number of Misses in HitMe Cache -- No SF/LLC HitS/F and op is RdInvOwn
		UNC_C_HITME_MISS__MASK__SKX_UNC_C_HITME_MISS__READ_OR_INV = 0x8000, // Counts Number of Misses in HitMe Cache -- op is RdCode
		UNC_C_HITME_MISS__MASK__SKX_UNC_C_HITME_MISS__SHARED_RDINVOWN = 0x2000, // Counts Number of Misses in HitMe Cache -- SF/LLC HitS/F and op is RdInvOwn
		UNC_C_HITME_UPDATE = 0x61, // TBD
		UNC_C_HITME_UPDATE__MASK__SKX_UNC_C_HITME_UPDATE__DEALLOCATE = 0x1000, // Counts the number of Allocate/Update to HitMe Cache -- Deallocate HtiME Reads without RspFwdI*
		UNC_C_HITME_UPDATE__MASK__SKX_UNC_C_HITME_UPDATE__DEALLOCATE_RSPFWDI_LOC = 0x100, // Counts the number of Allocate/Update to HitMe Cache -- op is RspIFwd or RspIFwdWb for a local request
		UNC_C_HITME_UPDATE__MASK__SKX_UNC_C_HITME_UPDATE__RDINVOWN = 0x800, // Counts the number of Allocate/Update to HitMe Cache -- Update HitMe Cache on RdInvOwn even if not RspFwdI*
		UNC_C_HITME_UPDATE__MASK__SKX_UNC_C_HITME_UPDATE__RSPFWDI_REM = 0x200, // Counts the number of Allocate/Update to HitMe Cache -- op is RspIFwd or RspIFwdWb for a remote request
		UNC_C_HITME_UPDATE__MASK__SKX_UNC_C_HITME_UPDATE__SHARED = 0x400, // Counts the number of Allocate/Update to HitMe Cache -- Update HitMe Cache to SHARed
		UNC_C_HORZ_RING_AD_IN_USE = 0xa7, // Counts the number of cycles that the Horizontal AD ring is being used at this ring stop.  This includes when packets are passing by and when packets are being sunk
		UNC_C_HORZ_RING_AD_IN_USE__MASK__SKX_UNC_C_HORZ_RING_AD_IN_USE__LEFT_EVEN = 0x100, // Horizontal AD Ring In Use -- Left and Even
		UNC_C_HORZ_RING_AD_IN_USE__MASK__SKX_UNC_C_HORZ_RING_AD_IN_USE__LEFT_ODD = 0x200, // Horizontal AD Ring In Use -- Left and Odd
		UNC_C_HORZ_RING_AD_IN_USE__MASK__SKX_UNC_C_HORZ_RING_AD_IN_USE__RIGHT_EVEN = 0x400, // Horizontal AD Ring In Use -- Right and Even
		UNC_C_HORZ_RING_AD_IN_USE__MASK__SKX_UNC_C_HORZ_RING_AD_IN_USE__RIGHT_ODD = 0x800, // Horizontal AD Ring In Use -- Right and Odd
		UNC_C_HORZ_RING_AK_IN_USE = 0xa9, // Counts the number of cycles that the Horizontal AK ring is being used at this ring stop.  This includes when packets are passing by and when packets are being sunk
		UNC_C_HORZ_RING_AK_IN_USE__MASK__SKX_UNC_C_HORZ_RING_AK_IN_USE__LEFT_EVEN = 0x100, // Horizontal AK Ring In Use -- Left and Even
		UNC_C_HORZ_RING_AK_IN_USE__MASK__SKX_UNC_C_HORZ_RING_AK_IN_USE__LEFT_ODD = 0x200, // Horizontal AK Ring In Use -- Left and Odd
		UNC_C_HORZ_RING_AK_IN_USE__MASK__SKX_UNC_C_HORZ_RING_AK_IN_USE__RIGHT_EVEN = 0x400, // Horizontal AK Ring In Use -- Right and Even
		UNC_C_HORZ_RING_AK_IN_USE__MASK__SKX_UNC_C_HORZ_RING_AK_IN_USE__RIGHT_ODD = 0x800, // Horizontal AK Ring In Use -- Right and Odd
		UNC_C_HORZ_RING_BL_IN_USE = 0xab, // Counts the number of cycles that the Horizontal BL ring is being used at this ring stop.  This includes when packets are passing by and when packets are being sunk
		UNC_C_HORZ_RING_BL_IN_USE__MASK__SKX_UNC_C_HORZ_RING_BL_IN_USE__LEFT_EVEN = 0x100, // Horizontal BL Ring in Use -- Left and Even
		UNC_C_HORZ_RING_BL_IN_USE__MASK__SKX_UNC_C_HORZ_RING_BL_IN_USE__LEFT_ODD = 0x200, // Horizontal BL Ring in Use -- Left and Odd
		UNC_C_HORZ_RING_BL_IN_USE__MASK__SKX_UNC_C_HORZ_RING_BL_IN_USE__RIGHT_EVEN = 0x400, // Horizontal BL Ring in Use -- Right and Even
		UNC_C_HORZ_RING_BL_IN_USE__MASK__SKX_UNC_C_HORZ_RING_BL_IN_USE__RIGHT_ODD = 0x800, // Horizontal BL Ring in Use -- Right and Odd
		UNC_C_HORZ_RING_IV_IN_USE = 0xad, // Counts the number of cycles that the Horizontal IV ring is being used at this ring stop.  This includes when packets are passing by and when packets are being sunk
		UNC_C_HORZ_RING_IV_IN_USE__MASK__SKX_UNC_C_HORZ_RING_IV_IN_USE__LEFT = 0x100, // Horizontal IV Ring in Use -- Left
		UNC_C_HORZ_RING_IV_IN_USE__MASK__SKX_UNC_C_HORZ_RING_IV_IN_USE__RIGHT = 0x400, // Horizontal IV Ring in Use -- Right
		UNC_C_IMC_READS_COUNT = 0x59, // Count of the number of reads issued to any of the memory controller channels.  This can be filtered by the priority of the reads.
		UNC_C_IMC_READS_COUNT__MASK__SKX_UNC_C_IMC_READS_COUNT__NORMAL = 0x100, // HA to iMC Reads Issued -- Normal
		UNC_C_IMC_READS_COUNT__MASK__SKX_UNC_C_IMC_READS_COUNT__PRIORITY = 0x200, // HA to iMC Reads Issued -- ISOCH
		UNC_C_IMC_WRITES_COUNT = 0x5b, // Counts the total number of writes issued from the HA into the memory controller.  This counts for all four channels.  It can be filtered by full/partial and ISOCH/non-ISOCH.
		UNC_C_IMC_WRITES_COUNT__MASK__SKX_UNC_C_IMC_WRITES_COUNT__FULL = 0x100, // Writes Issued to the iMC by the HA -- Full Line Non-ISOCH
		UNC_C_IMC_WRITES_COUNT__MASK__SKX_UNC_C_IMC_WRITES_COUNT__FULL_MIG = 0x1000, // Writes Issued to the iMC by the HA -- Full Line MIG
		UNC_C_IMC_WRITES_COUNT__MASK__SKX_UNC_C_IMC_WRITES_COUNT__FULL_PRIORITY = 0x400, // Writes Issued to the iMC by the HA -- ISOCH Full Line
		UNC_C_IMC_WRITES_COUNT__MASK__SKX_UNC_C_IMC_WRITES_COUNT__PARTIAL = 0x200, // Writes Issued to the iMC by the HA -- Partial Non-ISOCH
		UNC_C_IMC_WRITES_COUNT__MASK__SKX_UNC_C_IMC_WRITES_COUNT__PARTIAL_MIG = 0x2000, // Writes Issued to the iMC by the HA -- Partial MIG
		UNC_C_IMC_WRITES_COUNT__MASK__SKX_UNC_C_IMC_WRITES_COUNT__PARTIAL_PRIORITY = 0x800, // Writes Issued to the iMC by the HA -- ISOCH Partial
		UNC_C_IODC_ALLOC = 0x62, // TBD
		UNC_C_IODC_ALLOC__MASK__SKX_UNC_C_IODC_ALLOC__INVITOM = 0x100, // Counts Number of times IODC entry allocation is attempted -- Number of IODC allocations
		UNC_C_IODC_ALLOC__MASK__SKX_UNC_C_IODC_ALLOC__IODCFULL = 0x200, // Counts Number of times IODC entry allocation is attempted -- Number of IODC allocations dropped due to IODC Full
		UNC_C_IODC_ALLOC__MASK__SKX_UNC_C_IODC_ALLOC__OSBGATED = 0x400, // Counts Number of times IODC entry allocation is attempted -- Number of IDOC allocation dropped due to OSB gate
		UNC_C_IODC_DEALLOC = 0x63, // TBD
		UNC_C_IODC_DEALLOC__MASK__SKX_UNC_C_IODC_DEALLOC__ALL = 0x1000, // Counts number of IODC deallocations -- IODC deallocated due to any reason
		UNC_C_IODC_DEALLOC__MASK__SKX_UNC_C_IODC_DEALLOC__SNPOUT = 0x800, // Counts number of IODC deallocations -- IODC deallocated due to conflicting transaction
		UNC_C_IODC_DEALLOC__MASK__SKX_UNC_C_IODC_DEALLOC__WBMTOE = 0x100, // Counts number of IODC deallocations -- IODC deallocated due to WbMtoE
		UNC_C_IODC_DEALLOC__MASK__SKX_UNC_C_IODC_DEALLOC__WBMTOI = 0x200, // Counts number of IODC deallocations -- IODC deallocated due to WbMtoI
		UNC_C_IODC_DEALLOC__MASK__SKX_UNC_C_IODC_DEALLOC__WBPUSHMTOI = 0x400, // Counts number of IODC deallocations -- IODC deallocated due to WbPushMtoI
		UNC_C_LLC_LOOKUP = 0x34, // Counts the number of times the LLC was accessed - this includes code
		UNC_C_LLC_LOOKUP__MASK__SKX_UNC_C_LLC_LOOKUP__ANY = 0x1100, // Cache and Snoop Filter Lookups -- Any Request
		UNC_C_LLC_LOOKUP__MASK__SKX_UNC_C_LLC_LOOKUP__DATA_READ = 0x300, // Cache and Snoop Filter Lookups -- Data Read Request
		UNC_C_LLC_LOOKUP__MASK__SKX_UNC_C_LLC_LOOKUP__LOCAL = 0x3100, // Cache and Snoop Filter Lookups -- Local
		UNC_C_LLC_LOOKUP__MASK__SKX_UNC_C_LLC_LOOKUP__REMOTE = 0x9100, // Cache and Snoop Filter Lookups -- Remote
		UNC_C_LLC_LOOKUP__MASK__SKX_UNC_C_LLC_LOOKUP__REMOTE_SNOOP = 0x900, // Cache and Snoop Filter Lookups -- External Snoop Request
		UNC_C_LLC_LOOKUP__MASK__SKX_UNC_C_LLC_LOOKUP__WRITE = 0x500, // Cache and Snoop Filter Lookups -- Write Requests
		UNC_C_LLC_VICTIMS = 0x37, // Counts the number of lines that were victimized on a fill.  This can be filtered by the state that the line was in.
		UNC_C_LLC_VICTIMS__MASK__SKX_UNC_C_LLC_VICTIMS__LOCAL_ALL = 0x2f00, // Lines Victimized -- Local - All Lines
		UNC_C_LLC_VICTIMS__MASK__SKX_UNC_C_LLC_VICTIMS__LOCAL_E = 0x2200, // Lines Victimized -- Local - Lines in E State
		UNC_C_LLC_VICTIMS__MASK__SKX_UNC_C_LLC_VICTIMS__LOCAL_F = 0x2800, // Lines Victimized -- Local - Lines in F State
		UNC_C_LLC_VICTIMS__MASK__SKX_UNC_C_LLC_VICTIMS__LOCAL_M = 0x2100, // Lines Victimized -- Local - Lines in M State
		UNC_C_LLC_VICTIMS__MASK__SKX_UNC_C_LLC_VICTIMS__LOCAL_S = 0x2400, // Lines Victimized -- Local - Lines in S State
		UNC_C_LLC_VICTIMS__MASK__SKX_UNC_C_LLC_VICTIMS__REMOTE_ALL = 0x8f00, // Lines Victimized -- Remote - All Lines
		UNC_C_LLC_VICTIMS__MASK__SKX_UNC_C_LLC_VICTIMS__REMOTE_E = 0x8200, // Lines Victimized -- Remote - Lines in E State
		UNC_C_LLC_VICTIMS__MASK__SKX_UNC_C_LLC_VICTIMS__REMOTE_F = 0x8800, // Lines Victimized -- Remote - Lines in F State
		UNC_C_LLC_VICTIMS__MASK__SKX_UNC_C_LLC_VICTIMS__REMOTE_M = 0x8100, // Lines Victimized -- Remote - Lines in M State
		UNC_C_LLC_VICTIMS__MASK__SKX_UNC_C_LLC_VICTIMS__REMOTE_S = 0x8400, // Lines Victimized -- Remote - Lines in S State
		UNC_C_LLC_VICTIMS__MASK__SKX_UNC_C_LLC_VICTIMS__TOTAL_E = 0xa200, // Lines Victimized -- Lines in E State
		UNC_C_LLC_VICTIMS__MASK__SKX_UNC_C_LLC_VICTIMS__TOTAL_F = 0xa800, // Lines Victimized -- Lines in F State
		UNC_C_LLC_VICTIMS__MASK__SKX_UNC_C_LLC_VICTIMS__TOTAL_M = 0xa100, // Lines Victimized -- Lines in M State
		UNC_C_LLC_VICTIMS__MASK__SKX_UNC_C_LLC_VICTIMS__TOTAL_S = 0xa400, // Lines Victimized -- Lines in S State
		UNC_C_MISC = 0x39, // Miscellaneous events in the CHA.
		UNC_C_MISC__MASK__SKX_UNC_C_MISC__CV0_PREF_MISS = 0x2000, // Cbo Misc -- CV0 Prefetch Miss
		UNC_C_MISC__MASK__SKX_UNC_C_MISC__CV0_PREF_VIC = 0x1000, // Cbo Misc -- CV0 Prefetch Victim
		UNC_C_MISC__MASK__SKX_UNC_C_MISC__RFO_HIT_S = 0x800, // Cbo Misc -- RFO HitS
		UNC_C_MISC__MASK__SKX_UNC_C_MISC__RSPI_WAS_FSE = 0x100, // Cbo Misc -- Silent Snoop Eviction
		UNC_C_MISC__MASK__SKX_UNC_C_MISC__WC_ALIASING = 0x200, // Cbo Misc -- Write Combining Aliasing
		UNC_C_OSB = 0x55, // Count of OSB snoop broadcasts. Counts by 1 per request causing OSB snoops to be broadcast. Does not count all the snoops generated by OSB.
		UNC_C_READ_NO_CREDITS = 0x58, // Counts the number of times when there are no credits available for sending reads from the CHA into the iMC.  In order to send reads into the memory controller
		UNC_C_READ_NO_CREDITS__MASK__SKX_UNC_C_READ_NO_CREDITS__EDC0_SMI2 = 0x400, // CHA iMC CHNx READ Credits Empty -- EDC0_SMI2
		UNC_C_READ_NO_CREDITS__MASK__SKX_UNC_C_READ_NO_CREDITS__EDC1_SMI3 = 0x800, // CHA iMC CHNx READ Credits Empty -- EDC1_SMI3
		UNC_C_READ_NO_CREDITS__MASK__SKX_UNC_C_READ_NO_CREDITS__EDC2_SMI4 = 0x1000, // CHA iMC CHNx READ Credits Empty -- EDC2_SMI4
		UNC_C_READ_NO_CREDITS__MASK__SKX_UNC_C_READ_NO_CREDITS__EDC3_SMI5 = 0x2000, // CHA iMC CHNx READ Credits Empty -- EDC3_SMI5
		UNC_C_READ_NO_CREDITS__MASK__SKX_UNC_C_READ_NO_CREDITS__MC0_SMI0 = 0x100, // CHA iMC CHNx READ Credits Empty -- MC0_SMI0
		UNC_C_READ_NO_CREDITS__MASK__SKX_UNC_C_READ_NO_CREDITS__MC1_SMI1 = 0x200, // CHA iMC CHNx READ Credits Empty -- MC1_SMI1
		UNC_C_REQUESTS = 0x50, // Counts the total number of read requests made into the Home Agent. Reads include all read opcodes (including RFO).  Writes include all writes (streaming
		UNC_C_REQUESTS__MASK__SKX_UNC_C_REQUESTS__INVITOE_LOCAL = 0x1000, // Read and Write Requests -- InvalItoE Local
		UNC_C_REQUESTS__MASK__SKX_UNC_C_REQUESTS__INVITOE_REMOTE = 0x2000, // Read and Write Requests -- InvalItoE Remote
		UNC_C_REQUESTS__MASK__SKX_UNC_C_REQUESTS__READS = 0x300, // Read and Write Requests -- Reads
		UNC_C_REQUESTS__MASK__SKX_UNC_C_REQUESTS__READS_LOCAL = 0x100, // Read and Write Requests -- Reads Local
		UNC_C_REQUESTS__MASK__SKX_UNC_C_REQUESTS__READS_REMOTE = 0x200, // Read and Write Requests -- Reads Remote
		UNC_C_REQUESTS__MASK__SKX_UNC_C_REQUESTS__WRITES = 0xc00, // Read and Write Requests -- Writes
		UNC_C_REQUESTS__MASK__SKX_UNC_C_REQUESTS__WRITES_LOCAL = 0x400, // Read and Write Requests -- Writes Local
		UNC_C_REQUESTS__MASK__SKX_UNC_C_REQUESTS__WRITES_REMOTE = 0x800, // Read and Write Requests -- Writes Remote
		UNC_C_RING_BOUNCES_HORZ = 0xa1, // Number of cycles incoming messages from the Horizontal ring that were bounced
		UNC_C_RING_BOUNCES_HORZ__MASK__SKX_UNC_C_RING_BOUNCES_HORZ__AD = 0x100, // Messages that bounced on the Horizontal Ring. -- AD
		UNC_C_RING_BOUNCES_HORZ__MASK__SKX_UNC_C_RING_BOUNCES_HORZ__AK = 0x200, // Messages that bounced on the Horizontal Ring. -- AK
		UNC_C_RING_BOUNCES_HORZ__MASK__SKX_UNC_C_RING_BOUNCES_HORZ__BL = 0x400, // Messages that bounced on the Horizontal Ring. -- BL
		UNC_C_RING_BOUNCES_HORZ__MASK__SKX_UNC_C_RING_BOUNCES_HORZ__IV = 0x800, // Messages that bounced on the Horizontal Ring. -- IV
		UNC_C_RING_BOUNCES_VERT = 0xa0, // Number of cycles incoming messages from the Vertical ring that were bounced
		UNC_C_RING_BOUNCES_VERT__MASK__SKX_UNC_C_RING_BOUNCES_VERT__AD = 0x100, // Messages that bounced on the Vertical Ring. -- AD
		UNC_C_RING_BOUNCES_VERT__MASK__SKX_UNC_C_RING_BOUNCES_VERT__AK = 0x200, // Messages that bounced on the Vertical Ring. -- Acknowledgements to core
		UNC_C_RING_BOUNCES_VERT__MASK__SKX_UNC_C_RING_BOUNCES_VERT__BL = 0x400, // Messages that bounced on the Vertical Ring. -- Data Responses to core
		UNC_C_RING_BOUNCES_VERT__MASK__SKX_UNC_C_RING_BOUNCES_VERT__IV = 0x800, // Messages that bounced on the Vertical Ring. -- Snoops of processors cachee.
		UNC_C_RING_SINK_STARVED_HORZ = 0xa3, // TBD
		UNC_C_RING_SINK_STARVED_HORZ__MASK__SKX_UNC_C_RING_SINK_STARVED_HORZ__AD = 0x100, // Sink Starvation on Horizontal Ring -- AD
		UNC_C_RING_SINK_STARVED_HORZ__MASK__SKX_UNC_C_RING_SINK_STARVED_HORZ__AK = 0x200, // Sink Starvation on Horizontal Ring -- AK
		UNC_C_RING_SINK_STARVED_HORZ__MASK__SKX_UNC_C_RING_SINK_STARVED_HORZ__AK_AG1 = 0x2000, // Sink Starvation on Horizontal Ring -- Acknowledgements to Agent 1
		UNC_C_RING_SINK_STARVED_HORZ__MASK__SKX_UNC_C_RING_SINK_STARVED_HORZ__BL = 0x400, // Sink Starvation on Horizontal Ring -- BL
		UNC_C_RING_SINK_STARVED_HORZ__MASK__SKX_UNC_C_RING_SINK_STARVED_HORZ__IV = 0x800, // Sink Starvation on Horizontal Ring -- IV
		UNC_C_RING_SINK_STARVED_VERT = 0xa2, // TBD
		UNC_C_RING_SINK_STARVED_VERT__MASK__SKX_UNC_C_RING_SINK_STARVED_VERT__AD = 0x100, // Sink Starvation on Vertical Ring -- AD
		UNC_C_RING_SINK_STARVED_VERT__MASK__SKX_UNC_C_RING_SINK_STARVED_VERT__AK = 0x200, // Sink Starvation on Vertical Ring -- Acknowledgements to core
		UNC_C_RING_SINK_STARVED_VERT__MASK__SKX_UNC_C_RING_SINK_STARVED_VERT__BL = 0x400, // Sink Starvation on Vertical Ring -- Data Responses to core
		UNC_C_RING_SINK_STARVED_VERT__MASK__SKX_UNC_C_RING_SINK_STARVED_VERT__IV = 0x800, // Sink Starvation on Vertical Ring -- Snoops of processors cachee.
		UNC_C_RING_SRC_THRTL = 0xa4, // TBD
		UNC_C_RXC_INSERTS = 0x13, // Counts number of allocations per cycle into the specified Ingress queue.
		UNC_C_RXC_INSERTS__MASK__SKX_UNC_C_RXC_INSERTS__IPQ = 0x400, // Ingress (from CMS) Allocations -- IPQ
		UNC_C_RXC_INSERTS__MASK__SKX_UNC_C_RXC_INSERTS__IRQ = 0x100, // Ingress (from CMS) Allocations -- IRQ
		UNC_C_RXC_INSERTS__MASK__SKX_UNC_C_RXC_INSERTS__IRQ_REJ = 0x200, // Ingress (from CMS) Allocations -- IRQ Rejected
		UNC_C_RXC_INSERTS__MASK__SKX_UNC_C_RXC_INSERTS__PRQ = 0x1000, // Ingress (from CMS) Allocations -- PRQ
		UNC_C_RXC_INSERTS__MASK__SKX_UNC_C_RXC_INSERTS__PRQ_REJ = 0x2000, // Ingress (from CMS) Allocations -- PRQ
		UNC_C_RXC_INSERTS__MASK__SKX_UNC_C_RXC_INSERTS__RRQ = 0x4000, // Ingress (from CMS) Allocations -- RRQ
		UNC_C_RXC_INSERTS__MASK__SKX_UNC_C_RXC_INSERTS__WBQ = 0x8000, // Ingress (from CMS) Allocations -- WBQ
		UNC_C_RXC_IPQ0_REJECT = 0x22, // TBD
		UNC_C_RXC_IPQ0_REJECT__MASK__SKX_UNC_C_RXC_IPQ0_REJECT__AD_REQ_VN0 = 0x100, // Ingress Probe Queue Rejects -- AD REQ on VN0
		UNC_C_RXC_IPQ0_REJECT__MASK__SKX_UNC_C_RXC_IPQ0_REJECT__AD_RSP_VN0 = 0x200, // Ingress Probe Queue Rejects -- AD RSP on VN0
		UNC_C_RXC_IPQ0_REJECT__MASK__SKX_UNC_C_RXC_IPQ0_REJECT__AK_NON_UPI = 0x4000, // Ingress Probe Queue Rejects -- Non UPI AK Request
		UNC_C_RXC_IPQ0_REJECT__MASK__SKX_UNC_C_RXC_IPQ0_REJECT__BL_NCB_VN0 = 0x1000, // Ingress Probe Queue Rejects -- BL NCB on VN0
		UNC_C_RXC_IPQ0_REJECT__MASK__SKX_UNC_C_RXC_IPQ0_REJECT__BL_NCS_VN0 = 0x2000, // Ingress Probe Queue Rejects -- BL NCS on VN0
		UNC_C_RXC_IPQ0_REJECT__MASK__SKX_UNC_C_RXC_IPQ0_REJECT__BL_RSP_VN0 = 0x400, // Ingress Probe Queue Rejects -- BL RSP on VN0
		UNC_C_RXC_IPQ0_REJECT__MASK__SKX_UNC_C_RXC_IPQ0_REJECT__BL_WB_VN0 = 0x800, // Ingress Probe Queue Rejects -- BL WB on VN0
		UNC_C_RXC_IPQ0_REJECT__MASK__SKX_UNC_C_RXC_IPQ0_REJECT__IV_NON_UPI = 0x8000, // Ingress Probe Queue Rejects -- Non UPI IV Request
		UNC_C_RXC_IPQ1_REJECT = 0x23, // TBD
		UNC_C_RXC_IPQ1_REJECT__MASK__SKX_UNC_C_RXC_IPQ1_REJECT__ALLOW_SNP = 0x4000, // Ingress Probe Queue Rejects -- Allow Snoop
		UNC_C_RXC_IPQ1_REJECT__MASK__SKX_UNC_C_RXC_IPQ1_REJECT__ANY0 = 0x100, // Ingress Probe Queue Rejects -- ANY0
		UNC_C_RXC_IPQ1_REJECT__MASK__SKX_UNC_C_RXC_IPQ1_REJECT__HA = 0x200, // Ingress Probe Queue Rejects -- HA
		UNC_C_RXC_IPQ1_REJECT__MASK__SKX_UNC_C_RXC_IPQ1_REJECT__LLC_OR_SF_WAY = 0x2000, // Ingress Probe Queue Rejects -- Merging these two together to make room for ANY_REJECT_*0
		UNC_C_RXC_IPQ1_REJECT__MASK__SKX_UNC_C_RXC_IPQ1_REJECT__LLC_VICTIM = 0x400, // Ingress Probe Queue Rejects -- LLC Victim
		UNC_C_RXC_IPQ1_REJECT__MASK__SKX_UNC_C_RXC_IPQ1_REJECT__PA_MATCH = 0x8000, // Ingress Probe Queue Rejects -- PhyAddr Match
		UNC_C_RXC_IPQ1_REJECT__MASK__SKX_UNC_C_RXC_IPQ1_REJECT__SF_VICTIM = 0x800, // Ingress Probe Queue Rejects -- SF Victim
		UNC_C_RXC_IPQ1_REJECT__MASK__SKX_UNC_C_RXC_IPQ1_REJECT__VICTIM = 0x1000, // Ingress Probe Queue Rejects -- Victim
		UNC_C_RXC_IRQ0_REJECT = 0x18, // TBD
		UNC_C_RXC_IRQ0_REJECT__MASK__SKX_UNC_C_RXC_IRQ0_REJECT__AD_REQ_VN0 = 0x100, // Ingress (from CMS) Request Queue Rejects -- AD REQ on VN0
		UNC_C_RXC_IRQ0_REJECT__MASK__SKX_UNC_C_RXC_IRQ0_REJECT__AD_RSP_VN0 = 0x200, // Ingress (from CMS) Request Queue Rejects -- AD RSP on VN0
		UNC_C_RXC_IRQ0_REJECT__MASK__SKX_UNC_C_RXC_IRQ0_REJECT__AK_NON_UPI = 0x4000, // Ingress (from CMS) Request Queue Rejects -- Non UPI AK Request
		UNC_C_RXC_IRQ0_REJECT__MASK__SKX_UNC_C_RXC_IRQ0_REJECT__BL_NCB_VN0 = 0x1000, // Ingress (from CMS) Request Queue Rejects -- BL NCB on VN0
		UNC_C_RXC_IRQ0_REJECT__MASK__SKX_UNC_C_RXC_IRQ0_REJECT__BL_NCS_VN0 = 0x2000, // Ingress (from CMS) Request Queue Rejects -- BL NCS on VN0
		UNC_C_RXC_IRQ0_REJECT__MASK__SKX_UNC_C_RXC_IRQ0_REJECT__BL_RSP_VN0 = 0x400, // Ingress (from CMS) Request Queue Rejects -- BL RSP on VN0
		UNC_C_RXC_IRQ0_REJECT__MASK__SKX_UNC_C_RXC_IRQ0_REJECT__BL_WB_VN0 = 0x800, // Ingress (from CMS) Request Queue Rejects -- BL WB on VN0
		UNC_C_RXC_IRQ0_REJECT__MASK__SKX_UNC_C_RXC_IRQ0_REJECT__IV_NON_UPI = 0x8000, // Ingress (from CMS) Request Queue Rejects -- Non UPI IV Request
		UNC_C_RXC_IRQ1_REJECT = 0x19, // TBD
		UNC_C_RXC_IRQ1_REJECT__MASK__SKX_UNC_C_RXC_IRQ1_REJECT__ALLOW_SNP = 0x4000, // Ingress (from CMS) Request Queue Rejects -- Allow Snoop
		UNC_C_RXC_IRQ1_REJECT__MASK__SKX_UNC_C_RXC_IRQ1_REJECT__ANY0 = 0x100, // Ingress (from CMS) Request Queue Rejects -- ANY0
		UNC_C_RXC_IRQ1_REJECT__MASK__SKX_UNC_C_RXC_IRQ1_REJECT__HA = 0x200, // Ingress (from CMS) Request Queue Rejects -- HA
		UNC_C_RXC_IRQ1_REJECT__MASK__SKX_UNC_C_RXC_IRQ1_REJECT__LLC_OR_SF_WAY = 0x2000, // Ingress (from CMS) Request Queue Rejects -- Merging these two together to make room for ANY_REJECT_*0
		UNC_C_RXC_IRQ1_REJECT__MASK__SKX_UNC_C_RXC_IRQ1_REJECT__LLC_VICTIM = 0x400, // Ingress (from CMS) Request Queue Rejects -- LLC Victim
		UNC_C_RXC_IRQ1_REJECT__MASK__SKX_UNC_C_RXC_IRQ1_REJECT__PA_MATCH = 0x8000, // Ingress (from CMS) Request Queue Rejects -- PhyAddr Match
		UNC_C_RXC_IRQ1_REJECT__MASK__SKX_UNC_C_RXC_IRQ1_REJECT__SF_VICTIM = 0x800, // Ingress (from CMS) Request Queue Rejects -- SF Victim
		UNC_C_RXC_IRQ1_REJECT__MASK__SKX_UNC_C_RXC_IRQ1_REJECT__VICTIM = 0x1000, // Ingress (from CMS) Request Queue Rejects -- Victim
		UNC_C_RXC_ISMQ0_REJECT = 0x24, // Number of times a transaction flowing through the ISMQ had to retry.  Transaction pass through the ISMQ as responses for requests that already exist in the Cbo.  Some examples include: when data is returned or when snoop responses come back from the cores.
		UNC_C_RXC_ISMQ0_REJECT__MASK__SKX_UNC_C_RXC_ISMQ0_REJECT__AD_REQ_VN0 = 0x100, // ISMQ Rejects -- AD REQ on VN0
		UNC_C_RXC_ISMQ0_REJECT__MASK__SKX_UNC_C_RXC_ISMQ0_REJECT__AD_RSP_VN0 = 0x200, // ISMQ Rejects -- AD RSP on VN0
		UNC_C_RXC_ISMQ0_REJECT__MASK__SKX_UNC_C_RXC_ISMQ0_REJECT__AK_NON_UPI = 0x4000, // ISMQ Rejects -- Non UPI AK Request
		UNC_C_RXC_ISMQ0_REJECT__MASK__SKX_UNC_C_RXC_ISMQ0_REJECT__BL_NCB_VN0 = 0x1000, // ISMQ Rejects -- BL NCB on VN0
		UNC_C_RXC_ISMQ0_REJECT__MASK__SKX_UNC_C_RXC_ISMQ0_REJECT__BL_NCS_VN0 = 0x2000, // ISMQ Rejects -- BL NCS on VN0
		UNC_C_RXC_ISMQ0_REJECT__MASK__SKX_UNC_C_RXC_ISMQ0_REJECT__BL_RSP_VN0 = 0x400, // ISMQ Rejects -- BL RSP on VN0
		UNC_C_RXC_ISMQ0_REJECT__MASK__SKX_UNC_C_RXC_ISMQ0_REJECT__BL_WB_VN0 = 0x800, // ISMQ Rejects -- BL WB on VN0
		UNC_C_RXC_ISMQ0_REJECT__MASK__SKX_UNC_C_RXC_ISMQ0_REJECT__IV_NON_UPI = 0x8000, // ISMQ Rejects -- Non UPI IV Request
		UNC_C_RXC_ISMQ0_RETRY = 0x2c, // Number of times a transaction flowing through the ISMQ had to retry.  Transaction pass through the ISMQ as responses for requests that already exist in the Cbo.  Some examples include: when data is returned or when snoop responses come back from the cores.
		UNC_C_RXC_ISMQ0_RETRY__MASK__SKX_UNC_C_RXC_ISMQ0_RETRY__AD_REQ_VN0 = 0x100, // ISMQ Retries -- AD REQ on VN0
		UNC_C_RXC_ISMQ0_RETRY__MASK__SKX_UNC_C_RXC_ISMQ0_RETRY__AD_RSP_VN0 = 0x200, // ISMQ Retries -- AD RSP on VN0
		UNC_C_RXC_ISMQ0_RETRY__MASK__SKX_UNC_C_RXC_ISMQ0_RETRY__AK_NON_UPI = 0x4000, // ISMQ Retries -- Non UPI AK Request
		UNC_C_RXC_ISMQ0_RETRY__MASK__SKX_UNC_C_RXC_ISMQ0_RETRY__BL_NCB_VN0 = 0x1000, // ISMQ Retries -- BL NCB on VN0
		UNC_C_RXC_ISMQ0_RETRY__MASK__SKX_UNC_C_RXC_ISMQ0_RETRY__BL_NCS_VN0 = 0x2000, // ISMQ Retries -- BL NCS on VN0
		UNC_C_RXC_ISMQ0_RETRY__MASK__SKX_UNC_C_RXC_ISMQ0_RETRY__BL_RSP_VN0 = 0x400, // ISMQ Retries -- BL RSP on VN0
		UNC_C_RXC_ISMQ0_RETRY__MASK__SKX_UNC_C_RXC_ISMQ0_RETRY__BL_WB_VN0 = 0x800, // ISMQ Retries -- BL WB on VN0
		UNC_C_RXC_ISMQ0_RETRY__MASK__SKX_UNC_C_RXC_ISMQ0_RETRY__IV_NON_UPI = 0x8000, // ISMQ Retries -- Non UPI IV Request
		UNC_C_RXC_ISMQ1_REJECT = 0x25, // Number of times a transaction flowing through the ISMQ had to retry.  Transaction pass through the ISMQ as responses for requests that already exist in the Cbo.  Some examples include: when data is returned or when snoop responses come back from the cores.
		UNC_C_RXC_ISMQ1_REJECT__MASK__SKX_UNC_C_RXC_ISMQ1_REJECT__ANY0 = 0x100, // ISMQ Rejects -- ANY0
		UNC_C_RXC_ISMQ1_REJECT__MASK__SKX_UNC_C_RXC_ISMQ1_REJECT__HA = 0x200, // ISMQ Rejects -- HA
		UNC_C_RXC_ISMQ1_RETRY = 0x2d, // Number of times a transaction flowing through the ISMQ had to retry.  Transaction pass through the ISMQ as responses for requests that already exist in the Cbo.  Some examples include: when data is returned or when snoop responses come back from the cores.
		UNC_C_RXC_ISMQ1_RETRY__MASK__SKX_UNC_C_RXC_ISMQ1_RETRY__ANY0 = 0x100, // ISMQ Retries -- ANY0
		UNC_C_RXC_ISMQ1_RETRY__MASK__SKX_UNC_C_RXC_ISMQ1_RETRY__HA = 0x200, // ISMQ Retries -- HA
		UNC_C_RXC_OCCUPANCY = 0x11, // Counts number of entries in the specified Ingress queue in each cycle.
		UNC_C_RXC_OCCUPANCY__MASK__SKX_UNC_C_RXC_OCCUPANCY__IPQ = 0x400, // Ingress (from CMS) Occupancy -- IPQ
		UNC_C_RXC_OCCUPANCY__MASK__SKX_UNC_C_RXC_OCCUPANCY__IRQ = 0x100, // Ingress (from CMS) Occupancy -- IRQ
		UNC_C_RXC_OCCUPANCY__MASK__SKX_UNC_C_RXC_OCCUPANCY__RRQ = 0x4000, // Ingress (from CMS) Occupancy -- RRQ
		UNC_C_RXC_OCCUPANCY__MASK__SKX_UNC_C_RXC_OCCUPANCY__WBQ = 0x8000, // Ingress (from CMS) Occupancy -- WBQ
		UNC_C_RXC_OTHER0_RETRY = 0x2e, // Retry Queue Inserts of Transactions that were already in another Retry Q (sub-events encode the reason for the next reject)
		UNC_C_RXC_OTHER0_RETRY__MASK__SKX_UNC_C_RXC_OTHER0_RETRY__AD_REQ_VN0 = 0x100, // Other Retries -- AD REQ on VN0
		UNC_C_RXC_OTHER0_RETRY__MASK__SKX_UNC_C_RXC_OTHER0_RETRY__AD_RSP_VN0 = 0x200, // Other Retries -- AD RSP on VN0
		UNC_C_RXC_OTHER0_RETRY__MASK__SKX_UNC_C_RXC_OTHER0_RETRY__AK_NON_UPI = 0x4000, // Other Retries -- Non UPI AK Request
		UNC_C_RXC_OTHER0_RETRY__MASK__SKX_UNC_C_RXC_OTHER0_RETRY__BL_NCB_VN0 = 0x1000, // Other Retries -- BL NCB on VN0
		UNC_C_RXC_OTHER0_RETRY__MASK__SKX_UNC_C_RXC_OTHER0_RETRY__BL_NCS_VN0 = 0x2000, // Other Retries -- BL NCS on VN0
		UNC_C_RXC_OTHER0_RETRY__MASK__SKX_UNC_C_RXC_OTHER0_RETRY__BL_RSP_VN0 = 0x400, // Other Retries -- BL RSP on VN0
		UNC_C_RXC_OTHER0_RETRY__MASK__SKX_UNC_C_RXC_OTHER0_RETRY__BL_WB_VN0 = 0x800, // Other Retries -- BL WB on VN0
		UNC_C_RXC_OTHER0_RETRY__MASK__SKX_UNC_C_RXC_OTHER0_RETRY__IV_NON_UPI = 0x8000, // Other Retries -- Non UPI IV Request
		UNC_C_RXC_OTHER1_RETRY = 0x2f, // Retry Queue Inserts of Transactions that were already in another Retry Q (sub-events encode the reason for the next reject)
		UNC_C_RXC_OTHER1_RETRY__MASK__SKX_UNC_C_RXC_OTHER1_RETRY__ALLOW_SNP = 0x4000, // Other Retries -- Allow Snoop
		UNC_C_RXC_OTHER1_RETRY__MASK__SKX_UNC_C_RXC_OTHER1_RETRY__ANY0 = 0x100, // Other Retries -- ANY0
		UNC_C_RXC_OTHER1_RETRY__MASK__SKX_UNC_C_RXC_OTHER1_RETRY__HA = 0x200, // Other Retries -- HA
		UNC_C_RXC_OTHER1_RETRY__MASK__SKX_UNC_C_RXC_OTHER1_RETRY__LLC_OR_SF_WAY = 0x2000, // Other Retries -- Merging these two together to make room for ANY_REJECT_*0
		UNC_C_RXC_OTHER1_RETRY__MASK__SKX_UNC_C_RXC_OTHER1_RETRY__LLC_VICTIM = 0x400, // Other Retries -- LLC Victim
		UNC_C_RXC_OTHER1_RETRY__MASK__SKX_UNC_C_RXC_OTHER1_RETRY__PA_MATCH = 0x8000, // Other Retries -- PhyAddr Match
		UNC_C_RXC_OTHER1_RETRY__MASK__SKX_UNC_C_RXC_OTHER1_RETRY__SF_VICTIM = 0x800, // Other Retries -- SF Victim
		UNC_C_RXC_OTHER1_RETRY__MASK__SKX_UNC_C_RXC_OTHER1_RETRY__VICTIM = 0x1000, // Other Retries -- Victim
		UNC_C_RXC_PRQ0_REJECT = 0x20, // TBD
		UNC_C_RXC_PRQ0_REJECT__MASK__SKX_UNC_C_RXC_PRQ0_REJECT__AD_REQ_VN0 = 0x100, // Ingress (from CMS) Request Queue Rejects -- AD REQ on VN0
		UNC_C_RXC_PRQ0_REJECT__MASK__SKX_UNC_C_RXC_PRQ0_REJECT__AD_RSP_VN0 = 0x200, // Ingress (from CMS) Request Queue Rejects -- AD RSP on VN0
		UNC_C_RXC_PRQ0_REJECT__MASK__SKX_UNC_C_RXC_PRQ0_REJECT__AK_NON_UPI = 0x4000, // Ingress (from CMS) Request Queue Rejects -- Non UPI AK Request
		UNC_C_RXC_PRQ0_REJECT__MASK__SKX_UNC_C_RXC_PRQ0_REJECT__BL_NCB_VN0 = 0x1000, // Ingress (from CMS) Request Queue Rejects -- BL NCB on VN0
		UNC_C_RXC_PRQ0_REJECT__MASK__SKX_UNC_C_RXC_PRQ0_REJECT__BL_NCS_VN0 = 0x2000, // Ingress (from CMS) Request Queue Rejects -- BL NCS on VN0
		UNC_C_RXC_PRQ0_REJECT__MASK__SKX_UNC_C_RXC_PRQ0_REJECT__BL_RSP_VN0 = 0x400, // Ingress (from CMS) Request Queue Rejects -- BL RSP on VN0
		UNC_C_RXC_PRQ0_REJECT__MASK__SKX_UNC_C_RXC_PRQ0_REJECT__BL_WB_VN0 = 0x800, // Ingress (from CMS) Request Queue Rejects -- BL WB on VN0
		UNC_C_RXC_PRQ0_REJECT__MASK__SKX_UNC_C_RXC_PRQ0_REJECT__IV_NON_UPI = 0x8000, // Ingress (from CMS) Request Queue Rejects -- Non UPI IV Request
		UNC_C_RXC_PRQ1_REJECT = 0x21, // TBD
		UNC_C_RXC_PRQ1_REJECT__MASK__SKX_UNC_C_RXC_PRQ1_REJECT__ALLOW_SNP = 0x4000, // Ingress (from CMS) Request Queue Rejects -- Allow Snoop
		UNC_C_RXC_PRQ1_REJECT__MASK__SKX_UNC_C_RXC_PRQ1_REJECT__ANY0 = 0x100, // Ingress (from CMS) Request Queue Rejects -- ANY0
		UNC_C_RXC_PRQ1_REJECT__MASK__SKX_UNC_C_RXC_PRQ1_REJECT__HA = 0x200, // Ingress (from CMS) Request Queue Rejects -- HA
		UNC_C_RXC_PRQ1_REJECT__MASK__SKX_UNC_C_RXC_PRQ1_REJECT__LLC_OR_SF_WAY = 0x2000, // Ingress (from CMS) Request Queue Rejects -- LLC OR SF Way
		UNC_C_RXC_PRQ1_REJECT__MASK__SKX_UNC_C_RXC_PRQ1_REJECT__LLC_VICTIM = 0x400, // Ingress (from CMS) Request Queue Rejects -- LLC Victim
		UNC_C_RXC_PRQ1_REJECT__MASK__SKX_UNC_C_RXC_PRQ1_REJECT__PA_MATCH = 0x8000, // Ingress (from CMS) Request Queue Rejects -- PhyAddr Match
		UNC_C_RXC_PRQ1_REJECT__MASK__SKX_UNC_C_RXC_PRQ1_REJECT__SF_VICTIM = 0x800, // Ingress (from CMS) Request Queue Rejects -- SF Victim
		UNC_C_RXC_PRQ1_REJECT__MASK__SKX_UNC_C_RXC_PRQ1_REJECT__VICTIM = 0x1000, // Ingress (from CMS) Request Queue Rejects -- Victim
		UNC_C_RXC_REQ_Q0_RETRY = 0x2a, // REQUESTQ includes:  IRQ
		UNC_C_RXC_REQ_Q0_RETRY__MASK__SKX_UNC_C_RXC_REQ_Q0_RETRY__AD_REQ_VN0 = 0x100, // Request Queue Retries -- AD REQ on VN0
		UNC_C_RXC_REQ_Q0_RETRY__MASK__SKX_UNC_C_RXC_REQ_Q0_RETRY__AD_RSP_VN0 = 0x200, // Request Queue Retries -- AD RSP on VN0
		UNC_C_RXC_REQ_Q0_RETRY__MASK__SKX_UNC_C_RXC_REQ_Q0_RETRY__AK_NON_UPI = 0x4000, // Request Queue Retries -- Non UPI AK Request
		UNC_C_RXC_REQ_Q0_RETRY__MASK__SKX_UNC_C_RXC_REQ_Q0_RETRY__BL_NCB_VN0 = 0x1000, // Request Queue Retries -- BL NCB on VN0
		UNC_C_RXC_REQ_Q0_RETRY__MASK__SKX_UNC_C_RXC_REQ_Q0_RETRY__BL_NCS_VN0 = 0x2000, // Request Queue Retries -- BL NCS on VN0
		UNC_C_RXC_REQ_Q0_RETRY__MASK__SKX_UNC_C_RXC_REQ_Q0_RETRY__BL_RSP_VN0 = 0x400, // Request Queue Retries -- BL RSP on VN0
		UNC_C_RXC_REQ_Q0_RETRY__MASK__SKX_UNC_C_RXC_REQ_Q0_RETRY__BL_WB_VN0 = 0x800, // Request Queue Retries -- BL WB on VN0
		UNC_C_RXC_REQ_Q0_RETRY__MASK__SKX_UNC_C_RXC_REQ_Q0_RETRY__IV_NON_UPI = 0x8000, // Request Queue Retries -- Non UPI IV Request
		UNC_C_RXC_REQ_Q1_RETRY = 0x2b, // REQUESTQ includes:  IRQ
		UNC_C_RXC_REQ_Q1_RETRY__MASK__SKX_UNC_C_RXC_REQ_Q1_RETRY__ALLOW_SNP = 0x4000, // Request Queue Retries -- Allow Snoop
		UNC_C_RXC_REQ_Q1_RETRY__MASK__SKX_UNC_C_RXC_REQ_Q1_RETRY__ANY0 = 0x100, // Request Queue Retries -- ANY0
		UNC_C_RXC_REQ_Q1_RETRY__MASK__SKX_UNC_C_RXC_REQ_Q1_RETRY__HA = 0x200, // Request Queue Retries -- HA
		UNC_C_RXC_REQ_Q1_RETRY__MASK__SKX_UNC_C_RXC_REQ_Q1_RETRY__LLC_OR_SF_WAY = 0x2000, // Request Queue Retries -- Merging these two together to make room for ANY_REJECT_*0
		UNC_C_RXC_REQ_Q1_RETRY__MASK__SKX_UNC_C_RXC_REQ_Q1_RETRY__LLC_VICTIM = 0x400, // Request Queue Retries -- LLC Victim
		UNC_C_RXC_REQ_Q1_RETRY__MASK__SKX_UNC_C_RXC_REQ_Q1_RETRY__PA_MATCH = 0x8000, // Request Queue Retries -- PhyAddr Match
		UNC_C_RXC_REQ_Q1_RETRY__MASK__SKX_UNC_C_RXC_REQ_Q1_RETRY__SF_VICTIM = 0x800, // Request Queue Retries -- SF Victim
		UNC_C_RXC_REQ_Q1_RETRY__MASK__SKX_UNC_C_RXC_REQ_Q1_RETRY__VICTIM = 0x1000, // Request Queue Retries -- Victim
		UNC_C_RXC_RRQ0_REJECT = 0x26, // Number of times a transaction flowing through the RRQ (Remote Response Queue) had to retry.
		UNC_C_RXC_RRQ0_REJECT__MASK__SKX_UNC_C_RXC_RRQ0_REJECT__AD_REQ_VN0 = 0x100, // RRQ Rejects -- AD REQ on VN0
		UNC_C_RXC_RRQ0_REJECT__MASK__SKX_UNC_C_RXC_RRQ0_REJECT__AD_RSP_VN0 = 0x200, // RRQ Rejects -- AD RSP on VN0
		UNC_C_RXC_RRQ0_REJECT__MASK__SKX_UNC_C_RXC_RRQ0_REJECT__AK_NON_UPI = 0x4000, // RRQ Rejects -- Non UPI AK Request
		UNC_C_RXC_RRQ0_REJECT__MASK__SKX_UNC_C_RXC_RRQ0_REJECT__BL_NCB_VN0 = 0x1000, // RRQ Rejects -- BL NCB on VN0
		UNC_C_RXC_RRQ0_REJECT__MASK__SKX_UNC_C_RXC_RRQ0_REJECT__BL_NCS_VN0 = 0x2000, // RRQ Rejects -- BL NCS on VN0
		UNC_C_RXC_RRQ0_REJECT__MASK__SKX_UNC_C_RXC_RRQ0_REJECT__BL_RSP_VN0 = 0x400, // RRQ Rejects -- BL RSP on VN0
		UNC_C_RXC_RRQ0_REJECT__MASK__SKX_UNC_C_RXC_RRQ0_REJECT__BL_WB_VN0 = 0x800, // RRQ Rejects -- BL WB on VN0
		UNC_C_RXC_RRQ0_REJECT__MASK__SKX_UNC_C_RXC_RRQ0_REJECT__IV_NON_UPI = 0x8000, // RRQ Rejects -- Non UPI IV Request
		UNC_C_RXC_RRQ1_REJECT = 0x27, // Number of times a transaction flowing through the RRQ (Remote Response Queue) had to retry.
		UNC_C_RXC_RRQ1_REJECT__MASK__SKX_UNC_C_RXC_RRQ1_REJECT__ALLOW_SNP = 0x4000, // RRQ Rejects -- Allow Snoop
		UNC_C_RXC_RRQ1_REJECT__MASK__SKX_UNC_C_RXC_RRQ1_REJECT__ANY0 = 0x100, // RRQ Rejects -- ANY0
		UNC_C_RXC_RRQ1_REJECT__MASK__SKX_UNC_C_RXC_RRQ1_REJECT__HA = 0x200, // RRQ Rejects -- HA
		UNC_C_RXC_RRQ1_REJECT__MASK__SKX_UNC_C_RXC_RRQ1_REJECT__LLC_OR_SF_WAY = 0x2000, // RRQ Rejects -- Merging these two together to make room for ANY_REJECT_*0
		UNC_C_RXC_RRQ1_REJECT__MASK__SKX_UNC_C_RXC_RRQ1_REJECT__LLC_VICTIM = 0x400, // RRQ Rejects -- LLC Victim
		UNC_C_RXC_RRQ1_REJECT__MASK__SKX_UNC_C_RXC_RRQ1_REJECT__PA_MATCH = 0x8000, // RRQ Rejects -- PhyAddr Match
		UNC_C_RXC_RRQ1_REJECT__MASK__SKX_UNC_C_RXC_RRQ1_REJECT__SF_VICTIM = 0x800, // RRQ Rejects -- SF Victim
		UNC_C_RXC_RRQ1_REJECT__MASK__SKX_UNC_C_RXC_RRQ1_REJECT__VICTIM = 0x1000, // RRQ Rejects -- Victim
		UNC_C_RXC_WBQ0_REJECT = 0x28, // Number of times a transaction flowing through the WBQ (Writeback Queue) had to retry.
		UNC_C_RXC_WBQ0_REJECT__MASK__SKX_UNC_C_RXC_WBQ0_REJECT__AD_REQ_VN0 = 0x100, // WBQ Rejects -- AD REQ on VN0
		UNC_C_RXC_WBQ0_REJECT__MASK__SKX_UNC_C_RXC_WBQ0_REJECT__AD_RSP_VN0 = 0x200, // WBQ Rejects -- AD RSP on VN0
		UNC_C_RXC_WBQ0_REJECT__MASK__SKX_UNC_C_RXC_WBQ0_REJECT__AK_NON_UPI = 0x4000, // WBQ Rejects -- Non UPI AK Request
		UNC_C_RXC_WBQ0_REJECT__MASK__SKX_UNC_C_RXC_WBQ0_REJECT__BL_NCB_VN0 = 0x1000, // WBQ Rejects -- BL NCB on VN0
		UNC_C_RXC_WBQ0_REJECT__MASK__SKX_UNC_C_RXC_WBQ0_REJECT__BL_NCS_VN0 = 0x2000, // WBQ Rejects -- BL NCS on VN0
		UNC_C_RXC_WBQ0_REJECT__MASK__SKX_UNC_C_RXC_WBQ0_REJECT__BL_RSP_VN0 = 0x400, // WBQ Rejects -- BL RSP on VN0
		UNC_C_RXC_WBQ0_REJECT__MASK__SKX_UNC_C_RXC_WBQ0_REJECT__BL_WB_VN0 = 0x800, // WBQ Rejects -- BL WB on VN0
		UNC_C_RXC_WBQ0_REJECT__MASK__SKX_UNC_C_RXC_WBQ0_REJECT__IV_NON_UPI = 0x8000, // WBQ Rejects -- Non UPI IV Request
		UNC_C_RXC_WBQ1_REJECT = 0x29, // Number of times a transaction flowing through the WBQ (Writeback Queue) had to retry.
		UNC_C_RXC_WBQ1_REJECT__MASK__SKX_UNC_C_RXC_WBQ1_REJECT__ALLOW_SNP = 0x4000, // WBQ Rejects -- Allow Snoop
		UNC_C_RXC_WBQ1_REJECT__MASK__SKX_UNC_C_RXC_WBQ1_REJECT__ANY0 = 0x100, // WBQ Rejects -- ANY0
		UNC_C_RXC_WBQ1_REJECT__MASK__SKX_UNC_C_RXC_WBQ1_REJECT__HA = 0x200, // WBQ Rejects -- HA
		UNC_C_RXC_WBQ1_REJECT__MASK__SKX_UNC_C_RXC_WBQ1_REJECT__LLC_OR_SF_WAY = 0x2000, // WBQ Rejects -- Merging these two together to make room for ANY_REJECT_*0
		UNC_C_RXC_WBQ1_REJECT__MASK__SKX_UNC_C_RXC_WBQ1_REJECT__LLC_VICTIM = 0x400, // WBQ Rejects -- LLC Victim
		UNC_C_RXC_WBQ1_REJECT__MASK__SKX_UNC_C_RXC_WBQ1_REJECT__PA_MATCH = 0x8000, // WBQ Rejects -- PhyAddr Match
		UNC_C_RXC_WBQ1_REJECT__MASK__SKX_UNC_C_RXC_WBQ1_REJECT__SF_VICTIM = 0x800, // WBQ Rejects -- SF Victim
		UNC_C_RXC_WBQ1_REJECT__MASK__SKX_UNC_C_RXC_WBQ1_REJECT__VICTIM = 0x1000, // WBQ Rejects -- Victim
		UNC_C_RXR_BUSY_STARVED = 0xb4, // Counts cycles under injection starvation mode.  This starvation is triggered when the CMS Ingress cannot send a transaction onto the mesh for a long period of time.  In this case
		UNC_C_RXR_BUSY_STARVED__MASK__SKX_UNC_C_RXR_BUSY_STARVED__AD_BNC = 0x100, // Transgress Injection Starvation -- AD - Bounce
		UNC_C_RXR_BUSY_STARVED__MASK__SKX_UNC_C_RXR_BUSY_STARVED__AD_CRD = 0x1000, // Transgress Injection Starvation -- AD - Credit
		UNC_C_RXR_BUSY_STARVED__MASK__SKX_UNC_C_RXR_BUSY_STARVED__BL_BNC = 0x400, // Transgress Injection Starvation -- BL - Bounce
		UNC_C_RXR_BUSY_STARVED__MASK__SKX_UNC_C_RXR_BUSY_STARVED__BL_CRD = 0x4000, // Transgress Injection Starvation -- BL - Credit
		UNC_C_RXR_BYPASS = 0xb2, // Number of packets bypassing the CMS Ingress
		UNC_C_RXR_BYPASS__MASK__SKX_UNC_C_RXR_BYPASS__AD_BNC = 0x100, // Transgress Ingress Bypass -- AD - Bounce
		UNC_C_RXR_BYPASS__MASK__SKX_UNC_C_RXR_BYPASS__AD_CRD = 0x1000, // Transgress Ingress Bypass -- AD - Credit
		UNC_C_RXR_BYPASS__MASK__SKX_UNC_C_RXR_BYPASS__AK_BNC = 0x200, // Transgress Ingress Bypass -- AK - Bounce
		UNC_C_RXR_BYPASS__MASK__SKX_UNC_C_RXR_BYPASS__BL_BNC = 0x400, // Transgress Ingress Bypass -- BL - Bounce
		UNC_C_RXR_BYPASS__MASK__SKX_UNC_C_RXR_BYPASS__BL_CRD = 0x4000, // Transgress Ingress Bypass -- BL - Credit
		UNC_C_RXR_BYPASS__MASK__SKX_UNC_C_RXR_BYPASS__IV_BNC = 0x800, // Transgress Ingress Bypass -- IV - Bounce
		UNC_C_RXR_CRD_STARVED = 0xb3, // Counts cycles under injection starvation mode.  This starvation is triggered when the CMS Ingress cannot send a transaction onto the mesh for a long period of time.  In this case
		UNC_C_RXR_CRD_STARVED__MASK__SKX_UNC_C_RXR_CRD_STARVED__AD_BNC = 0x100, // Transgress Injection Starvation -- AD - Bounce
		UNC_C_RXR_CRD_STARVED__MASK__SKX_UNC_C_RXR_CRD_STARVED__AD_CRD = 0x1000, // Transgress Injection Starvation -- AD - Credit
		UNC_C_RXR_CRD_STARVED__MASK__SKX_UNC_C_RXR_CRD_STARVED__AK_BNC = 0x200, // Transgress Injection Starvation -- AK - Bounce
		UNC_C_RXR_CRD_STARVED__MASK__SKX_UNC_C_RXR_CRD_STARVED__BL_BNC = 0x400, // Transgress Injection Starvation -- BL - Bounce
		UNC_C_RXR_CRD_STARVED__MASK__SKX_UNC_C_RXR_CRD_STARVED__BL_CRD = 0x4000, // Transgress Injection Starvation -- BL - Credit
		UNC_C_RXR_CRD_STARVED__MASK__SKX_UNC_C_RXR_CRD_STARVED__IFV = 0x8000, // Transgress Injection Starvation -- IFV - Credit
		UNC_C_RXR_CRD_STARVED__MASK__SKX_UNC_C_RXR_CRD_STARVED__IV_BNC = 0x800, // Transgress Injection Starvation -- IV - Bounce
		UNC_C_RXR_INSERTS = 0xb1, // Number of allocations into the CMS Ingress  The Ingress is used to queue up requests received from the mesh
		UNC_C_RXR_INSERTS__MASK__SKX_UNC_C_RXR_INSERTS__AD_BNC = 0x100, // Transgress Ingress Allocations -- AD - Bounce
		UNC_C_RXR_INSERTS__MASK__SKX_UNC_C_RXR_INSERTS__AD_CRD = 0x1000, // Transgress Ingress Allocations -- AD - Credit
		UNC_C_RXR_INSERTS__MASK__SKX_UNC_C_RXR_INSERTS__AK_BNC = 0x200, // Transgress Ingress Allocations -- AK - Bounce
		UNC_C_RXR_INSERTS__MASK__SKX_UNC_C_RXR_INSERTS__BL_BNC = 0x400, // Transgress Ingress Allocations -- BL - Bounce
		UNC_C_RXR_INSERTS__MASK__SKX_UNC_C_RXR_INSERTS__BL_CRD = 0x4000, // Transgress Ingress Allocations -- BL - Credit
		UNC_C_RXR_INSERTS__MASK__SKX_UNC_C_RXR_INSERTS__IV_BNC = 0x800, // Transgress Ingress Allocations -- IV - Bounce
		UNC_C_RXR_OCCUPANCY = 0xb0, // Occupancy event for the Ingress buffers in the CMS  The Ingress is used to queue up requests received from the mesh
		UNC_C_RXR_OCCUPANCY__MASK__SKX_UNC_C_RXR_OCCUPANCY__AD_BNC = 0x100, // Transgress Ingress Occupancy -- AD - Bounce
		UNC_C_RXR_OCCUPANCY__MASK__SKX_UNC_C_RXR_OCCUPANCY__AD_CRD = 0x1000, // Transgress Ingress Occupancy -- AD - Credit
		UNC_C_RXR_OCCUPANCY__MASK__SKX_UNC_C_RXR_OCCUPANCY__AK_BNC = 0x200, // Transgress Ingress Occupancy -- AK - Bounce
		UNC_C_RXR_OCCUPANCY__MASK__SKX_UNC_C_RXR_OCCUPANCY__BL_BNC = 0x400, // Transgress Ingress Occupancy -- BL - Bounce
		UNC_C_RXR_OCCUPANCY__MASK__SKX_UNC_C_RXR_OCCUPANCY__BL_CRD = 0x4000, // Transgress Ingress Occupancy -- BL - Credit
		UNC_C_RXR_OCCUPANCY__MASK__SKX_UNC_C_RXR_OCCUPANCY__IV_BNC = 0x800, // Transgress Ingress Occupancy -- IV - Bounce
		UNC_C_SF_EVICTION = 0x3d, // TBD
		UNC_C_SF_EVICTION__MASK__SKX_UNC_C_SF_EVICTION__E_STATE = 0x200, // Snoop Filter Eviction -- E state
		UNC_C_SF_EVICTION__MASK__SKX_UNC_C_SF_EVICTION__M_STATE = 0x100, // Snoop Filter Eviction -- M state
		UNC_C_SF_EVICTION__MASK__SKX_UNC_C_SF_EVICTION__S_STATE = 0x400, // Snoop Filter Eviction -- S state
		UNC_C_SNOOPS_SENT = 0x51, // Counts the number of snoops issued by the HA.
		UNC_C_SNOOPS_SENT__MASK__SKX_UNC_C_SNOOPS_SENT__ALL = 0x100, // Snoops Sent -- All
		UNC_C_SNOOPS_SENT__MASK__SKX_UNC_C_SNOOPS_SENT__BCST_LOCAL = 0x1000, // Snoops Sent -- Broadcast snoop for Local Requests
		UNC_C_SNOOPS_SENT__MASK__SKX_UNC_C_SNOOPS_SENT__BCST_REMOTE = 0x2000, // Snoops Sent -- Broadcast snoops for Remote Requests
		UNC_C_SNOOPS_SENT__MASK__SKX_UNC_C_SNOOPS_SENT__DIRECT_LOCAL = 0x4000, // Snoops Sent -- Directed snoops for Local Requests
		UNC_C_SNOOPS_SENT__MASK__SKX_UNC_C_SNOOPS_SENT__DIRECT_REMOTE = 0x8000, // Snoops Sent -- Directed snoops for Remote Requests
		UNC_C_SNOOPS_SENT__MASK__SKX_UNC_C_SNOOPS_SENT__LOCAL = 0x400, // Snoops Sent -- Broadcast or directed Snoops sent for Local Requests
		UNC_C_SNOOPS_SENT__MASK__SKX_UNC_C_SNOOPS_SENT__REMOTE = 0x800, // Snoops Sent -- Broadcast or directed Snoops sent for Remote Requests
		UNC_C_SNOOP_RESP = 0x5c, // Counts the total number of RspI snoop responses received.  Whenever a snoops are issued
		UNC_C_SNOOP_RESP__MASK__SKX_UNC_C_SNOOP_RESP__RSPCNFLCTS = 0x4000, // Snoop Responses Received -- RSPCNFLCT*
		UNC_C_SNOOP_RESP__MASK__SKX_UNC_C_SNOOP_RESP__RSPFWD = 0x8000, // Snoop Responses Received -- RspFwd
		UNC_C_SNOOP_RESP__MASK__SKX_UNC_C_SNOOP_RESP__RSPI = 0x100, // Snoop Responses Received -- RspI
		UNC_C_SNOOP_RESP__MASK__SKX_UNC_C_SNOOP_RESP__RSPIFWD = 0x400, // Snoop Responses Received -- RspIFwd
		UNC_C_SNOOP_RESP__MASK__SKX_UNC_C_SNOOP_RESP__RSPS = 0x200, // Snoop Responses Received -- RspS
		UNC_C_SNOOP_RESP__MASK__SKX_UNC_C_SNOOP_RESP__RSPSFWD = 0x800, // Snoop Responses Received -- RspSFwd
		UNC_C_SNOOP_RESP__MASK__SKX_UNC_C_SNOOP_RESP__RSP_FWD_WB = 0x2000, // Snoop Responses Received -- Rsp*Fwd*WB
		UNC_C_SNOOP_RESP__MASK__SKX_UNC_C_SNOOP_RESP__RSP_WBWB = 0x1000, // Snoop Responses Received -- Rsp*WB
		UNC_C_SNOOP_RESP_LOCAL = 0x5d, // Number of snoop responses received for a Local  request
		UNC_C_SNOOP_RESP_LOCAL__MASK__SKX_UNC_C_SNOOP_RESP_LOCAL__RSPFWD = 0x8000, // Snoop Responses Received Local -- RspFwd
		UNC_C_SNOOP_RESP_LOCAL__MASK__SKX_UNC_C_SNOOP_RESP_LOCAL__RSPI = 0x100, // Snoop Responses Received Local -- RspI
		UNC_C_SNOOP_RESP_LOCAL__MASK__SKX_UNC_C_SNOOP_RESP_LOCAL__RSPIFWD = 0x400, // Snoop Responses Received Local -- RspIFwd
		UNC_C_SNOOP_RESP_LOCAL__MASK__SKX_UNC_C_SNOOP_RESP_LOCAL__RSPS = 0x200, // Snoop Responses Received Local -- RspS
		UNC_C_SNOOP_RESP_LOCAL__MASK__SKX_UNC_C_SNOOP_RESP_LOCAL__RSPSFWD = 0x800, // Snoop Responses Received Local -- RspSFwd
		UNC_C_SNOOP_RESP_LOCAL__MASK__SKX_UNC_C_SNOOP_RESP_LOCAL__RSP_FWD_WB = 0x2000, // Snoop Responses Received Local -- Rsp*FWD*WB
		UNC_C_SNOOP_RESP_LOCAL__MASK__SKX_UNC_C_SNOOP_RESP_LOCAL__RSP_WB = 0x1000, // Snoop Responses Received Local -- Rsp*WB
		UNC_C_STALL_NO_TXR_HORZ_CRD_AD_AG0 = 0xd0, // Number of cycles the AD Agent 0 Egress Buffer is stalled waiting for a TGR credit to become available
		UNC_C_STALL_NO_TXR_HORZ_CRD_AD_AG0__MASK__SKX_UNC_C_STALL_NO_TXR_HORZ_CRD_AD_AG0__TGR0 = 0x100, // Stall on No AD Agent0 Transgress Credits -- For Transgress 0
		UNC_C_STALL_NO_TXR_HORZ_CRD_AD_AG0__MASK__SKX_UNC_C_STALL_NO_TXR_HORZ_CRD_AD_AG0__TGR1 = 0x200, // Stall on No AD Agent0 Transgress Credits -- For Transgress 1
		UNC_C_STALL_NO_TXR_HORZ_CRD_AD_AG0__MASK__SKX_UNC_C_STALL_NO_TXR_HORZ_CRD_AD_AG0__TGR2 = 0x400, // Stall on No AD Agent0 Transgress Credits -- For Transgress 2
		UNC_C_STALL_NO_TXR_HORZ_CRD_AD_AG0__MASK__SKX_UNC_C_STALL_NO_TXR_HORZ_CRD_AD_AG0__TGR3 = 0x800, // Stall on No AD Agent0 Transgress Credits -- For Transgress 3
		UNC_C_STALL_NO_TXR_HORZ_CRD_AD_AG0__MASK__SKX_UNC_C_STALL_NO_TXR_HORZ_CRD_AD_AG0__TGR4 = 0x1000, // Stall on No AD Agent0 Transgress Credits -- For Transgress 4
		UNC_C_STALL_NO_TXR_HORZ_CRD_AD_AG0__MASK__SKX_UNC_C_STALL_NO_TXR_HORZ_CRD_AD_AG0__TGR5 = 0x2000, // Stall on No AD Agent0 Transgress Credits -- For Transgress 5
		UNC_C_STALL_NO_TXR_HORZ_CRD_AD_AG1 = 0xd2, // Number of cycles the AD Agent 1 Egress Buffer is stalled waiting for a TGR credit to become available
		UNC_C_STALL_NO_TXR_HORZ_CRD_AD_AG1__MASK__SKX_UNC_C_STALL_NO_TXR_HORZ_CRD_AD_AG1__TGR0 = 0x100, // Stall on No AD Agent1 Transgress Credits -- For Transgress 0
		UNC_C_STALL_NO_TXR_HORZ_CRD_AD_AG1__MASK__SKX_UNC_C_STALL_NO_TXR_HORZ_CRD_AD_AG1__TGR1 = 0x200, // Stall on No AD Agent1 Transgress Credits -- For Transgress 1
		UNC_C_STALL_NO_TXR_HORZ_CRD_AD_AG1__MASK__SKX_UNC_C_STALL_NO_TXR_HORZ_CRD_AD_AG1__TGR2 = 0x400, // Stall on No AD Agent1 Transgress Credits -- For Transgress 2
		UNC_C_STALL_NO_TXR_HORZ_CRD_AD_AG1__MASK__SKX_UNC_C_STALL_NO_TXR_HORZ_CRD_AD_AG1__TGR3 = 0x800, // Stall on No AD Agent1 Transgress Credits -- For Transgress 3
		UNC_C_STALL_NO_TXR_HORZ_CRD_AD_AG1__MASK__SKX_UNC_C_STALL_NO_TXR_HORZ_CRD_AD_AG1__TGR4 = 0x1000, // Stall on No AD Agent1 Transgress Credits -- For Transgress 4
		UNC_C_STALL_NO_TXR_HORZ_CRD_AD_AG1__MASK__SKX_UNC_C_STALL_NO_TXR_HORZ_CRD_AD_AG1__TGR5 = 0x2000, // Stall on No AD Agent1 Transgress Credits -- For Transgress 5
		UNC_C_STALL_NO_TXR_HORZ_CRD_BL_AG0 = 0xd4, // Number of cycles the BL Agent 0 Egress Buffer is stalled waiting for a TGR credit to become available
		UNC_C_STALL_NO_TXR_HORZ_CRD_BL_AG0__MASK__SKX_UNC_C_STALL_NO_TXR_HORZ_CRD_BL_AG0__TGR0 = 0x100, // Stall on No BL Agent0 Transgress Credits -- For Transgress 0
		UNC_C_STALL_NO_TXR_HORZ_CRD_BL_AG0__MASK__SKX_UNC_C_STALL_NO_TXR_HORZ_CRD_BL_AG0__TGR1 = 0x200, // Stall on No BL Agent0 Transgress Credits -- For Transgress 1
		UNC_C_STALL_NO_TXR_HORZ_CRD_BL_AG0__MASK__SKX_UNC_C_STALL_NO_TXR_HORZ_CRD_BL_AG0__TGR2 = 0x400, // Stall on No BL Agent0 Transgress Credits -- For Transgress 2
		UNC_C_STALL_NO_TXR_HORZ_CRD_BL_AG0__MASK__SKX_UNC_C_STALL_NO_TXR_HORZ_CRD_BL_AG0__TGR3 = 0x800, // Stall on No BL Agent0 Transgress Credits -- For Transgress 3
		UNC_C_STALL_NO_TXR_HORZ_CRD_BL_AG0__MASK__SKX_UNC_C_STALL_NO_TXR_HORZ_CRD_BL_AG0__TGR4 = 0x1000, // Stall on No BL Agent0 Transgress Credits -- For Transgress 4
		UNC_C_STALL_NO_TXR_HORZ_CRD_BL_AG0__MASK__SKX_UNC_C_STALL_NO_TXR_HORZ_CRD_BL_AG0__TGR5 = 0x2000, // Stall on No BL Agent0 Transgress Credits -- For Transgress 5
		UNC_C_STALL_NO_TXR_HORZ_CRD_BL_AG1 = 0xd6, // Number of cycles the BL Agent 1 Egress Buffer is stalled waiting for a TGR credit to become available
		UNC_C_STALL_NO_TXR_HORZ_CRD_BL_AG1__MASK__SKX_UNC_C_STALL_NO_TXR_HORZ_CRD_BL_AG1__TGR0 = 0x100, // Stall on No BL Agent1 Transgress Credits -- For Transgress 0
		UNC_C_STALL_NO_TXR_HORZ_CRD_BL_AG1__MASK__SKX_UNC_C_STALL_NO_TXR_HORZ_CRD_BL_AG1__TGR1 = 0x200, // Stall on No BL Agent1 Transgress Credits -- For Transgress 1
		UNC_C_STALL_NO_TXR_HORZ_CRD_BL_AG1__MASK__SKX_UNC_C_STALL_NO_TXR_HORZ_CRD_BL_AG1__TGR2 = 0x400, // Stall on No BL Agent1 Transgress Credits -- For Transgress 2
		UNC_C_STALL_NO_TXR_HORZ_CRD_BL_AG1__MASK__SKX_UNC_C_STALL_NO_TXR_HORZ_CRD_BL_AG1__TGR3 = 0x800, // Stall on No BL Agent1 Transgress Credits -- For Transgress 3
		UNC_C_STALL_NO_TXR_HORZ_CRD_BL_AG1__MASK__SKX_UNC_C_STALL_NO_TXR_HORZ_CRD_BL_AG1__TGR4 = 0x1000, // Stall on No BL Agent1 Transgress Credits -- For Transgress 4
		UNC_C_STALL_NO_TXR_HORZ_CRD_BL_AG1__MASK__SKX_UNC_C_STALL_NO_TXR_HORZ_CRD_BL_AG1__TGR5 = 0x2000, // Stall on No BL Agent1 Transgress Credits -- For Transgress 5
		UNC_C_TOR_INSERTS = 0x35, // Counts the number of entries successfully inserted into the TOR that match qualifications specified by the subevent.
		UNC_C_TOR_INSERTS__MASK__SKX_UNC_C_TOR_INSERTS__ALL_HIT = 0x1500, // TOR Inserts -- Hits from Local
		UNC_C_TOR_INSERTS__MASK__SKX_UNC_C_TOR_INSERTS__ALL_IO_IA = 0x3500, // TOR Inserts -- All from Local iA and IO
		UNC_C_TOR_INSERTS__MASK__SKX_UNC_C_TOR_INSERTS__ALL_MISS = 0x2500, // TOR Inserts -- Misses from Local
		UNC_C_TOR_INSERTS__MASK__SKX_UNC_C_TOR_INSERTS__EVICT = 0x200, // TOR Inserts -- SF/LLC Evictions
		UNC_C_TOR_INSERTS__MASK__SKX_UNC_C_TOR_INSERTS__HIT = 0x1000, // TOR Inserts -- Hit (Not a Miss)
		UNC_C_TOR_INSERTS__MASK__SKX_UNC_C_TOR_INSERTS__IA = 0x3100, // TOR Inserts -- All from Local iA
		UNC_C_TOR_INSERTS__MASK__SKX_UNC_C_TOR_INSERTS__IA_HIT = 0x1100, // TOR Inserts -- Hits from Local iA
		UNC_C_TOR_INSERTS__MASK__SKX_UNC_C_TOR_INSERTS__IA_MISS = 0x2100, // TOR Inserts -- Misses from Local iA
		UNC_C_TOR_INSERTS__MASK__SKX_UNC_C_TOR_INSERTS__IO = 0x3400, // TOR Inserts -- All from Local IO
		UNC_C_TOR_INSERTS__MASK__SKX_UNC_C_TOR_INSERTS__IO_HIT = 0x1400, // TOR Inserts -- Hits from Local IO
		UNC_C_TOR_INSERTS__MASK__SKX_UNC_C_TOR_INSERTS__IO_MISS = 0x2400, // TOR Inserts -- Misses from Local IO
		UNC_C_TOR_INSERTS__MASK__SKX_UNC_C_TOR_INSERTS__MISS = 0x2000, // TOR Inserts -- Miss
		UNC_C_TOR_INSERTS__MASK__SKX_UNC_C_TOR_INSERTS__IPQ = 0x800, // TOR Inserts -- IPQ
		UNC_C_TOR_INSERTS__MASK__SKX_UNC_C_TOR_INSERTS__IRQ = 0x100, // TOR Inserts -- IRQ
		UNC_C_TOR_INSERTS__MASK__SKX_UNC_C_TOR_INSERTS__PRQ = 0x400, // TOR Inserts -- PRQ
		UNC_C_TOR_OCCUPANCY = 0x36, // For each cycle
		UNC_C_TOR_OCCUPANCY__MASK__SKX_UNC_C_TOR_OCCUPANCY__ALL = 0x3700, // TOR Occupancy -- All from Local
		UNC_C_TOR_OCCUPANCY__MASK__SKX_UNC_C_TOR_OCCUPANCY__ALL_HIT = 0x1700, // TOR Occupancy -- Hits from Local
		UNC_C_TOR_OCCUPANCY__MASK__SKX_UNC_C_TOR_OCCUPANCY__ALL_MISS = 0x2700, // TOR Occupancy -- Misses from Local
		UNC_C_TOR_OCCUPANCY__MASK__SKX_UNC_C_TOR_OCCUPANCY__EVICT = 0x200, // TOR Occupancy -- SF/LLC Evictions
		UNC_C_TOR_OCCUPANCY__MASK__SKX_UNC_C_TOR_OCCUPANCY__HIT = 0x1000, // TOR Occupancy -- Hit (Not a Miss)
		UNC_C_TOR_OCCUPANCY__MASK__SKX_UNC_C_TOR_OCCUPANCY__IA = 0x3100, // TOR Occupancy -- All from Local iA
		UNC_C_TOR_OCCUPANCY__MASK__SKX_UNC_C_TOR_OCCUPANCY__IA_HIT = 0x1100, // TOR Occupancy -- Hits from Local iA
		UNC_C_TOR_OCCUPANCY__MASK__SKX_UNC_C_TOR_OCCUPANCY__IA_MISS = 0x2100, // TOR Occupancy -- Misses from Local iA
		UNC_C_TOR_OCCUPANCY__MASK__SKX_UNC_C_TOR_OCCUPANCY__IO = 0x3400, // TOR Occupancy -- All from Local IO
		UNC_C_TOR_OCCUPANCY__MASK__SKX_UNC_C_TOR_OCCUPANCY__IO_HIT = 0x1400, // TOR Occupancy -- Hits from Local IO
		UNC_C_TOR_OCCUPANCY__MASK__SKX_UNC_C_TOR_OCCUPANCY__IO_MISS = 0x2400, // TOR Occupancy -- Misses from Local IO
		UNC_C_TOR_OCCUPANCY__MASK__SKX_UNC_C_TOR_OCCUPANCY__MISS = 0x2000, // TOR Occupancy -- Miss
		UNC_C_TOR_OCCUPANCY__MASK__SKX_UNC_C_TOR_OCCUPANCY__IPQ = 0x800, // TOR Occupancy -- IPQ
		UNC_C_TOR_OCCUPANCY__MASK__SKX_UNC_C_TOR_OCCUPANCY__IRQ = 0x100, // TOR Occupancy -- IRQ
		UNC_C_TOR_OCCUPANCY__MASK__SKX_UNC_C_TOR_OCCUPANCY__PRQ = 0x400, // TOR Occupancy -- PRQ
		UNC_C_TXR_HORZ_ADS_USED = 0x9d, // Number of packets using the Horizontal Anti-Deadlock Slot
		UNC_C_TXR_HORZ_ADS_USED__MASK__SKX_UNC_C_TXR_HORZ_ADS_USED__AD_BNC = 0x100, // CMS Horizontal ADS Used -- AD - Bounce
		UNC_C_TXR_HORZ_ADS_USED__MASK__SKX_UNC_C_TXR_HORZ_ADS_USED__AD_CRD = 0x1000, // CMS Horizontal ADS Used -- AD - Credit
		UNC_C_TXR_HORZ_ADS_USED__MASK__SKX_UNC_C_TXR_HORZ_ADS_USED__AK_BNC = 0x200, // CMS Horizontal ADS Used -- AK - Bounce
		UNC_C_TXR_HORZ_ADS_USED__MASK__SKX_UNC_C_TXR_HORZ_ADS_USED__BL_BNC = 0x400, // CMS Horizontal ADS Used -- BL - Bounce
		UNC_C_TXR_HORZ_ADS_USED__MASK__SKX_UNC_C_TXR_HORZ_ADS_USED__BL_CRD = 0x4000, // CMS Horizontal ADS Used -- BL - Credit
		UNC_C_TXR_HORZ_BYPASS = 0x9f, // Number of packets bypassing the Horizontal Egress
		UNC_C_TXR_HORZ_BYPASS__MASK__SKX_UNC_C_TXR_HORZ_BYPASS__AD_BNC = 0x100, // CMS Horizontal Bypass Used -- AD - Bounce
		UNC_C_TXR_HORZ_BYPASS__MASK__SKX_UNC_C_TXR_HORZ_BYPASS__AD_CRD = 0x1000, // CMS Horizontal Bypass Used -- AD - Credit
		UNC_C_TXR_HORZ_BYPASS__MASK__SKX_UNC_C_TXR_HORZ_BYPASS__AK_BNC = 0x200, // CMS Horizontal Bypass Used -- AK - Bounce
		UNC_C_TXR_HORZ_BYPASS__MASK__SKX_UNC_C_TXR_HORZ_BYPASS__BL_BNC = 0x400, // CMS Horizontal Bypass Used -- BL - Bounce
		UNC_C_TXR_HORZ_BYPASS__MASK__SKX_UNC_C_TXR_HORZ_BYPASS__BL_CRD = 0x4000, // CMS Horizontal Bypass Used -- BL - Credit
		UNC_C_TXR_HORZ_BYPASS__MASK__SKX_UNC_C_TXR_HORZ_BYPASS__IV_BNC = 0x800, // CMS Horizontal Bypass Used -- IV - Bounce
		UNC_C_TXR_HORZ_CYCLES_FULL = 0x96, // Cycles the Transgress buffers in the Common Mesh Stop are Full.  The egress is used to queue up requests destined for the Horizontal Ring on the Mesh.
		UNC_C_TXR_HORZ_CYCLES_FULL__MASK__SKX_UNC_C_TXR_HORZ_CYCLES_FULL__AD_BNC = 0x100, // Cycles CMS Horizontal Egress Queue is Full -- AD - Bounce
		UNC_C_TXR_HORZ_CYCLES_FULL__MASK__SKX_UNC_C_TXR_HORZ_CYCLES_FULL__AD_CRD = 0x1000, // Cycles CMS Horizontal Egress Queue is Full -- AD - Credit
		UNC_C_TXR_HORZ_CYCLES_FULL__MASK__SKX_UNC_C_TXR_HORZ_CYCLES_FULL__AK_BNC = 0x200, // Cycles CMS Horizontal Egress Queue is Full -- AK - Bounce
		UNC_C_TXR_HORZ_CYCLES_FULL__MASK__SKX_UNC_C_TXR_HORZ_CYCLES_FULL__BL_BNC = 0x400, // Cycles CMS Horizontal Egress Queue is Full -- BL - Bounce
		UNC_C_TXR_HORZ_CYCLES_FULL__MASK__SKX_UNC_C_TXR_HORZ_CYCLES_FULL__BL_CRD = 0x4000, // Cycles CMS Horizontal Egress Queue is Full -- BL - Credit
		UNC_C_TXR_HORZ_CYCLES_FULL__MASK__SKX_UNC_C_TXR_HORZ_CYCLES_FULL__IV_BNC = 0x800, // Cycles CMS Horizontal Egress Queue is Full -- IV - Bounce
		UNC_C_TXR_HORZ_CYCLES_NE = 0x97, // Cycles the Transgress buffers in the Common Mesh Stop are Not-Empty.  The egress is used to queue up requests destined for the Horizontal Ring on the Mesh.
		UNC_C_TXR_HORZ_CYCLES_NE__MASK__SKX_UNC_C_TXR_HORZ_CYCLES_NE__AD_BNC = 0x100, // Cycles CMS Horizontal Egress Queue is Not Empty -- AD - Bounce
		UNC_C_TXR_HORZ_CYCLES_NE__MASK__SKX_UNC_C_TXR_HORZ_CYCLES_NE__AD_CRD = 0x1000, // Cycles CMS Horizontal Egress Queue is Not Empty -- AD - Credit
		UNC_C_TXR_HORZ_CYCLES_NE__MASK__SKX_UNC_C_TXR_HORZ_CYCLES_NE__AK_BNC = 0x200, // Cycles CMS Horizontal Egress Queue is Not Empty -- AK - Bounce
		UNC_C_TXR_HORZ_CYCLES_NE__MASK__SKX_UNC_C_TXR_HORZ_CYCLES_NE__BL_BNC = 0x400, // Cycles CMS Horizontal Egress Queue is Not Empty -- BL - Bounce
		UNC_C_TXR_HORZ_CYCLES_NE__MASK__SKX_UNC_C_TXR_HORZ_CYCLES_NE__BL_CRD = 0x4000, // Cycles CMS Horizontal Egress Queue is Not Empty -- BL - Credit
		UNC_C_TXR_HORZ_CYCLES_NE__MASK__SKX_UNC_C_TXR_HORZ_CYCLES_NE__IV_BNC = 0x800, // Cycles CMS Horizontal Egress Queue is Not Empty -- IV - Bounce
		UNC_C_TXR_HORZ_INSERTS = 0x95, // Number of allocations into the Transgress buffers in the Common Mesh Stop  The egress is used to queue up requests destined for the Horizontal Ring on the Mesh.
		UNC_C_TXR_HORZ_INSERTS__MASK__SKX_UNC_C_TXR_HORZ_INSERTS__AD_BNC = 0x100, // CMS Horizontal Egress Inserts -- AD - Bounce
		UNC_C_TXR_HORZ_INSERTS__MASK__SKX_UNC_C_TXR_HORZ_INSERTS__AD_CRD = 0x1000, // CMS Horizontal Egress Inserts -- AD - Credit
		UNC_C_TXR_HORZ_INSERTS__MASK__SKX_UNC_C_TXR_HORZ_INSERTS__AK_BNC = 0x200, // CMS Horizontal Egress Inserts -- AK - Bounce
		UNC_C_TXR_HORZ_INSERTS__MASK__SKX_UNC_C_TXR_HORZ_INSERTS__BL_BNC = 0x400, // CMS Horizontal Egress Inserts -- BL - Bounce
		UNC_C_TXR_HORZ_INSERTS__MASK__SKX_UNC_C_TXR_HORZ_INSERTS__BL_CRD = 0x4000, // CMS Horizontal Egress Inserts -- BL - Credit
		UNC_C_TXR_HORZ_INSERTS__MASK__SKX_UNC_C_TXR_HORZ_INSERTS__IV_BNC = 0x800, // CMS Horizontal Egress Inserts -- IV - Bounce
		UNC_C_TXR_HORZ_NACK = 0x99, // Counts number of Egress packets NACKed on to the Horizontal Rinng
		UNC_C_TXR_HORZ_NACK__MASK__SKX_UNC_C_TXR_HORZ_NACK__AD_BNC = 0x100, // CMS Horizontal Egress NACKs -- AD - Bounce
		UNC_C_TXR_HORZ_NACK__MASK__SKX_UNC_C_TXR_HORZ_NACK__AD_CRD = 0x2000, // CMS Horizontal Egress NACKs -- AD - Credit
		UNC_C_TXR_HORZ_NACK__MASK__SKX_UNC_C_TXR_HORZ_NACK__AK_BNC = 0x200, // CMS Horizontal Egress NACKs -- AK - Bounce
		UNC_C_TXR_HORZ_NACK__MASK__SKX_UNC_C_TXR_HORZ_NACK__BL_BNC = 0x400, // CMS Horizontal Egress NACKs -- BL - Bounce
		UNC_C_TXR_HORZ_NACK__MASK__SKX_UNC_C_TXR_HORZ_NACK__BL_CRD = 0x4000, // CMS Horizontal Egress NACKs -- BL - Credit
		UNC_C_TXR_HORZ_NACK__MASK__SKX_UNC_C_TXR_HORZ_NACK__IV_BNC = 0x800, // CMS Horizontal Egress NACKs -- IV - Bounce
		UNC_C_TXR_HORZ_OCCUPANCY = 0x94, // Occupancy event for the Transgress buffers in the Common Mesh Stop  The egress is used to queue up requests destined for the Horizontal Ring on the Mesh.
		UNC_C_TXR_HORZ_OCCUPANCY__MASK__SKX_UNC_C_TXR_HORZ_OCCUPANCY__AD_BNC = 0x100, // CMS Horizontal Egress Occupancy -- AD - Bounce
		UNC_C_TXR_HORZ_OCCUPANCY__MASK__SKX_UNC_C_TXR_HORZ_OCCUPANCY__AD_CRD = 0x1000, // CMS Horizontal Egress Occupancy -- AD - Credit
		UNC_C_TXR_HORZ_OCCUPANCY__MASK__SKX_UNC_C_TXR_HORZ_OCCUPANCY__AK_BNC = 0x200, // CMS Horizontal Egress Occupancy -- AK - Bounce
		UNC_C_TXR_HORZ_OCCUPANCY__MASK__SKX_UNC_C_TXR_HORZ_OCCUPANCY__BL_BNC = 0x400, // CMS Horizontal Egress Occupancy -- BL - Bounce
		UNC_C_TXR_HORZ_OCCUPANCY__MASK__SKX_UNC_C_TXR_HORZ_OCCUPANCY__BL_CRD = 0x4000, // CMS Horizontal Egress Occupancy -- BL - Credit
		UNC_C_TXR_HORZ_OCCUPANCY__MASK__SKX_UNC_C_TXR_HORZ_OCCUPANCY__IV_BNC = 0x800, // CMS Horizontal Egress Occupancy -- IV - Bounce
		UNC_C_TXR_HORZ_STARVED = 0x9b, // Counts injection starvation.  This starvation is triggered when the CMS Transgress buffer cannot send a transaction onto the Horizontal ring for a long period of time.
		UNC_C_TXR_HORZ_STARVED__MASK__SKX_UNC_C_TXR_HORZ_STARVED__AD_BNC = 0x100, // CMS Horizontal Egress Injection Starvation -- AD - Bounce
		UNC_C_TXR_HORZ_STARVED__MASK__SKX_UNC_C_TXR_HORZ_STARVED__AK_BNC = 0x200, // CMS Horizontal Egress Injection Starvation -- AK - Bounce
		UNC_C_TXR_HORZ_STARVED__MASK__SKX_UNC_C_TXR_HORZ_STARVED__BL_BNC = 0x400, // CMS Horizontal Egress Injection Starvation -- BL - Bounce
		UNC_C_TXR_HORZ_STARVED__MASK__SKX_UNC_C_TXR_HORZ_STARVED__IV_BNC = 0x800, // CMS Horizontal Egress Injection Starvation -- IV - Bounce
		UNC_C_TXR_VERT_ADS_USED = 0x9c, // Number of packets using the Vertical Anti-Deadlock Slot
		UNC_C_TXR_VERT_ADS_USED__MASK__SKX_UNC_C_TXR_VERT_ADS_USED__AD_AG0 = 0x100, // CMS Vertical ADS Used -- AD - Agent 0
		UNC_C_TXR_VERT_ADS_USED__MASK__SKX_UNC_C_TXR_VERT_ADS_USED__AD_AG1 = 0x1000, // CMS Vertical ADS Used -- AD - Agent 1
		UNC_C_TXR_VERT_ADS_USED__MASK__SKX_UNC_C_TXR_VERT_ADS_USED__AK_AG0 = 0x200, // CMS Vertical ADS Used -- AK - Agent 0
		UNC_C_TXR_VERT_ADS_USED__MASK__SKX_UNC_C_TXR_VERT_ADS_USED__AK_AG1 = 0x2000, // CMS Vertical ADS Used -- AK - Agent 1
		UNC_C_TXR_VERT_ADS_USED__MASK__SKX_UNC_C_TXR_VERT_ADS_USED__BL_AG0 = 0x400, // CMS Vertical ADS Used -- BL - Agent 0
		UNC_C_TXR_VERT_ADS_USED__MASK__SKX_UNC_C_TXR_VERT_ADS_USED__BL_AG1 = 0x4000, // CMS Vertical ADS Used -- BL - Agent 1
		UNC_C_TXR_VERT_BYPASS = 0x9e, // Number of packets bypassing the Vertical Egress
		UNC_C_TXR_VERT_BYPASS__MASK__SKX_UNC_C_TXR_VERT_BYPASS__AD_AG0 = 0x100, // CMS Vertical ADS Used -- AD - Agent 0
		UNC_C_TXR_VERT_BYPASS__MASK__SKX_UNC_C_TXR_VERT_BYPASS__AD_AG1 = 0x1000, // CMS Vertical ADS Used -- AD - Agent 1
		UNC_C_TXR_VERT_BYPASS__MASK__SKX_UNC_C_TXR_VERT_BYPASS__AK_AG0 = 0x200, // CMS Vertical ADS Used -- AK - Agent 0
		UNC_C_TXR_VERT_BYPASS__MASK__SKX_UNC_C_TXR_VERT_BYPASS__AK_AG1 = 0x2000, // CMS Vertical ADS Used -- AK - Agent 1
		UNC_C_TXR_VERT_BYPASS__MASK__SKX_UNC_C_TXR_VERT_BYPASS__BL_AG0 = 0x400, // CMS Vertical ADS Used -- BL - Agent 0
		UNC_C_TXR_VERT_BYPASS__MASK__SKX_UNC_C_TXR_VERT_BYPASS__BL_AG1 = 0x4000, // CMS Vertical ADS Used -- BL - Agent 1
		UNC_C_TXR_VERT_BYPASS__MASK__SKX_UNC_C_TXR_VERT_BYPASS__IV = 0x800, // CMS Vertical ADS Used -- IV
		UNC_C_TXR_VERT_CYCLES_FULL = 0x92, // Number of cycles the Common Mesh Stop Egress was Not Full.  The Egress is used to queue up requests destined for the Vertical Ring on the Mesh.
		UNC_C_TXR_VERT_CYCLES_FULL__MASK__SKX_UNC_C_TXR_VERT_CYCLES_FULL__AD_AG0 = 0x100, // Cycles CMS Vertical Egress Queue Is Full -- AD - Agent 0
		UNC_C_TXR_VERT_CYCLES_FULL__MASK__SKX_UNC_C_TXR_VERT_CYCLES_FULL__AD_AG1 = 0x1000, // Cycles CMS Vertical Egress Queue Is Full -- AD - Agent 1
		UNC_C_TXR_VERT_CYCLES_FULL__MASK__SKX_UNC_C_TXR_VERT_CYCLES_FULL__AK_AG0 = 0x200, // Cycles CMS Vertical Egress Queue Is Full -- AK - Agent 0
		UNC_C_TXR_VERT_CYCLES_FULL__MASK__SKX_UNC_C_TXR_VERT_CYCLES_FULL__AK_AG1 = 0x2000, // Cycles CMS Vertical Egress Queue Is Full -- AK - Agent 1
		UNC_C_TXR_VERT_CYCLES_FULL__MASK__SKX_UNC_C_TXR_VERT_CYCLES_FULL__BL_AG0 = 0x400, // Cycles CMS Vertical Egress Queue Is Full -- BL - Agent 0
		UNC_C_TXR_VERT_CYCLES_FULL__MASK__SKX_UNC_C_TXR_VERT_CYCLES_FULL__BL_AG1 = 0x4000, // Cycles CMS Vertical Egress Queue Is Full -- BL - Agent 1
		UNC_C_TXR_VERT_CYCLES_FULL__MASK__SKX_UNC_C_TXR_VERT_CYCLES_FULL__IV = 0x800, // Cycles CMS Vertical Egress Queue Is Full -- IV
		UNC_C_TXR_VERT_CYCLES_NE = 0x93, // Number of cycles the Common Mesh Stop Egress was Not Empty.  The Egress is used to queue up requests destined for the Vertical Ring on the Mesh.
		UNC_C_TXR_VERT_CYCLES_NE__MASK__SKX_UNC_C_TXR_VERT_CYCLES_NE__AD_AG0 = 0x100, // Cycles CMS Vertical Egress Queue Is Not Empty -- AD - Agent 0
		UNC_C_TXR_VERT_CYCLES_NE__MASK__SKX_UNC_C_TXR_VERT_CYCLES_NE__AD_AG1 = 0x1000, // Cycles CMS Vertical Egress Queue Is Not Empty -- AD - Agent 1
		UNC_C_TXR_VERT_CYCLES_NE__MASK__SKX_UNC_C_TXR_VERT_CYCLES_NE__AK_AG0 = 0x200, // Cycles CMS Vertical Egress Queue Is Not Empty -- AK - Agent 0
		UNC_C_TXR_VERT_CYCLES_NE__MASK__SKX_UNC_C_TXR_VERT_CYCLES_NE__AK_AG1 = 0x2000, // Cycles CMS Vertical Egress Queue Is Not Empty -- AK - Agent 1
		UNC_C_TXR_VERT_CYCLES_NE__MASK__SKX_UNC_C_TXR_VERT_CYCLES_NE__BL_AG0 = 0x400, // Cycles CMS Vertical Egress Queue Is Not Empty -- BL - Agent 0
		UNC_C_TXR_VERT_CYCLES_NE__MASK__SKX_UNC_C_TXR_VERT_CYCLES_NE__BL_AG1 = 0x4000, // Cycles CMS Vertical Egress Queue Is Not Empty -- BL - Agent 1
		UNC_C_TXR_VERT_CYCLES_NE__MASK__SKX_UNC_C_TXR_VERT_CYCLES_NE__IV = 0x800, // Cycles CMS Vertical Egress Queue Is Not Empty -- IV
		UNC_C_TXR_VERT_INSERTS = 0x91, // Number of allocations into the Common Mesh Stop Egress.  The Egress is used to queue up requests destined for the Vertical Ring on the Mesh.
		UNC_C_TXR_VERT_INSERTS__MASK__SKX_UNC_C_TXR_VERT_INSERTS__AD_AG0 = 0x100, // CMS Vert Egress Allocations -- AD - Agent 0
		UNC_C_TXR_VERT_INSERTS__MASK__SKX_UNC_C_TXR_VERT_INSERTS__AD_AG1 = 0x1000, // CMS Vert Egress Allocations -- AD - Agent 1
		UNC_C_TXR_VERT_INSERTS__MASK__SKX_UNC_C_TXR_VERT_INSERTS__AK_AG0 = 0x200, // CMS Vert Egress Allocations -- AK - Agent 0
		UNC_C_TXR_VERT_INSERTS__MASK__SKX_UNC_C_TXR_VERT_INSERTS__AK_AG1 = 0x2000, // CMS Vert Egress Allocations -- AK - Agent 1
		UNC_C_TXR_VERT_INSERTS__MASK__SKX_UNC_C_TXR_VERT_INSERTS__BL_AG0 = 0x400, // CMS Vert Egress Allocations -- BL - Agent 0
		UNC_C_TXR_VERT_INSERTS__MASK__SKX_UNC_C_TXR_VERT_INSERTS__BL_AG1 = 0x4000, // CMS Vert Egress Allocations -- BL - Agent 1
		UNC_C_TXR_VERT_INSERTS__MASK__SKX_UNC_C_TXR_VERT_INSERTS__IV = 0x800, // CMS Vert Egress Allocations -- IV
		UNC_C_TXR_VERT_NACK = 0x98, // Counts number of Egress packets NACKed on to the Vertical Rinng
		UNC_C_TXR_VERT_NACK__MASK__SKX_UNC_C_TXR_VERT_NACK__AD_AG0 = 0x100, // CMS Vertical Egress NACKs -- AD - Agent 0
		UNC_C_TXR_VERT_NACK__MASK__SKX_UNC_C_TXR_VERT_NACK__AD_AG1 = 0x1000, // CMS Vertical Egress NACKs -- AD - Agent 1
		UNC_C_TXR_VERT_NACK__MASK__SKX_UNC_C_TXR_VERT_NACK__AK_AG0 = 0x200, // CMS Vertical Egress NACKs -- AK - Agent 0
		UNC_C_TXR_VERT_NACK__MASK__SKX_UNC_C_TXR_VERT_NACK__AK_AG1 = 0x2000, // CMS Vertical Egress NACKs -- AK - Agent 1
		UNC_C_TXR_VERT_NACK__MASK__SKX_UNC_C_TXR_VERT_NACK__BL_AG0 = 0x400, // CMS Vertical Egress NACKs -- BL - Agent 0
		UNC_C_TXR_VERT_NACK__MASK__SKX_UNC_C_TXR_VERT_NACK__BL_AG1 = 0x4000, // CMS Vertical Egress NACKs -- BL - Agent 1
		UNC_C_TXR_VERT_NACK__MASK__SKX_UNC_C_TXR_VERT_NACK__IV = 0x800, // CMS Vertical Egress NACKs -- IV
		UNC_C_TXR_VERT_OCCUPANCY = 0x90, // Occupancy event for the Egress buffers in the Common Mesh Stop  The egress is used to queue up requests destined for the Vertical Ring on the Mesh.
		UNC_C_TXR_VERT_OCCUPANCY__MASK__SKX_UNC_C_TXR_VERT_OCCUPANCY__AD_AG0 = 0x100, // CMS Vert Egress Occupancy -- AD - Agent 0
		UNC_C_TXR_VERT_OCCUPANCY__MASK__SKX_UNC_C_TXR_VERT_OCCUPANCY__AD_AG1 = 0x1000, // CMS Vert Egress Occupancy -- AD - Agent 1
		UNC_C_TXR_VERT_OCCUPANCY__MASK__SKX_UNC_C_TXR_VERT_OCCUPANCY__AK_AG0 = 0x200, // CMS Vert Egress Occupancy -- AK - Agent 0
		UNC_C_TXR_VERT_OCCUPANCY__MASK__SKX_UNC_C_TXR_VERT_OCCUPANCY__AK_AG1 = 0x2000, // CMS Vert Egress Occupancy -- AK - Agent 1
		UNC_C_TXR_VERT_OCCUPANCY__MASK__SKX_UNC_C_TXR_VERT_OCCUPANCY__BL_AG0 = 0x400, // CMS Vert Egress Occupancy -- BL - Agent 0
		UNC_C_TXR_VERT_OCCUPANCY__MASK__SKX_UNC_C_TXR_VERT_OCCUPANCY__BL_AG1 = 0x4000, // CMS Vert Egress Occupancy -- BL - Agent 1
		UNC_C_TXR_VERT_OCCUPANCY__MASK__SKX_UNC_C_TXR_VERT_OCCUPANCY__IV = 0x800, // CMS Vert Egress Occupancy -- IV
		UNC_C_TXR_VERT_STARVED = 0x9a, // Counts injection starvation.  This starvation is triggered when the CMS Egress cannot send a transaction onto the Vertical ring for a long period of time.
		UNC_C_TXR_VERT_STARVED__MASK__SKX_UNC_C_TXR_VERT_STARVED__AD_AG0 = 0x100, // CMS Vertical Egress Injection Starvation -- AD - Agent 0
		UNC_C_TXR_VERT_STARVED__MASK__SKX_UNC_C_TXR_VERT_STARVED__AD_AG1 = 0x1000, // CMS Vertical Egress Injection Starvation -- AD - Agent 1
		UNC_C_TXR_VERT_STARVED__MASK__SKX_UNC_C_TXR_VERT_STARVED__AK_AG0 = 0x200, // CMS Vertical Egress Injection Starvation -- AK - Agent 0
		UNC_C_TXR_VERT_STARVED__MASK__SKX_UNC_C_TXR_VERT_STARVED__AK_AG1 = 0x2000, // CMS Vertical Egress Injection Starvation -- AK - Agent 1
		UNC_C_TXR_VERT_STARVED__MASK__SKX_UNC_C_TXR_VERT_STARVED__BL_AG0 = 0x400, // CMS Vertical Egress Injection Starvation -- BL - Agent 0
		UNC_C_TXR_VERT_STARVED__MASK__SKX_UNC_C_TXR_VERT_STARVED__BL_AG1 = 0x4000, // CMS Vertical Egress Injection Starvation -- BL - Agent 1
		UNC_C_TXR_VERT_STARVED__MASK__SKX_UNC_C_TXR_VERT_STARVED__IV = 0x800, // CMS Vertical Egress Injection Starvation -- IV
		UNC_C_VERT_RING_AD_IN_USE = 0xa6, // Counts the number of cycles that the Vertical AD ring is being used at this ring stop.  This includes when packets are passing by and when packets are being sunk
		UNC_C_VERT_RING_AD_IN_USE__MASK__SKX_UNC_C_VERT_RING_AD_IN_USE__DN_EVEN = 0x400, // Vertical AD Ring In Use -- Down and Even
		UNC_C_VERT_RING_AD_IN_USE__MASK__SKX_UNC_C_VERT_RING_AD_IN_USE__DN_ODD = 0x800, // Vertical AD Ring In Use -- Down and Odd
		UNC_C_VERT_RING_AD_IN_USE__MASK__SKX_UNC_C_VERT_RING_AD_IN_USE__UP_EVEN = 0x100, // Vertical AD Ring In Use -- Up and Even
		UNC_C_VERT_RING_AD_IN_USE__MASK__SKX_UNC_C_VERT_RING_AD_IN_USE__UP_ODD = 0x200, // Vertical AD Ring In Use -- Up and Odd
		UNC_C_VERT_RING_AK_IN_USE = 0xa8, // Counts the number of cycles that the Vertical AK ring is being used at this ring stop.  This includes when packets are passing by and when packets are being sunk
		UNC_C_VERT_RING_AK_IN_USE__MASK__SKX_UNC_C_VERT_RING_AK_IN_USE__DN_EVEN = 0x400, // Vertical AK Ring In Use -- Down and Even
		UNC_C_VERT_RING_AK_IN_USE__MASK__SKX_UNC_C_VERT_RING_AK_IN_USE__DN_ODD = 0x800, // Vertical AK Ring In Use -- Down and Odd
		UNC_C_VERT_RING_AK_IN_USE__MASK__SKX_UNC_C_VERT_RING_AK_IN_USE__UP_EVEN = 0x100, // Vertical AK Ring In Use -- Up and Even
		UNC_C_VERT_RING_AK_IN_USE__MASK__SKX_UNC_C_VERT_RING_AK_IN_USE__UP_ODD = 0x200, // Vertical AK Ring In Use -- Up and Odd
		UNC_C_VERT_RING_BL_IN_USE = 0xaa, // Counts the number of cycles that the Vertical BL ring is being used at this ring stop.  This includes when packets are passing by and when packets are being sunk
		UNC_C_VERT_RING_BL_IN_USE__MASK__SKX_UNC_C_VERT_RING_BL_IN_USE__DN_EVEN = 0x400, // Vertical BL Ring in Use -- Down and Even
		UNC_C_VERT_RING_BL_IN_USE__MASK__SKX_UNC_C_VERT_RING_BL_IN_USE__DN_ODD = 0x800, // Vertical BL Ring in Use -- Down and Odd
		UNC_C_VERT_RING_BL_IN_USE__MASK__SKX_UNC_C_VERT_RING_BL_IN_USE__UP_EVEN = 0x100, // Vertical BL Ring in Use -- Up and Even
		UNC_C_VERT_RING_BL_IN_USE__MASK__SKX_UNC_C_VERT_RING_BL_IN_USE__UP_ODD = 0x200, // Vertical BL Ring in Use -- Up and Odd
		UNC_C_VERT_RING_IV_IN_USE = 0xac, // Counts the number of cycles that the Vertical IV ring is being used at this ring stop.  This includes when packets are passing by and when packets are being sunk
		UNC_C_VERT_RING_IV_IN_USE__MASK__SKX_UNC_C_VERT_RING_IV_IN_USE__DN = 0x400, // Vertical IV Ring in Use -- Down
		UNC_C_VERT_RING_IV_IN_USE__MASK__SKX_UNC_C_VERT_RING_IV_IN_USE__UP = 0x100, // Vertical IV Ring in Use -- Up
		UNC_C_WB_PUSH_MTOI = 0x56, // Counts the number of times when the CHA was received WbPushMtoI
		UNC_C_WB_PUSH_MTOI__MASK__SKX_UNC_C_WB_PUSH_MTOI__LLC = 0x100, // WbPushMtoI -- Pushed to LLC
		UNC_C_WB_PUSH_MTOI__MASK__SKX_UNC_C_WB_PUSH_MTOI__MEM = 0x200, // WbPushMtoI -- Pushed to Memory
		UNC_C_WRITE_NO_CREDITS = 0x5a, // Counts the number of times when there are no credits available for sending WRITEs from the CHA into the iMC.  In order to send WRITEs into the memory controller
		UNC_C_WRITE_NO_CREDITS__MASK__SKX_UNC_C_WRITE_NO_CREDITS__EDC0_SMI2 = 0x400, // CHA iMC CHNx WRITE Credits Empty -- EDC0_SMI2
		UNC_C_WRITE_NO_CREDITS__MASK__SKX_UNC_C_WRITE_NO_CREDITS__EDC1_SMI3 = 0x800, // CHA iMC CHNx WRITE Credits Empty -- EDC1_SMI3
		UNC_C_WRITE_NO_CREDITS__MASK__SKX_UNC_C_WRITE_NO_CREDITS__EDC2_SMI4 = 0x1000, // CHA iMC CHNx WRITE Credits Empty -- EDC2_SMI4
		UNC_C_WRITE_NO_CREDITS__MASK__SKX_UNC_C_WRITE_NO_CREDITS__EDC3_SMI5 = 0x2000, // CHA iMC CHNx WRITE Credits Empty -- EDC3_SMI5
		UNC_C_WRITE_NO_CREDITS__MASK__SKX_UNC_C_WRITE_NO_CREDITS__MC0_SMI0 = 0x100, // CHA iMC CHNx WRITE Credits Empty -- MC0_SMI0
		UNC_C_WRITE_NO_CREDITS__MASK__SKX_UNC_C_WRITE_NO_CREDITS__MC1_SMI1 = 0x200, // CHA iMC CHNx WRITE Credits Empty -- MC1_SMI1
		UNC_C_XSNP_RESP = 0x32, // Counts the number of core cross snoops.  Cores are snooped if the transaction looks up the cache and determines that it is necessary based on the operation type. This event can be filtered based on who triggered the initial snoop(s):  from Evictions
		UNC_C_XSNP_RESP__MASK__SKX_UNC_C_XSNP_RESP__ANY_RSPI_FWDFE = 0xe400, // Core Cross Snoop Responses -- Any RspIFwdFE
		UNC_C_XSNP_RESP__MASK__SKX_UNC_C_XSNP_RESP__ANY_RSPS_FWDFE = 0xe200, // Core Cross Snoop Responses -- Any RspSFwdFE
		UNC_C_XSNP_RESP__MASK__SKX_UNC_C_XSNP_RESP__ANY_RSPS_FWDM = 0xe800, // Core Cross Snoop Responses -- Any RspSFwdM
		UNC_C_XSNP_RESP__MASK__SKX_UNC_C_XSNP_RESP__ANY_RSP_HITFSE = 0xe100, // Core Cross Snoop Responses -- Any RspHitFSE
		UNC_C_XSNP_RESP__MASK__SKX_UNC_C_XSNP_RESP__CORE_RSPI_FWDFE = 0x4400, // Core Cross Snoop Responses -- Core RspIFwdFE
		UNC_C_XSNP_RESP__MASK__SKX_UNC_C_XSNP_RESP__CORE_RSPI_FWDM = 0x5000, // Core Cross Snoop Responses -- Core RspIFwdM
		UNC_C_XSNP_RESP__MASK__SKX_UNC_C_XSNP_RESP__CORE_RSPS_FWDFE = 0x4200, // Core Cross Snoop Responses -- Core RspSFwdFE
		UNC_C_XSNP_RESP__MASK__SKX_UNC_C_XSNP_RESP__CORE_RSPS_FWDM = 0x4800, // Core Cross Snoop Responses -- Core RspSFwdM
		UNC_C_XSNP_RESP__MASK__SKX_UNC_C_XSNP_RESP__CORE_RSP_HITFSE = 0x4100, // Core Cross Snoop Responses -- Core RspHitFSE
		UNC_C_XSNP_RESP__MASK__SKX_UNC_C_XSNP_RESP__EVICT_RSPI_FWDFE = 0x8400, // Core Cross Snoop Responses -- Evict RspIFwdFE
		UNC_C_XSNP_RESP__MASK__SKX_UNC_C_XSNP_RESP__EVICT_RSPI_FWDM = 0x9000, // Core Cross Snoop Responses -- Evict RspIFwdM
		UNC_C_XSNP_RESP__MASK__SKX_UNC_C_XSNP_RESP__EVICT_RSPS_FWDFE = 0x8200, // Core Cross Snoop Responses -- Evict RspSFwdFE
		UNC_C_XSNP_RESP__MASK__SKX_UNC_C_XSNP_RESP__EVICT_RSPS_FWDM = 0x8800, // Core Cross Snoop Responses -- Evict RspSFwdM
		UNC_C_XSNP_RESP__MASK__SKX_UNC_C_XSNP_RESP__EVICT_RSP_HITFSE = 0x8100, // Core Cross Snoop Responses -- Evict RspHitFSE
		UNC_C_XSNP_RESP__MASK__SKX_UNC_C_XSNP_RESP__EXT_RSPI_FWDFE = 0x2400, // Core Cross Snoop Responses -- External RspIFwdFE
		UNC_C_XSNP_RESP__MASK__SKX_UNC_C_XSNP_RESP__EXT_RSPI_FWDM = 0x3000, // Core Cross Snoop Responses -- External RspIFwdM
		UNC_C_XSNP_RESP__MASK__SKX_UNC_C_XSNP_RESP__EXT_RSPS_FWDFE = 0x2200, // Core Cross Snoop Responses -- External RspSFwdFE
		UNC_C_XSNP_RESP__MASK__SKX_UNC_C_XSNP_RESP__EXT_RSPS_FWDM = 0x2800, // Core Cross Snoop Responses -- External RspSFwdM
		UNC_C_XSNP_RESP__MASK__SKX_UNC_C_XSNP_RESP__EXT_RSP_HITFSE = 0x2100, // Core Cross Snoop Responses -- External RspHitFSE
		
	};
};